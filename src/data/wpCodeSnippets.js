// 100 Most Used & Searched WordPress Code Snippets
// Each snippet includes full SEO metadata, FAQs, and schema markup

export const wpCodeSnippets = [
  {
    id: 1,
    slug: 'disable-xmlrpc-wordpress-security',
    title: 'How to Disable XML-RPC in WordPress for Enhanced Security',
    excerpt: 'Learn how to disable XML-RPC in WordPress to prevent brute force attacks and DDoS vulnerabilities. Complete code snippet with security best practices.',
    content: `
      <h2>What is XML-RPC and Why Disable It?</h2>
      <p>XML-RPC is a WordPress API that allows remote connections to your site. While useful for some integrations, it's often exploited by hackers for brute force attacks and DDoS attacks.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Disable XML-RPC
add_filter('xmlrpc_enabled', '__return_false');

// Disable XML-RPC pingback
add_filter('wp_xmlrpc_server_class', 'disable_xmlrpc_pingback');
function disable_xmlrpc_pingback($methods) {
    unset($methods['pingback.ping']);
    return $methods;
}</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Access your WordPress site via FTP or file manager</li>
        <li>Navigate to wp-content/themes/your-theme/</li>
        <li>Open functions.php file</li>
        <li>Add the code snippet at the end of the file</li>
        <li>Save and upload the file</li>
      </ol>

      <h3>Alternative Method: .htaccess</h3>
      <pre><code class="language-apache"># Block WordPress xmlrpc.php requests
&lt;Files xmlrpc.php&gt;
  order deny,allow
  deny from all
&lt;/Files&gt;</code></pre>

      <h3>When to Keep XML-RPC Enabled</h3>
      <ul>
        <li>Using Jetpack plugin</li>
        <li>Mobile app publishing (WordPress iOS/Android apps)</li>
        <li>Third-party integrations like IFTTT or Zapier</li>
        <li>Remote publishing tools</li>
      </ul>

      <h3>Security Benefits</h3>
      <p>Disabling XML-RPC provides multiple security advantages:</p>
      <ul>
        <li>Prevents brute force login attempts via XML-RPC</li>
        <li>Blocks DDoS amplification attacks</li>
        <li>Eliminates pingback spam</li>
        <li>Reduces server load from malicious requests</li>
      </ul>
    `,
    code: `add_filter('xmlrpc_enabled', '__return_false');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '4 min read',
    category: 'WordPress Security',
    tags: ['WordPress Security', 'XML-RPC', 'Brute Force Protection', 'DDoS Prevention', 'WordPress Hardening'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Disable XML-RPC in WordPress: Security Code Snippet 2025',
      metaDescription: 'Secure your WordPress site by disabling XML-RPC. Step-by-step guide with code snippets to prevent brute force and DDoS attacks.',
      keywords: ['disable xmlrpc wordpress', 'wordpress security', 'xmlrpc attacks', 'wordpress hardening', 'prevent brute force'],
      canonical: '/blog/disable-xmlrpc-wordpress-security',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Disable XML-RPC in WordPress for Enhanced Security",
        "description": "Learn how to disable XML-RPC in WordPress to prevent brute force attacks and DDoS vulnerabilities.",
        "articleBody": "Complete guide with code snippets",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What is XML-RPC in WordPress?",
        answer: "XML-RPC is a remote procedure call (RPC) protocol that uses XML to encode its calls and HTTP as a transport mechanism. In WordPress, it enables remote connections to your site, allowing mobile apps and third-party tools to interact with your WordPress installation."
      },
      {
        question: "Will disabling XML-RPC break my WordPress site?",
        answer: "No, disabling XML-RPC won't break your WordPress site for most users. However, it will prevent certain features from working, such as the WordPress mobile app, Jetpack's core features, and some third-party integrations that rely on XML-RPC."
      },
      {
        question: "How do I know if XML-RPC is being exploited on my site?",
        answer: "Signs of XML-RPC exploitation include: unusual traffic spikes to xmlrpc.php, multiple failed login attempts in server logs, slow site performance, or high server resource usage. Use security plugins like Wordfence to monitor for XML-RPC attacks."
      },
      {
        question: "Can I selectively disable certain XML-RPC methods?",
        answer: "Yes, you can disable specific XML-RPC methods while keeping others active. The code snippet provided shows how to disable pingback.ping specifically while keeping other XML-RPC functionality intact."
      },
      {
        question: "Is there a plugin to disable XML-RPC?",
        answer: "Yes, plugins like 'Disable XML-RPC-API', 'WPCode', and most security plugins (Wordfence, iThemes Security) offer options to disable XML-RPC without editing code."
      }
    ]
  },
  {
    id: 2,
    slug: 'limit-login-attempts-wordpress-code',
    title: 'Limit Login Attempts in WordPress Without a Plugin',
    excerpt: 'Protect your WordPress site from brute force attacks by limiting login attempts using custom code. No plugin required.',
    content: `
      <h2>Why Limit Login Attempts?</h2>
      <p>WordPress by default allows unlimited login attempts, making it vulnerable to brute force attacks where hackers try thousands of username/password combinations.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Limit Login Attempts
function limit_login_attempts() {
    $max_attempts = 3;
    $lockout_duration = 900; // 15 minutes in seconds

    $user_login_log = get_transient('user_login_attempts_' . $_SERVER['REMOTE_ADDR']);

    if ($user_login_log && $user_login_log['attempts'] >= $max_attempts) {
        $time_remaining = $user_login_log['time'] + $lockout_duration - time();

        if ($time_remaining > 0) {
            wp_die('Too many failed login attempts. Please try again in ' .
                   ceil($time_remaining / 60) . ' minutes.');
        } else {
            delete_transient('user_login_attempts_' . $_SERVER['REMOTE_ADDR']);
        }
    }
}
add_action('wp_login_failed', 'log_failed_login');

function log_failed_login() {
    $user_login_log = get_transient('user_login_attempts_' . $_SERVER['REMOTE_ADDR']);

    if (!$user_login_log) {
        $user_login_log = array('attempts' => 1, 'time' => time());
    } else {
        $user_login_log['attempts']++;
        $user_login_log['time'] = time();
    }

    set_transient('user_login_attempts_' . $_SERVER['REMOTE_ADDR'],
                  $user_login_log, 900);
}

add_action('authenticate', 'limit_login_attempts', 30);</code></pre>

      <h3>How It Works</h3>
      <ul>
        <li><strong>Max Attempts:</strong> Allows 3 failed login attempts</li>
        <li><strong>Lockout Duration:</strong> Blocks IP for 15 minutes after exceeding attempts</li>
        <li><strong>Transient Storage:</strong> Uses WordPress transients to track attempts</li>
        <li><strong>IP-Based Blocking:</strong> Identifies users by IP address</li>
      </ul>

      <h3>Customization Options</h3>
      <p>You can customize the snippet by modifying these variables:</p>
      <pre><code class="language-php">$max_attempts = 3;      // Change to 5 for more lenient policy
$lockout_duration = 900; // Change to 3600 for 1 hour lockout</code></pre>

      <h3>Enhanced Version with Email Notifications</h3>
      <pre><code class="language-php">function notify_admin_lockout() {
    $email = get_option('admin_email');
    $subject = 'Login Lockout Activated';
    $message = 'IP Address: ' . $_SERVER['REMOTE_ADDR'] . ' has been locked out.';
    wp_mail($email, $subject, $message);
}
// Call this function when lockout occurs</code></pre>

      <h3>Security Best Practices</h3>
      <ul>
        <li>Combine with strong password policies</li>
        <li>Use two-factor authentication</li>
        <li>Change default 'admin' username</li>
        <li>Monitor login activity regularly</li>
        <li>Consider using a firewall for additional protection</li>
      </ul>
    `,
    code: `add_action('authenticate', 'limit_login_attempts', 30);`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WordPress Security',
    tags: ['Login Security', 'Brute Force Protection', 'WordPress Security', 'Custom Code', 'Authentication'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.5+',
    seo: {
      metaTitle: 'Limit Login Attempts WordPress Code Snippet (No Plugin) 2025',
      metaDescription: 'Protect WordPress from brute force attacks with this custom code snippet to limit login attempts without using plugins.',
      keywords: ['limit login attempts wordpress', 'brute force protection', 'wordpress login security', 'prevent hacking', 'wordpress code snippet'],
      canonical: '/blog/limit-login-attempts-wordpress-code',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Limit Login Attempts in WordPress Without a Plugin",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "How many login attempts should I allow before lockout?",
        answer: "Industry standard is 3-5 failed attempts. Three attempts balance security with user experience - it's enough to accommodate typos while preventing brute force attacks."
      },
      {
        question: "How long should the lockout duration be?",
        answer: "Common lockout durations range from 15 minutes to 1 hour. Start with 15 minutes (900 seconds) and increase if you notice continued attack patterns. Progressive lockout (increasing duration with repeated offenses) is even more secure."
      },
      {
        question: "Will this code block legitimate users who forget their password?",
        answer: "Yes, temporarily. Users who exceed the attempt limit will be locked out for the specified duration. Always provide clear messaging about the lockout and duration, and ensure password reset functionality works properly."
      },
      {
        question: "Can attackers bypass this by changing their IP address?",
        answer: "Yes, sophisticated attackers using rotating proxies or VPNs can bypass IP-based blocking. For enhanced security, combine this with additional measures like CAPTCHA, two-factor authentication, and Web Application Firewall (WAF)."
      },
      {
        question: "Does this snippet work with custom login pages?",
        answer: "Yes, this snippet hooks into WordPress's core authentication process, so it works with custom login pages as long as they use the standard WordPress login functions."
      }
    ]
  },
  {
    id: 3,
    slug: 'disable-wordpress-admin-bar',
    title: 'Disable WordPress Admin Bar for Non-Administrators',
    excerpt: 'Remove the WordPress admin toolbar for specific user roles while keeping it visible for administrators.',
    content: `
      <h2>Understanding the WordPress Admin Bar</h2>
      <p>The WordPress admin bar appears at the top of your site for logged-in users. While useful for administrators, it can be distracting for other user roles.</p>

      <h3>Basic Code Snippet: Disable for All Users</h3>
      <pre><code class="language-php">// Disable admin bar for all users
add_filter('show_admin_bar', '__return_false');</code></pre>

      <h3>Advanced: Disable for Non-Administrators Only</h3>
      <pre><code class="language-php">// Disable admin bar for non-administrators
function disable_admin_bar_for_non_admins() {
    if (!current_user_can('administrator') && !is_admin()) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'disable_admin_bar_for_non_admins');</code></pre>

      <h3>Role-Specific Control</h3>
      <pre><code class="language-php">// Disable for specific roles
function hide_admin_bar_based_on_role() {
    $user = wp_get_current_user();
    $roles_to_hide = array('subscriber', 'contributor', 'customer');

    if (array_intersect($roles_to_hide, $user->roles)) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_based_on_role');</code></pre>

      <h3>Frontend Only Hiding</h3>
      <pre><code class="language-php">// Hide on frontend but keep in admin area
function hide_admin_bar_frontend() {
    if (!is_admin()) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_frontend');</code></pre>

      <h3>User Profile Option Control</h3>
      <pre><code class="language-php">// Remove admin bar profile option for subscribers
function remove_admin_bar_settings() {
    if (!current_user_can('edit_posts')) {
        remove_action('admin_color_scheme_picker', 'admin_color_scheme_picker');

        add_filter('user_can_richedit', function($default) {
            if (!current_user_can('edit_posts')) {
                return false;
            }
            return $default;
        });
    }
}
add_action('init', 'remove_admin_bar_settings');</code></pre>

      <h3>CSS Method (Alternative)</h3>
      <pre><code class="language-css">/* Hide admin bar with CSS */
#wpadminbar {
    display: none !important;
}

body.admin-bar {
    margin-top: 0 !important;
}

html {
    margin-top: 0 !important;
}</code></pre>

      <h3>Use Cases</h3>
      <ul>
        <li><strong>Membership Sites:</strong> Cleaner experience for members</li>
        <li><strong>Client Sites:</strong> Prevent confusion for non-technical clients</li>
        <li><strong>WooCommerce:</strong> Better UX for customers with accounts</li>
        <li><strong>Course Platforms:</strong> Distraction-free learning environment</li>
      </ul>

      <h3>Important Considerations</h3>
      <ul>
        <li>Admin bar provides quick access to useful features</li>
        <li>Consider user experience before removing completely</li>
        <li>Some plugins add functionality to admin bar</li>
        <li>Test with all user roles before deployment</li>
      </ul>
    `,
    code: `add_filter('show_admin_bar', '__return_false');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '4 min read',
    category: 'WordPress Customization',
    tags: ['Admin Bar', 'User Experience', 'WordPress Customization', 'User Roles', 'Frontend'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.1+',
    seo: {
      metaTitle: 'Disable WordPress Admin Bar: Complete Code Snippet Guide 2025',
      metaDescription: 'Learn how to disable the WordPress admin toolbar for specific user roles with custom code. Improve UX without using plugins.',
      keywords: ['disable admin bar wordpress', 'hide wordpress toolbar', 'remove admin bar', 'wordpress customization', 'user roles'],
      canonical: '/blog/disable-wordpress-admin-bar',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Disable WordPress Admin Bar for Non-Administrators",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will disabling the admin bar affect site functionality?",
        answer: "No, disabling the admin bar is purely cosmetic and won't affect your WordPress site's core functionality. Users can still access the dashboard by navigating to /wp-admin/."
      },
      {
        question: "Can users still access the dashboard if the admin bar is disabled?",
        answer: "Yes, users can access the dashboard directly by typing yoursite.com/wp-admin in their browser or using a direct link to the login page."
      },
      {
        question: "Should I disable the admin bar for administrators?",
        answer: "Generally no. The admin bar provides quick access to important features like post editing, comments, and site management tools that administrators use frequently."
      },
      {
        question: "Does hiding the admin bar improve site performance?",
        answer: "Minimally. The admin bar does load some CSS and JavaScript, but the performance impact is negligible. The main benefit is improved user experience and cleaner design."
      },
      {
        question: "Can I add custom items to the admin bar instead of removing it?",
        answer: "Yes, you can customize the admin bar by adding or removing items using the 'admin_bar_menu' action hook. This allows you to create a tailored experience for different user roles."
      }
    ]
  },
  {
    id: 4,
    slug: 'change-wordpress-excerpt-length',
    title: 'Change WordPress Excerpt Length with Custom Code',
    excerpt: 'Customize the default 55-word excerpt limit in WordPress to any length you prefer using this simple code snippet.',
    content: `
      <h2>Default WordPress Excerpt Behavior</h2>
      <p>WordPress automatically truncates post excerpts to 55 words by default. This snippet allows you to customize that length to match your design needs.</p>

      <h3>Basic Excerpt Length Change</h3>
      <pre><code class="language-php">// Change excerpt length to 30 words
function custom_excerpt_length($length) {
    return 30;
}
add_filter('excerpt_length', 'custom_excerpt_length');</code></pre>

      <h3>Dynamic Length Based on Post Type</h3>
      <pre><code class="language-php">// Different excerpt lengths for different post types
function custom_excerpt_length_by_type($length) {
    global $post;

    if ($post->post_type == 'post') {
        return 40; // Blog posts: 40 words
    } elseif ($post->post_type == 'product') {
        return 20; // Products: 20 words
    } elseif ($post->post_type == 'portfolio') {
        return 50; // Portfolio: 50 words
    }

    return 55; // Default for everything else
}
add_filter('excerpt_length', 'custom_excerpt_length_by_type', 999);</code></pre>

      <h3>Custom Excerpt with Character Limit</h3>
      <pre><code class="language-php">// Limit excerpt by characters instead of words
function character_limited_excerpt($excerpt) {
    $limit = 150; // Character limit

    if (strlen($excerpt) > $limit) {
        $excerpt = substr($excerpt, 0, $limit);
        $excerpt = substr($excerpt, 0, strrpos($excerpt, ' '));
        $excerpt .= '...';
    }

    return $excerpt;
}
add_filter('get_the_excerpt', 'character_limited_excerpt');</code></pre>

      <h3>Change "Read More" Text</h3>
      <pre><code class="language-php">// Customize the excerpt "Read More" link
function custom_excerpt_more($more) {
    global $post;
    return '... <a class="read-more" href="' .
           get_permalink($post->ID) . '">Continue Reading</a>';
}
add_filter('excerpt_more', 'custom_excerpt_more');</code></pre>

      <h3>Preserve HTML Formatting in Excerpts</h3>
      <pre><code class="language-php">// Keep HTML tags in excerpts
function keep_html_excerpt($excerpt) {
    $excerpt = strip_tags($excerpt, '<p><br><strong><em><a>');
    return $excerpt;
}
add_filter('the_excerpt', 'keep_html_excerpt');</code></pre>

      <h3>Advanced: Create Custom Excerpt Function</h3>
      <pre><code class="language-php">// Custom excerpt function with multiple options
function advanced_custom_excerpt($limit = 55, $more_text = '...', $strip_html = true) {
    global $post;

    $excerpt = $post->post_excerpt ?
                $post->post_excerpt :
                $post->post_content;

    if ($strip_html) {
        $excerpt = strip_tags($excerpt);
    }

    $words = explode(' ', $excerpt, $limit + 1);

    if (count($words) > $limit) {
        array_pop($words);
        $excerpt = implode(' ', $words) . $more_text;
    } else {
        $excerpt = implode(' ', $words);
    }

    return $excerpt;
}

// Usage: echo advanced_custom_excerpt(50, '... <a href="' .
//        get_permalink() . '">Read More</a>', true);</code></pre>

      <h3>Responsive Excerpt Lengths</h3>
      <pre><code class="language-php">// Adjust excerpt length based on viewport (requires JS)
function responsive_excerpt_length($length) {
    // Use longer excerpts for desktop
    if (!wp_is_mobile()) {
        return 60;
    }
    // Shorter for mobile
    return 25;
}
add_filter('excerpt_length', 'responsive_excerpt_length');</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Consider your design and content type when choosing length</li>
        <li>Test excerpts on different screen sizes</li>
        <li>Ensure "read more" links are accessible</li>
        <li>Use consistent excerpt lengths across similar content types</li>
        <li>Avoid extremely short excerpts that don't provide context</li>
      </ul>
    `,
    code: `add_filter('excerpt_length', 'custom_excerpt_length');`,
    author: 'Shahmir Khan',
    date: '2025-01-19',
    readTime: '5 min read',
    category: 'WordPress Content',
    tags: ['Excerpts', 'Content Display', 'WordPress Filters', 'Theme Development', 'Post Formatting'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.9+',
    seo: {
      metaTitle: 'Change WordPress Excerpt Length: Complete Code Guide 2025',
      metaDescription: 'Learn how to customize WordPress excerpt length with code snippets. Control word count, character limits, and read more text.',
      keywords: ['wordpress excerpt length', 'change excerpt wordpress', 'custom excerpt length', 'wordpress excerpt code', 'modify excerpt'],
      canonical: '/blog/change-wordpress-excerpt-length',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Change WordPress Excerpt Length with Custom Code",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the default WordPress excerpt length?",
        answer: "WordPress sets the default excerpt length to 55 words. This has been the standard since WordPress 2.9."
      },
      {
        question: "Can I have different excerpt lengths on different pages?",
        answer: "Yes, you can create conditional logic in your excerpt_length filter to return different values based on post type, category, page template, or any other condition."
      },
      {
        question: "Should I count by words or characters?",
        answer: "Words are more common and easier to read, but characters give you more precise control over excerpt length. Choose based on your design constraints - use characters if you have strict space limitations."
      },
      {
        question: "How do I manually set an excerpt for a post?",
        answer: "In the WordPress post editor, look for the 'Excerpt' meta box (you may need to enable it in Screen Options). Any text you enter there will be used instead of the automatic excerpt."
      },
      {
        question: "Will changing excerpt length affect SEO?",
        answer: "Not directly. However, well-crafted excerpts can improve click-through rates from archive pages and search results. Make sure excerpts are descriptive and contain relevant keywords."
      }
    ]
  },
  {
    id: 5,
    slug: 'add-featured-image-rss-feed',
    title: 'Add Featured Images to WordPress RSS Feed',
    excerpt: 'Automatically include post thumbnails in your WordPress RSS feeds to make your content more engaging in feed readers.',
    content: `
      <h2>Why Add Featured Images to RSS Feeds?</h2>
      <p>Many RSS readers display images from feeds, making your content more visually appealing and increasing engagement. By default, WordPress doesn't include featured images in RSS feeds.</p>

      <h3>Basic Featured Image in RSS</h3>
      <pre><code class="language-php">// Add featured image to RSS feed
function add_featured_image_to_rss($content) {
    global $post;

    if (has_post_thumbnail($post->ID)) {
        $content = '<div>' . get_the_post_thumbnail($post->ID, 'medium') .
                   '</div>' . $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'add_featured_image_to_rss');
add_filter('the_content_feed', 'add_featured_image_to_rss');</code></pre>

      <h3>Advanced: Custom Image Size for RSS</h3>
      <pre><code class="language-php">// Add featured image with custom size
function custom_rss_featured_image($content) {
    global $post;

    if (has_post_thumbnail($post->ID)) {
        // Get the image URL in large size
        $thumbnail = get_the_post_thumbnail_url($post->ID, 'large');

        $content = '<p><img src="' . esc_url($thumbnail) . '"
                     alt="' . get_the_title() . '"
                     style="max-width: 100%; height: auto;" /></p>' .
                   $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'custom_rss_featured_image');
add_filter('the_content_feed', 'custom_rss_featured_image');</code></pre>

      <h3>Add Image with Caption</h3>
      <pre><code class="language-php">// Featured image with caption in RSS
function rss_image_with_caption($content) {
    global $post;

    if (has_post_thumbnail($post->ID)) {
        $thumbnail_id = get_post_thumbnail_id($post->ID);
        $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'large');
        $caption = get_post($thumbnail_id)->post_excerpt;

        $image_html = '<figure>';
        $image_html .= '<img src="' . esc_url($thumbnail[0]) . '"
                        alt="' . get_the_title() . '"
                        width="' . $thumbnail[1] . '"
                        height="' . $thumbnail[2] . '" />';

        if ($caption) {
            $image_html .= '<figcaption>' . esc_html($caption) . '</figcaption>';
        }

        $image_html .= '</figure>';
        $content = $image_html . $content;
    }

    return $content;
}
add_filter('the_content_feed', 'rss_image_with_caption');</code></pre>

      <h3>Add Multiple Images from Gallery</h3>
      <pre><code class="language-php">// Include all images from post in RSS feed
function add_all_post_images_to_rss($content) {
    global $post;

    // Add featured image first
    if (has_post_thumbnail($post->ID)) {
        $content = get_the_post_thumbnail($post->ID, 'large') . $content;
    }

    // Get all images attached to the post
    $attachments = get_posts(array(
        'post_type' => 'attachment',
        'posts_per_page' => 5,
        'post_parent' => $post->ID,
        'post_mime_type' => 'image',
        'orderby' => 'menu_order',
        'order' => 'ASC'
    ));

    if ($attachments) {
        foreach ($attachments as $attachment) {
            $image = wp_get_attachment_image($attachment->ID, 'medium');
            $content = $image . $content;
        }
    }

    return $content;
}
add_filter('the_content_feed', 'add_all_post_images_to_rss');</code></pre>

      <h3>Media RSS (MRSS) Support</h3>
      <pre><code class="language-php">// Add Media RSS namespace and featured image
function add_mrss_namespace() {
    echo 'xmlns:media="http://search.yahoo.com/mrss/"';
}
add_action('rss2_ns', 'add_mrss_namespace');

function add_mrss_featured_image() {
    global $post;

    if (has_post_thumbnail($post->ID)) {
        $thumbnail = get_the_post_thumbnail_url($post->ID, 'full');
        echo '<media:content url="' . esc_url($thumbnail) . '" medium="image" />';
    }
}
add_action('rss2_item', 'add_mrss_featured_image');</code></pre>

      <h3>Conditional Image Inclusion</h3>
      <pre><code class="language-php">// Only add images to specific post types in RSS
function conditional_rss_images($content) {
    global $post;

    $allowed_post_types = array('post', 'portfolio', 'product');

    if (in_array($post->post_type, $allowed_post_types) &&
        has_post_thumbnail($post->ID)) {
        $content = get_the_post_thumbnail($post->ID, 'large') . $content;
    }

    return $content;
}
add_filter('the_content_feed', 'conditional_rss_images');</code></pre>

      <h3>Benefits of RSS Images</h3>
      <ul>
        <li>Increased click-through rates from feed readers</li>
        <li>Better content preview in RSS aggregators</li>
        <li>Improved social sharing when feeds are syndicated</li>
        <li>Enhanced visual appeal in email subscribers</li>
        <li>Better engagement on platforms like Feedly</li>
      </ul>

      <h3>Testing Your RSS Feed</h3>
      <ul>
        <li>Use the W3C Feed Validator to check for errors</li>
        <li>Test in multiple RSS readers (Feedly, Inoreader, etc.)</li>
        <li>Check image loading and size</li>
        <li>Verify mobile responsiveness</li>
        <li>Monitor feed loading speed</li>
      </ul>
    `,
    code: `add_filter('the_content_feed', 'add_featured_image_to_rss');`,
    author: 'Shahmir Khan',
    date: '2025-01-19',
    readTime: '5 min read',
    category: 'WordPress RSS',
    tags: ['RSS Feed', 'Featured Images', 'Content Syndication', 'WordPress Filters', 'Media'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.9+',
    seo: {
      metaTitle: 'Add Featured Images to WordPress RSS Feed: Complete Guide 2025',
      metaDescription: 'Learn how to automatically include featured images in WordPress RSS feeds with custom code snippets. Improve feed engagement.',
      keywords: ['wordpress rss featured image', 'add image to rss feed', 'wordpress rss images', 'feed customization', 'media rss'],
      canonical: '/blog/add-featured-image-rss-feed',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Featured Images to WordPress RSS Feed",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will adding images to RSS feed slow down feed loading?",
        answer: "The images themselves are loaded from your server when readers view the feed, so they don't slow down the feed XML generation. However, ensure you're using optimized, reasonably-sized images (medium or large, not full-size) to provide good user experience."
      },
      {
        question: "Do all RSS readers support images?",
        answer: "Most modern RSS readers like Feedly, Inoreader, and NewsBlur support images. However, some older or text-only readers may not display them. Adding images won't break these readers - they'll simply ignore the image tags."
      },
      {
        question: "Should I use the_excerpt_rss or the_content_feed filter?",
        answer: "Use both if you want images in all feed types. the_excerpt_rss affects excerpt-only feeds, while the_content_feed affects full-content feeds. Apply the filter to both to ensure images appear regardless of feed type."
      },
      {
        question: "Can I add different images for RSS vs. the website?",
        answer: "Yes, you can use custom fields or post meta to store an alternative 'RSS image' and check for it in your filter function. If it exists, use that; otherwise, fall back to the featured image."
      },
      {
        question: "How do I validate that images are appearing correctly in my RSS feed?",
        answer: "Subscribe to your feed in a reader like Feedly or use the W3C Feed Validator. You can also view your feed XML directly by visiting yoursite.com/feed/ and inspecting the image tags in the item content."
      }
    ]
  }
,
  // Continue with remaining snippets...
  {
    id: 6,
    slug: 'register-custom-post-type-wordpress',
    title: 'How to Register a Custom Post Type in WordPress',
    excerpt: 'Create custom content types beyond posts and pages with this comprehensive custom post type registration snippet.',
    content: `
      <h2>Understanding Custom Post Types</h2>
      <p>Custom post types allow you to create different content types beyond the default posts and pages, perfect for portfolios, products, testimonials, and more.</p>

      <h3>Basic Custom Post Type Registration</h3>
      <pre><code class="language-php">// Register Custom Post Type
function create_portfolio_post_type() {
    $args = array(
        'labels' => array(
            'name' => 'Portfolio',
            'singular_name' => 'Portfolio Item',
            'add_new' => 'Add New Item',
            'add_new_item' => 'Add New Portfolio Item',
            'edit_item' => 'Edit Portfolio Item',
            'new_item' => 'New Portfolio Item',
            'view_item' => 'View Portfolio Item',
            'search_items' => 'Search Portfolio',
            'not_found' => 'No portfolio items found',
            'not_found_in_trash' => 'No portfolio items found in trash'
        ),
        'public' => true,
        'has_archive' => true,
        'publicly_queryable' => true,
        'show_ui' => true,
        'show_in_menu' => true,
        'show_in_rest' => true, // Enables Gutenberg editor
        'menu_icon' => 'dashicons-portfolio',
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt', 'custom-fields'),
        'rewrite' => array('slug' => 'portfolio'),
        'capability_type' => 'post',
        'hierarchical' => false,
    );

    register_post_type('portfolio', $args);
}
add_action('init', 'create_portfolio_post_type');</code></pre>

      <h3>Custom Post Type with Custom Taxonomies</h3>
      <pre><code class="language-php">// Register Custom Post Type with Taxonomy
function create_product_cpt_and_taxonomy() {
    // Register Custom Post Type
    register_post_type('product', array(
        'labels' => array(
            'name' => 'Products',
            'singular_name' => 'Product'
        ),
        'public' => true,
        'has_archive' => true,
        'show_in_rest' => true,
        'menu_icon' => 'dashicons-products',
        'supports' => array('title', 'editor', 'thumbnail'),
        'rewrite' => array('slug' => 'products'),
    ));

    // Register Custom Taxonomy
    register_taxonomy('product_category', 'product', array(
        'labels' => array(
            'name' => 'Product Categories',
            'singular_name' => 'Product Category'
        ),
        'hierarchical' => true,
        'show_in_rest' => true,
        'rewrite' => array('slug' => 'product-category'),
    ));
}
add_action('init', 'create_product_cpt_and_taxonomy');</code></pre>

      <h3>Advanced Features</h3>
      <ul>
        <li><strong>has_archive:</strong> Creates archive page (e.g., /portfolio/)</li>
        <li><strong>show_in_rest:</strong> Enables Gutenberg and REST API</li>
        <li><strong>hierarchical:</strong> Makes it work like pages (with parent/child)</li>
        <li><strong>supports:</strong> Controls which features are available</li>
        <li><strong>menu_icon:</strong> Sets admin menu icon (Dashicons)</li>
      </ul>

      <h3>Flushing Rewrite Rules</h3>
      <pre><code class="language-php">// Flush rewrite rules on theme activation
function my_rewrite_flush() {
    create_portfolio_post_type();
    flush_rewrite_rules();
}
register_activation_hook(__FILE__, 'my_rewrite_flush');</code></pre>

      <h3>Common Use Cases</h3>
      <ul>
        <li>Portfolio items for creative agencies</li>
        <li>Team members for company websites</li>
        <li>Testimonials for service businesses</li>
        <li>Events for organizations</li>
        <li>Recipes for food blogs</li>
        <li>Properties for real estate sites</li>
      </ul>
    `,
    code: `register_post_type('portfolio', $args);`,
    author: 'Shahmir Khan',
    date: '2025-01-19',
    readTime: '6 min read',
    category: 'WordPress Development',
    tags: ['Custom Post Types', 'WordPress Development', 'CPT', 'Content Types', 'register_post_type'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Register Custom Post Type in WordPress: Complete Guide 2025',
      metaDescription: 'Learn how to create custom post types in WordPress with comprehensive code examples. Add portfolios, products, and more.',
      keywords: ['custom post type wordpress', 'register_post_type', 'wordpress cpt', 'custom content types', 'wordpress development'],
      canonical: '/blog/register-custom-post-type-wordpress'
    },
    faqs: [
      {
        question: "What's the difference between posts, pages, and custom post types?",
        answer: "Posts are blog entries displayed chronologically, pages are static content, and custom post types are specialized content with unique purposes (like portfolios or products). Custom post types can have their own templates, taxonomies, and features."
      },
      {
        question: "Do I need to flush rewrite rules after registering a custom post type?",
        answer: "Yes, the first time you register a custom post type, you need to flush rewrite rules by visiting Settings > Permalinks in WordPress admin. This ensures WordPress recognizes the new URL structure."
      },
      {
        question: "Can I query custom post types like regular posts?",
        answer: "Yes, use WP_Query or get_posts() with the 'post_type' parameter. Example: new WP_Query(array('post_type' => 'portfolio'))."
      },
      {
        question: "Should I put custom post type code in my theme or plugin?",
        answer: "Best practice is to create a custom plugin for CPTs. If you change themes, your content won't disappear. However, theme-specific CPTs can go in functions.php."
      },
      {
        question: "What does 'show_in_rest' do?",
        answer: "This enables the WordPress REST API and Gutenberg editor for your custom post type. Set it to true to use the block editor; false for the classic editor."
      }
    ]
  },
  {
    id: 7,
    slug: 'add-custom-widget-area-wordpress',
    title: 'Add Custom Widget Area (Sidebar) to WordPress',
    excerpt: 'Create additional widget areas in WordPress for footers, sidebars, or any custom location in your theme.',
    content: `
      <h2>Understanding WordPress Widget Areas</h2>
      <p>Widget areas (also called sidebars) are containers where you can add widgets. Adding custom widget areas gives you more flexibility in your theme layout.</p>

      <h3>Register a Single Widget Area</h3>
      <pre><code class="language-php">// Register custom widget area
function register_custom_widget_area() {
    register_sidebar(array(
        'id' => 'custom-sidebar',
        'name' => __('Custom Sidebar', 'theme-domain'),
        'description' => __('A custom widget area', 'theme-domain'),
        'before_widget' => '<div id="%1$s" class="widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<h3 class="widget-title">',
        'after_title' => '</h3>',
    ));
}
add_action('widgets_init', 'register_custom_widget_area');</code></pre>

      <h3>Register Multiple Widget Areas</h3>
      <pre><code class="language-php">// Register multiple widget areas
function register_theme_widget_areas() {
    // Footer Column 1
    register_sidebar(array(
        'id' => 'footer-1',
        'name' => 'Footer Column 1',
        'before_widget' => '<aside class="widget">',
        'after_widget' => '</aside>',
        'before_title' => '<h4 class="widget-title">',
        'after_title' => '</h4>',
    ));

    // Footer Column 2
    register_sidebar(array(
        'id' => 'footer-2',
        'name' => 'Footer Column 2',
        'before_widget' => '<aside class="widget">',
        'after_widget' => '</aside>',
        'before_title' => '<h4 class="widget-title">',
        'after_title' => '</h4>',
    ));

    // Header Widget Area
    register_sidebar(array(
        'id' => 'header-widgets',
        'name' => 'Header Widgets',
        'before_widget' => '<div class="header-widget">',
        'after_widget' => '</div>',
        'before_title' => '<h2>',
        'after_title' => '</h2>',
    ));
}
add_action('widgets_init', 'register_theme_widget_areas');</code></pre>

      <h3>Display Widget Area in Template</h3>
      <pre><code class="language-php">&lt;?php
// Display widget area in your theme template
if (is_active_sidebar('custom-sidebar')) {
    dynamic_sidebar('custom-sidebar');
}
?&gt;</code></pre>

      <h3>Conditional Widget Areas</h3>
      <pre><code class="language-php">// Show different widget area based on page type
if (is_front_page() && is_active_sidebar('homepage-widgets')) {
    dynamic_sidebar('homepage-widgets');
} elseif (is_single() && is_active_sidebar('post-sidebar')) {
    dynamic_sidebar('post-sidebar');
} else {
    dynamic_sidebar('default-sidebar');
}</code></pre>

      <h3>Advanced: Widget Area with Custom Classes</h3>
      <pre><code class="language-php">function advanced_widget_area() {
    register_sidebar(array(
        'id' => 'advanced-sidebar',
        'name' => 'Advanced Sidebar',
        'before_widget' => '<section id="%1$s" class="widget %2$s clearfix">',
        'after_widget' => '</section>',
        'before_title' => '<h3 class="widget-title"><span>',
        'after_title' => '</span></h3>',
    ));
}
add_action('widgets_init', 'advanced_widget_area');</code></pre>

      <h3>Common Widget Area Locations</h3>
      <ul>
        <li><strong>Footer columns:</strong> Multiple widget areas for footer content</li>
        <li><strong>Header area:</strong> For search, social media, or CTAs</li>
        <li><strong>Sidebar alternatives:</strong> Different sidebars for different sections</li>
        <li><strong>Before content:</strong> Widget area above main content</li>
        <li><strong>After content:</strong> Widget area below main content</li>
        <li><strong>Page-specific:</strong> Widgets for specific pages or templates</li>
      </ul>
    `,
    code: `register_sidebar(array('id' => 'custom-sidebar'));`,
    author: 'Shahmir Khan',
    date: '2025-01-18',
    readTime: '5 min read',
    category: 'WordPress Theme Development',
    tags: ['Widgets', 'Sidebars', 'Theme Development', 'Widget Areas', 'register_sidebar'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.2+',
    seo: {
      metaTitle: 'Add Custom Widget Area in WordPress: Complete Tutorial 2025',
      metaDescription: 'Learn how to register and display custom widget areas in WordPress. Create sidebars, footer columns, and more.',
      keywords: ['wordpress widget area', 'register sidebar', 'custom sidebar wordpress', 'widget areas', 'wordpress widgets'],
      canonical: '/blog/add-custom-widget-area-wordpress'
    },
    faqs: [
      {
        question: "What's the difference between a widget and a widget area?",
        answer: "A widget area (sidebar) is a container that holds widgets. Widgets are individual blocks of content (like recent posts, search, or custom HTML) that you can add to widget areas."
      },
      {
        question: "Can I have multiple widget areas with the same name?",
        answer: "No, each widget area must have a unique ID, but they can have similar display names. The ID is what WordPress uses internally to identify the widget area."
      },
      {
        question: "Why use before_widget and after_widget parameters?",
        answer: "These parameters wrap each widget in HTML, letting you control the markup structure and apply consistent styling. The %1$s and %2$s placeholders are replaced with the widget ID and classes."
      },
      {
        question: "How do I remove a default WordPress widget area?",
        answer: "Use unregister_sidebar('sidebar-id') in your functions.php file. To find the ID, check the parent theme's sidebar registration or use the Customize screen."
      },
      {
        question: "Do I need to create a template file to display my widget area?",
        answer: "Yes, you need to add the dynamic_sidebar() function to a theme template file where you want the widget area to appear (like sidebar.php, footer.php, or any custom template)."
      }
    ]
  },
  {
    id: 8,
    slug: 'enqueue-scripts-styles-wordpress',
    title: 'Properly Enqueue Scripts and Styles in WordPress',
    excerpt: 'Learn the correct way to add CSS and JavaScript files to WordPress using wp_enqueue_script and wp_enqueue_style.',
    content: `
      <h2>Why Use wp_enqueue Instead of Direct Linking?</h2>
      <p>wp_enqueue_script() and wp_enqueue_style() prevent conflicts, manage dependencies, and ensure scripts load in the correct order.</p>

      <h3>Enqueue a Stylesheet</h3>
      <pre><code class="language-php">// Enqueue custom stylesheet
function enqueue_custom_styles() {
    wp_enqueue_style(
        'custom-style',                                    // Handle
        get_template_directory_uri() . '/css/custom.css',  // Path
        array(),                                           // Dependencies
        '1.0.0',                                          // Version
        'all'                                             // Media type
    );
}
add_action('wp_enqueue_scripts', 'enqueue_custom_styles');</code></pre>

      <h3>Enqueue a JavaScript File</h3>
      <pre><code class="language-php">// Enqueue custom JavaScript
function enqueue_custom_scripts() {
    wp_enqueue_script(
        'custom-script',                                  // Handle
        get_template_directory_uri() . '/js/custom.js',   // Path
        array('jquery'),                                  // Dependencies
        '1.0.0',                                         // Version
        true                                             // Load in footer (true/false)
    );
}
add_action('wp_enqueue_scripts', 'enqueue_custom_scripts');</code></pre>

      <h3>Complete Example with Multiple Files</h3>
      <pre><code class="language-php">function enqueue_theme_assets() {
    // Enqueue main stylesheet
    wp_enqueue_style('main-style', get_stylesheet_uri(), array(), '1.0.0');

    // Enqueue Google Fonts
    wp_enqueue_style(
        'google-fonts',
        'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap',
        array(),
        null
    );

    // Enqueue Bootstrap CSS
    wp_enqueue_style(
        'bootstrap',
        'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',
        array(),
        '5.3.0'
    );

    // Enqueue jQuery (WordPress includes it by default)
    wp_enqueue_script('jquery');

    // Enqueue custom JavaScript with jQuery dependency
    wp_enqueue_script(
        'main-js',
        get_template_directory_uri() . '/js/main.js',
        array('jquery'),
        '1.0.0',
        true
    );

    // Localize script (pass PHP variables to JavaScript)
    wp_localize_script('main-js', 'themeData', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('theme-nonce'),
        'siteUrl' => get_site_url()
    ));
}
add_action('wp_enqueue_scripts', 'enqueue_theme_assets');</code></pre>

      <h3>Conditional Enqueueing</h3>
      <pre><code class="language-php">// Load scripts/styles only where needed
function conditional_enqueue() {
    // Only on homepage
    if (is_front_page()) {
        wp_enqueue_script('homepage-slider', get_template_directory_uri() . '/js/slider.js');
    }

    // Only on single posts
    if (is_single()) {
        wp_enqueue_style('single-post-style', get_template_directory_uri() . '/css/single.css');
    }

    // Only on specific page template
    if (is_page_template('template-contact.php')) {
        wp_enqueue_script('contact-form', get_template_directory_uri() . '/js/contact.js');
    }

    // Only for logged-in users
    if (is_user_logged_in()) {
        wp_enqueue_style('member-style', get_template_directory_uri() . '/css/member.css');
    }
}
add_action('wp_enqueue_scripts', 'conditional_enqueue');</code></pre>

      <h3>Dequeue Unnecessary Scripts</h3>
      <pre><code class="language-php">// Remove unwanted scripts/styles
function dequeue_unnecessary_assets() {
    // Remove WordPress emoji script
    remove_action('wp_head', 'print_emoji_detection_script', 7);
    remove_action('wp_print_styles', 'print_emoji_styles');

    // Dequeue jQuery Migrate
    wp_dequeue_script('jquery-migrate');

    // Dequeue WooCommerce scripts on non-shop pages
    if (!is_woocommerce() && !is_cart() && !is_checkout()) {
        wp_dequeue_style('woocommerce-general');
        wp_dequeue_style('woocommerce-layout');
        wp_dequeue_style('woocommerce-smallscreen');
    }
}
add_action('wp_enqueue_scripts', 'dequeue_unnecessary_assets', 100);</code></pre>

      <h3>Admin Scripts and Styles</h3>
      <pre><code class="language-php">// Enqueue in WordPress admin
function enqueue_admin_assets() {
    wp_enqueue_style('admin-custom', get_template_directory_uri() . '/css/admin.css');
    wp_enqueue_script('admin-custom', get_template_directory_uri() . '/js/admin.js');
}
add_action('admin_enqueue_scripts', 'enqueue_admin_assets');</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Always use wp_enqueue_scripts hook (not wp_head or wp_footer)</li>
        <li>Specify dependencies to ensure correct loading order</li>
        <li>Use versioning to bust cache when files update</li>
        <li>Load JavaScript in footer when possible (set 5th parameter to true)</li>
        <li>Use conditional loading to improve performance</li>
        <li>Always dequeue scripts you don't need</li>
      </ul>
    `,
    code: `add_action('wp_enqueue_scripts', 'enqueue_custom_scripts');`,
    author: 'Shahmir Khan',
    date: '2025-01-18',
    readTime: '7 min read',
    category: 'WordPress Development',
    tags: ['wp_enqueue_script', 'wp_enqueue_style', 'JavaScript', 'CSS', 'Theme Development', 'Performance'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 2.1+',
    seo: {
      metaTitle: 'Enqueue Scripts & Styles in WordPress: Complete Guide 2025',
      metaDescription: 'Learn how to properly add CSS and JavaScript to WordPress using wp_enqueue_script and wp_enqueue_style. Best practices included.',
      keywords: ['wp_enqueue_script', 'wp_enqueue_style', 'wordpress javascript', 'wordpress css', 'enqueue scripts'],
      canonical: '/blog/enqueue-scripts-styles-wordpress'
    },
    faqs: [
      {
        question: "Why shouldn't I just add scripts to header.php or footer.php?",
        answer: "Direct linking can cause conflicts with plugins, doesn't manage dependencies, makes it harder to conditionally load scripts, and breaks when themes are updated. wp_enqueue is the WordPress-standard way that prevents these issues."
      },
      {
        question: "What does the dependencies parameter do?",
        answer: "Dependencies ensure scripts load in the correct order. If your script requires jQuery, specify array('jquery') as the dependency - WordPress will automatically load jQuery before your script."
      },
      {
        question: "Should I load JavaScript in the header or footer?",
        answer: "Load in the footer (set the 5th parameter to true) unless the script must run before page content loads. Footer loading improves page load performance by not blocking HTML rendering."
      },
      {
        question: "How do I pass PHP variables to my JavaScript file?",
        answer: "Use wp_localize_script() after wp_enqueue_script(). This creates a JavaScript object you can access in your JS file, perfect for passing AJAX URLs, nonces, or other PHP data."
      },
      {
        question: "What's the difference between get_template_directory_uri() and get_stylesheet_directory_uri()?",
        answer: "get_template_directory_uri() points to the parent theme, while get_stylesheet_directory_uri() points to the active theme (child theme if used). Use get_stylesheet_directory_uri() in child themes."
      }
    ]
  },
  {
    id: 9,
    slug: 'two-factor-authentication',
    title: 'Add Two-Factor Authentication Code',
    excerpt: 'Implement basic two-factor authentication in WordPress to add an extra layer of security to user logins.',
    content: `
      <h2>Why Two-Factor Authentication?</h2>
      <p>Two-factor authentication (2FA) adds a second verification step to the login process, making it much harder for attackers to gain access even if they have the password.</p>

      <h3>Basic 2FA Implementation with Email</h3>
      <pre><code class="language-php">// Add 2FA code generation and validation
function generate_2fa_code($user_id) {
    $code = sprintf('%06d', mt_rand(0, 999999));
    set_transient('2fa_code_' . $user_id, $code, 600); // 10 minutes
    return $code;
}

function send_2fa_code($user_id) {
    $user = get_userdata($user_id);
    $code = generate_2fa_code($user_id);

    $subject = 'Your Login Verification Code';
    $message = "Your verification code is: $code\n\nThis code will expire in 10 minutes.";

    wp_mail($user->user_email, $subject, $message);
}

function verify_2fa_code($user_id, $code) {
    $stored_code = get_transient('2fa_code_' . $user_id);

    if ($stored_code && $stored_code === $code) {
        delete_transient('2fa_code_' . $user_id);
        return true;
    }

    return false;
}

// Intercept login and require 2FA
add_filter('authenticate', 'require_2fa_on_login', 30, 3);
function require_2fa_on_login($user, $username, $password) {
    if (is_wp_error($user)) {
        return $user;
    }

    // Only require 2FA for administrators
    if (in_array('administrator', $user->roles)) {
        if (!isset($_POST['2fa_code'])) {
            // First login attempt - send code
            send_2fa_code($user->ID);

            // Store user data in session
            set_transient('2fa_user_' . $user->ID, $user->ID, 600);

            wp_die('
                <form method="post" action="' . wp_login_url() . '">
                    <h2>Two-Factor Authentication</h2>
                    <p>A verification code has been sent to your email.</p>
                    <p>
                        <label>Verification Code:<br>
                        <input type="text" name="2fa_code" required></label>
                    </p>
                    <input type="hidden" name="log" value="' . esc_attr($username) . '">
                    <input type="hidden" name="pwd" value="' . esc_attr($password) . '">
                    <p><input type="submit" value="Verify"></p>
                </form>
            ');
        } else {
            // Verify the code
            if (!verify_2fa_code($user->ID, $_POST['2fa_code'])) {
                return new WP_Error('2fa_failed', 'Invalid verification code.');
            }
        }
    }

    return $user;
}</code></pre>

      <h3>Alternative: Google Authenticator Style</h3>
      <pre><code class="language-php">// Using TOTP (Time-based One-Time Password)
// Requires: composer require spomky-labs/otphp

use OTPHP\TOTP;

function generate_totp_secret($user_id) {
    $totp = TOTP::create();
    update_user_meta($user_id, '2fa_secret', $totp->getSecret());
    return $totp->getProvisioningUri(
        get_userdata($user_id)->user_email,
        get_bloginfo('name')
    );
}

function verify_totp_code($user_id, $code) {
    $secret = get_user_meta($user_id, '2fa_secret', true);

    if (!$secret) {
        return false;
    }

    $totp = TOTP::create($secret);
    return $totp->verify($code);
}</code></pre>

      <h3>User Profile Integration</h3>
      <pre><code class="language-php">// Add 2FA settings to user profile
add_action('show_user_profile', 'add_2fa_profile_fields');
add_action('edit_user_profile', 'add_2fa_profile_fields');

function add_2fa_profile_fields($user) {
    if (!current_user_can('administrator')) {
        return;
    }

    $enabled = get_user_meta($user->ID, '2fa_enabled', true);
    ?>
    <h3>Two-Factor Authentication</h3>
    <table class="form-table">
        <tr>
            <th><label for="2fa_enabled">Enable 2FA</label></th>
            <td>
                <input type="checkbox" name="2fa_enabled" id="2fa_enabled"
                       value="1" <?php checked($enabled, '1'); ?>>
                <p class="description">Require verification code when logging in.</p>
            </td>
        </tr>
    </table>
    <?php
}

add_action('personal_options_update', 'save_2fa_profile_fields');
add_action('edit_user_profile_update', 'save_2fa_profile_fields');

function save_2fa_profile_fields($user_id) {
    if (!current_user_can('edit_user', $user_id)) {
        return;
    }

    update_user_meta($user_id, '2fa_enabled', isset($_POST['2fa_enabled']) ? '1' : '0');
}</code></pre>

      <h3>Security Considerations</h3>
      <ul>
        <li>Use secure random number generation for codes</li>
        <li>Set appropriate expiration times (5-10 minutes)</li>
        <li>Limit the number of verification attempts</li>
        <li>Provide backup codes for account recovery</li>
        <li>Log all 2FA events for security auditing</li>
      </ul>

      <h3>Recovery Options</h3>
      <ul>
        <li>Generate backup codes that can be used once</li>
        <li>Allow email-based recovery for locked accounts</li>
        <li>Implement admin override for emergency access</li>
        <li>Provide clear instructions for users who lose access</li>
      </ul>
    `,
    code: `add_filter('authenticate', 'require_2fa_on_login', 30, 3);`,
    author: 'Shahmir Khan',
    date: '2025-01-18',
    readTime: '8 min read',
    category: 'WordPress Security',
    tags: ['Security', '2FA', 'Authentication', 'Login Protection', 'Two-Factor'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Two-Factor Authentication to WordPress: Complete Code Guide',
      metaDescription: 'Implement 2FA in WordPress with custom code. Email-based and Google Authenticator-style examples included with security best practices.',
      keywords: ['wordpress 2fa', 'two factor authentication wordpress', 'wordpress login security', 'totp wordpress', 'secure wordpress login'],
      canonical: '/blog/two-factor-authentication',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Two-Factor Authentication Code",
        "proficiencyLevel": "Advanced"
      }
    },
    faqs: [
      {
        question: "What's the difference between TOTP and email-based 2FA?",
        answer: "TOTP (Time-based One-Time Password) uses apps like Google Authenticator and generates codes offline based on a shared secret. Email-based 2FA sends codes via email. TOTP is more secure as it doesn't rely on email delivery and can't be intercepted as easily."
      },
      {
        question: "Should I require 2FA for all users or just administrators?",
        answer: "Start with administrators and users with elevated privileges (editors, shop managers). You can then offer 2FA as an optional feature for all users, letting them enable it in their profile settings."
      },
      {
        question: "How do I handle users who lose access to their 2FA device?",
        answer: "Implement backup codes (single-use codes generated during 2FA setup), email recovery options, or provide an admin override feature. Always have a recovery mechanism documented and easily accessible."
      },
      {
        question: "Can I use a plugin instead of custom code for 2FA?",
        answer: "Yes, plugins like 'Two-Factor', 'Wordfence', or 'iThemes Security' provide robust 2FA implementations with user interfaces and recovery options. Custom code gives you more control but requires more maintenance."
      },
      {
        question: "How long should verification codes remain valid?",
        answer: "5-10 minutes is standard. This balances security (shorter is better) with user experience (users need time to receive and enter the code). TOTP codes typically have 30-second validity windows with a grace period."
      }
    ]
  },
  {
    id: 10,
    slug: 'block-bad-user-agents',
    title: 'Block Malicious User Agents',
    excerpt: 'Protect your WordPress site from malicious bots and scrapers by blocking known bad user agents at the application level.',
    content: `
      <h2>Why Block Bad User Agents?</h2>
      <p>Many bots and scrapers identify themselves through their user agent strings. Blocking known malicious user agents can reduce server load, prevent content scraping, and improve security.</p>

      <h3>Basic User Agent Blocking</h3>
      <pre><code class="language-php">// Block bad user agents
function block_bad_user_agents() {
    $bad_user_agents = array(
        'AhrefsBot',
        'SemrushBot',
        'DotBot',
        'MJ12bot',
        'rogerbot',
        'BLEXBot',
        'linkdexbot',
        'YandexBot',
        'Baiduspider',
        'magpie-crawler',
        'python-requests',
        'wget',
        'curl'
    );

    $user_agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';

    foreach ($bad_user_agents as $bot) {
        if (stripos($user_agent, $bot) !== false) {
            header('HTTP/1.1 403 Forbidden');
            die('Access Denied');
        }
    }
}
add_action('init', 'block_bad_user_agents', 1);</code></pre>

      <h3>Selective Blocking with Whitelist</h3>
      <pre><code class="language-php">// Block bots but allow legitimate crawlers
function selective_bot_blocking() {
    $user_agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';

    // Allow legitimate crawlers
    $whitelist = array(
        'Googlebot',
        'Bingbot',
        'Slurp', // Yahoo
        'DuckDuckBot',
        'facebookexternalhit'
    );

    foreach ($whitelist as $allowed) {
        if (stripos($user_agent, $allowed) !== false) {
            return; // Allow access
        }
    }

    // Block aggressive crawlers
    $blacklist = array(
        'AhrefsBot',
        'SemrushBot',
        'MJ12bot',
        'BLEXBot'
    );

    foreach ($blacklist as $blocked) {
        if (stripos($user_agent, $blocked) !== false) {
            status_header(403);
            nocache_headers();
            die('Bot access not permitted');
        }
    }
}
add_action('init', 'selective_bot_blocking', 1);</code></pre>

      <h3>Log Blocked User Agents</h3>
      <pre><code class="language-php">// Log blocked bots for analysis
function log_blocked_user_agent($user_agent) {
    $log_file = WP_CONTENT_DIR . '/blocked-bots.log';
    $timestamp = current_time('mysql');
    $ip = $_SERVER['REMOTE_ADDR'];
    $log_entry = "[$timestamp] IP: $ip - UA: $user_agent\n";

    error_log($log_entry, 3, $log_file);
}

function block_and_log_bad_bots() {
    $bad_bots = array('AhrefsBot', 'SemrushBot', 'MJ12bot');
    $user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';

    foreach ($bad_bots as $bot) {
        if (stripos($user_agent, $bot) !== false) {
            log_blocked_user_agent($user_agent);
            wp_die('Access Denied', 'Bot Blocked', array('response' => 403));
        }
    }
}
add_action('init', 'block_and_log_bad_bots', 1);</code></pre>

      <h3>Rate Limiting for Suspicious Agents</h3>
      <pre><code class="language-php">// Rate limit suspicious user agents
function rate_limit_bots() {
    $user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';
    $ip = $_SERVER['REMOTE_ADDR'];

    $suspicious_patterns = array('bot', 'crawler', 'spider', 'scraper');

    $is_suspicious = false;
    foreach ($suspicious_patterns as $pattern) {
        if (stripos($user_agent, $pattern) !== false) {
            $is_suspicious = true;
            break;
        }
    }

    if ($is_suspicious) {
        $transient_key = 'bot_requests_' . md5($ip . $user_agent);
        $requests = get_transient($transient_key) ?: 0;

        $requests++;
        set_transient($transient_key, $requests, MINUTE_IN_SECONDS);

        // Allow max 10 requests per minute
        if ($requests > 10) {
            status_header(429);
            die('Too Many Requests');
        }
    }
}
add_action('init', 'rate_limit_bots', 1);</code></pre>

      <h3>Common Malicious Bots to Block</h3>
      <ul>
        <li><strong>AhrefsBot:</strong> Aggressive SEO crawler</li>
        <li><strong>SemrushBot:</strong> Competitive analysis tool</li>
        <li><strong>MJ12bot:</strong> Majestic SEO bot</li>
        <li><strong>BLEXBot:</strong> Known for aggressive crawling</li>
        <li><strong>python-requests/wget/curl:</strong> Often used by scrapers</li>
      </ul>

      <h3>Important Considerations</h3>
      <ul>
        <li>Don't block legitimate search engine bots (Google, Bing, etc.)</li>
        <li>Monitor your block list to avoid false positives</li>
        <li>Consider using robots.txt for polite bots</li>
        <li>Server-level blocking (.htaccess) is more efficient</li>
        <li>Regularly update your bot blocklist</li>
      </ul>
    `,
    code: `add_action('init', 'block_bad_user_agents', 1);`,
    author: 'Shahmir Khan',
    date: '2025-01-17',
    readTime: '6 min read',
    category: 'WordPress Security',
    tags: ['Security', 'Bots', 'User Agents', 'Performance', 'Protection'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Block Malicious User Agents in WordPress: Security Code Guide',
      metaDescription: 'Protect WordPress from bad bots and scrapers by blocking malicious user agents. Includes logging and rate limiting examples.',
      keywords: ['block bots wordpress', 'user agent blocking', 'wordpress security', 'block scrapers', 'bot protection'],
      canonical: '/blog/block-bad-user-agents',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Block Malicious User Agents",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Will blocking user agents affect SEO?",
        answer: "Only if you accidentally block legitimate search engine bots. Always whitelist Googlebot, Bingbot, and other major search engines. Blocking aggressive crawlers like AhrefsBot won't hurt SEO."
      },
      {
        question: "Can bots bypass user agent blocking?",
        answer: "Yes, sophisticated bots can spoof user agents. This method blocks unsophisticated scrapers and reduces server load from known aggressive crawlers. Combine with IP blocking and rate limiting for better protection."
      },
      {
        question: "Should I block or rate-limit bots?",
        answer: "Rate limiting is often better for semi-legitimate bots that respect limits. Complete blocking is appropriate for known malicious bots or scrapers that provide no value to your site."
      },
      {
        question: "Is .htaccess or PHP blocking more efficient?",
        answer: "Server-level blocking via .htaccess is more efficient as it blocks requests before PHP loads. However, PHP-based blocking offers more flexibility and is easier to update without server access."
      },
      {
        question: "How do I know which user agents to block?",
        answer: "Check your server logs for user agents causing high traffic, analyze patterns of suspicious behavior, and consult lists of known malicious bots. Start conservative and monitor the impact before expanding your blocklist."
      }
    ]
  },
  {
    id: 11,
    slug: 'disable-embeds-wordpress',
    title: 'Disable oEmbeds for Better Performance',
    excerpt: 'Remove WordPress oEmbed functionality to reduce HTTP requests, eliminate unnecessary scripts, and improve site performance.',
    content: `
      <h2>What are WordPress oEmbeds?</h2>
      <p>WordPress oEmbed allows you to embed content from external sources (YouTube, Twitter, etc.) by simply pasting URLs. While convenient, it adds extra HTTP requests and JavaScript that can slow down your site.</p>

      <h3>Complete oEmbed Removal</h3>
      <pre><code class="language-php">// Disable WordPress oEmbed functionality
function disable_embeds_code_init() {
    // Remove the REST API endpoint
    remove_action('rest_api_init', 'wp_oembed_register_route');

    // Turn off oEmbed auto discovery
    add_filter('embed_oembed_discover', '__return_false');

    // Don't filter oEmbed results
    remove_filter('oembed_dataparse', 'wp_filter_oembed_result', 10);

    // Remove oEmbed discovery links
    remove_action('wp_head', 'wp_oembed_add_discovery_links');

    // Remove oEmbed-specific JavaScript from the front-end and back-end
    remove_action('wp_head', 'wp_oembed_add_host_js');

    // Remove all embeds rewrite rules
    add_filter('rewrite_rules_array', 'disable_embeds_rewrites');
}
add_action('init', 'disable_embeds_code_init', 9999);

function disable_embeds_rewrites($rules) {
    foreach ($rules as $rule => $rewrite) {
        if (strpos($rewrite, 'embed=true') !== false) {
            unset($rules[$rule]);
        }
    }
    return $rules;
}</code></pre>

      <h3>Remove oEmbed Scripts</h3>
      <pre><code class="language-php">// Dequeue oEmbed scripts
function remove_oembed_scripts() {
    // Remove wp-embed.min.js
    wp_deregister_script('wp-embed');
}
add_action('wp_footer', 'remove_oembed_scripts');</code></pre>

      <h3>Disable for TinyMCE Editor</h3>
      <pre><code class="language-php">// Disable oEmbed in TinyMCE editor
function disable_embeds_tiny_mce_plugin($plugins) {
    return array_diff($plugins, array('wpembed'));
}
add_filter('tiny_mce_plugins', 'disable_embeds_tiny_mce_plugin');</code></pre>

      <h3>Remove oEmbed Meta Tags</h3>
      <pre><code class="language-php">// Remove oEmbed-related meta tags from head
function remove_oembed_meta_tags() {
    // Remove oEmbed discovery links
    remove_action('wp_head', 'wp_oembed_add_discovery_links');

    // Remove oEmbed REST API route
    remove_action('rest_api_init', 'wp_oembed_register_route');

    // Remove oEmbed content filter
    remove_filter('the_content', array($GLOBALS['wp_embed'], 'autoembed'), 8);
}
add_action('init', 'remove_oembed_meta_tags');</code></pre>

      <h3>Selective Embed Disabling</h3>
      <pre><code class="language-php">// Keep embeds but remove external discovery
function selective_embed_control() {
    // Disable embed discovery for other sites
    remove_action('wp_head', 'wp_oembed_add_discovery_links');

    // But keep internal embed functionality
    // This allows you to embed your own posts

    // Remove embed scripts only on frontend
    if (!is_admin()) {
        wp_deregister_script('wp-embed');
    }
}
add_action('init', 'selective_embed_control');</code></pre>

      <h3>Alternative: Use Plugin Filter</h3>
      <pre><code class="language-php">// Disable specific embed providers
function disable_specific_embeds($providers) {
    // Keep YouTube and Vimeo, remove others
    $keep = array(
        '#https?://((m|www)\.)?youtube\.com/watch.*#i',
        '#https?://youtu\.be/.*#i',
        '#https?://(www\.)?vimeo\.com/.*#i'
    );

    $filtered = array();
    foreach ($providers as $pattern => $data) {
        if (in_array($pattern, $keep)) {
            $filtered[$pattern] = $data;
        }
    }

    return $filtered;
}
add_filter('oembed_providers', 'disable_specific_embeds');</code></pre>

      <h3>Performance Impact</h3>
      <ul>
        <li>Reduces HTTP requests by eliminating external oEmbed calls</li>
        <li>Removes wp-embed.min.js (reduces page weight by ~2KB)</li>
        <li>Eliminates REST API oEmbed endpoints</li>
        <li>Removes oEmbed meta tags from HTML head</li>
        <li>Prevents external sites from embedding your content</li>
      </ul>

      <h3>When to Keep oEmbeds</h3>
      <ul>
        <li>You frequently embed external content (videos, tweets, etc.)</li>
        <li>Content creators rely on simple URL pasting</li>
        <li>You want your content embeddable on other sites</li>
        <li>Using page builders that leverage oEmbed functionality</li>
      </ul>

      <h3>Manual Embed Alternative</h3>
      <p>After disabling oEmbeds, you can still embed content using:</p>
      <ul>
        <li>Native WordPress embed blocks (Gutenberg)</li>
        <li>HTML iframe code directly</li>
        <li>Shortcodes from specific plugins</li>
        <li>Custom embed functions for specific services</li>
      </ul>
    `,
    code: `add_action('init', 'disable_embeds_code_init', 9999);`,
    author: 'Shahmir Khan',
    date: '2025-01-17',
    readTime: '5 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Optimization', 'Embeds', 'oEmbed', 'Speed'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.4+',
    seo: {
      metaTitle: 'Disable WordPress oEmbeds: Performance Optimization Guide 2025',
      metaDescription: 'Remove WordPress oEmbed functionality to improve site speed. Complete code snippets to disable embeds and boost performance.',
      keywords: ['disable oembed wordpress', 'wordpress performance', 'remove embeds', 'wordpress optimization', 'wp-embed'],
      canonical: '/blog/disable-embeds-wordpress',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Disable oEmbeds for Better Performance",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will disabling oEmbeds break my existing embedded content?",
        answer: "Existing embeds already rendered in posts will still work, but new embeds won't be automatically created by pasting URLs. You'll need to use manual embed codes or the embed block in Gutenberg."
      },
      {
        question: "How much performance improvement can I expect?",
        answer: "You'll save 1-3KB of JavaScript (wp-embed.min.js), eliminate oEmbed-related HTTP requests, and reduce HTML head clutter. The impact is modest but contributes to overall performance, especially on mobile."
      },
      {
        question: "Can I disable oEmbeds for external sites but keep internal embeds?",
        answer: "Yes, you can selectively remove external embed discovery while keeping the ability to embed your own posts. Use the selective_embed_control() function shown in the examples."
      },
      {
        question: "Will this affect YouTube or video embeds?",
        answer: "Auto-embeds won't work (pasting a YouTube URL won't automatically embed). However, you can still manually embed using the YouTube block in Gutenberg or by pasting the iframe code directly."
      },
      {
        question: "Should I disable oEmbeds on all WordPress sites?",
        answer: "Not necessarily. If you or your content creators frequently embed external content and value the convenience of URL-pasting, keep oEmbeds enabled. Disable them on sites where performance is critical and embeds are rarely used."
      }
    ]
  },
  {
    id: 12,
    slug: 'limit-post-revisions',
    title: 'Limit Post Revisions to Save Database Space',
    excerpt: 'Control WordPress post revisions to reduce database bloat and improve performance by limiting the number of revisions stored.',
    content: `
      <h2>Understanding WordPress Revisions</h2>
      <p>WordPress automatically saves a revision every time you update a post or page. While useful for recovery, unlimited revisions can bloat your database significantly over time.</p>

      <h3>Limit Revisions to a Specific Number</h3>
      <pre><code class="language-php">// Add to wp-config.php
// Limit to 5 revisions per post
define('WP_POST_REVISIONS', 5);</code></pre>

      <h3>Disable Revisions Completely</h3>
      <pre><code class="language-php">// Add to wp-config.php
// Disable all post revisions
define('WP_POST_REVISIONS', false);</code></pre>

      <h3>Set Different Limits for Different Post Types</h3>
      <pre><code class="language-php">// Limit revisions based on post type
function limit_revisions_by_post_type($num, $post) {
    // Limit pages to 3 revisions
    if ($post->post_type === 'page') {
        return 3;
    }

    // Limit posts to 5 revisions
    if ($post->post_type === 'post') {
        return 5;
    }

    // No limit for custom post types
    return $num;
}
add_filter('wp_revisions_to_keep', 'limit_revisions_by_post_type', 10, 2);</code></pre>

      <h3>Auto-Delete Old Revisions</h3>
      <pre><code class="language-php">// Automatically delete revisions older than 30 days
function delete_old_revisions() {
    global $wpdb;

    $days = 30;
    $sql = $wpdb->prepare(
        "DELETE FROM $wpdb->posts
         WHERE post_type = 'revision'
         AND post_modified < DATE_SUB(NOW(), INTERVAL %d DAY)",
        $days
    );

    $wpdb->query($sql);
}

// Run weekly
if (!wp_next_scheduled('delete_old_revisions_hook')) {
    wp_schedule_event(time(), 'weekly', 'delete_old_revisions_hook');
}
add_action('delete_old_revisions_hook', 'delete_old_revisions');</code></pre>

      <h3>Keep Only Latest N Revisions</h3>
      <pre><code class="language-php">// Keep only the 3 most recent revisions per post
function keep_latest_revisions($post_id) {
    $revisions = wp_get_post_revisions($post_id, array(
        'order' => 'DESC'
    ));

    if (count($revisions) > 3) {
        $revisions_to_delete = array_slice($revisions, 3);

        foreach ($revisions_to_delete as $revision) {
            wp_delete_post_revision($revision->ID);
        }
    }
}
add_action('post_updated', 'keep_latest_revisions', 10, 1);</code></pre>

      <h3>Manually Clean Up All Revisions</h3>
      <pre><code class="language-php">// One-time cleanup function
function cleanup_all_revisions() {
    global $wpdb;

    // Delete ALL revisions (use with caution!)
    $wpdb->query("DELETE FROM $wpdb->posts WHERE post_type = 'revision'");

    // Clean up orphaned post meta
    $wpdb->query("DELETE pm FROM $wpdb->postmeta pm
                  LEFT JOIN $wpdb->posts wp ON wp.ID = pm.post_id
                  WHERE wp.ID IS NULL");

    return 'Revisions cleaned up successfully!';
}

// Run once via custom admin page or WP-CLI</code></pre>

      <h3>Show Revision Count in Admin</h3>
      <pre><code class="language-php">// Display revision count in post list
function add_revision_column($columns) {
    $columns['revisions'] = 'Revisions';
    return $columns;
}
add_filter('manage_posts_columns', 'add_revision_column');

function show_revision_count($column_name, $post_id) {
    if ($column_name === 'revisions') {
        $revisions = wp_get_post_revisions($post_id);
        echo count($revisions);
    }
}
add_action('manage_posts_custom_column', 'show_revision_count', 10, 2);</code></pre>

      <h3>Adjust Autosave Interval</h3>
      <pre><code class="language-php">// Add to wp-config.php
// Change autosave from 60 seconds to 300 seconds (5 minutes)
define('AUTOSAVE_INTERVAL', 300);</code></pre>

      <h3>Database Impact</h3>
      <ul>
        <li><strong>Default behavior:</strong> Unlimited revisions</li>
        <li><strong>Average revision size:</strong> 5-50KB depending on content</li>
        <li><strong>100 posts × 20 revisions:</strong> ~10-100MB of database space</li>
        <li><strong>Recommended limit:</strong> 3-5 revisions per post</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Set WP_POST_REVISIONS between 3-10 based on your needs</li>
        <li>Don't disable revisions completely (keep at least 2-3)</li>
        <li>Run periodic cleanup to remove old revisions</li>
        <li>Increase autosave interval to reduce revision frequency</li>
        <li>Monitor database size after implementing limits</li>
      </ul>

      <h3>When to Keep More Revisions</h3>
      <ul>
        <li>Critical content that requires detailed version history</li>
        <li>Multiple editors working on the same content</li>
        <li>Legal/compliance requirements for change tracking</li>
        <li>Content that undergoes frequent complex updates</li>
      </ul>
    `,
    code: `define('WP_POST_REVISIONS', 5);`,
    author: 'Shahmir Khan',
    date: '2025-01-17',
    readTime: '6 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Database', 'Revisions', 'Optimization', 'Storage'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.6+',
    seo: {
      metaTitle: 'Limit WordPress Post Revisions: Database Optimization Guide 2025',
      metaDescription: 'Reduce database bloat by limiting WordPress post revisions. Complete guide with code snippets to control and clean up revisions.',
      keywords: ['wordpress revisions', 'limit post revisions', 'wordpress database optimization', 'wp_post_revisions', 'clean up revisions'],
      canonical: '/blog/limit-post-revisions',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Limit Post Revisions to Save Database Space",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "How many revisions should I keep?",
        answer: "3-5 revisions is ideal for most sites. This provides sufficient history for recovery while preventing excessive database growth. Critical sites with compliance requirements may need more."
      },
      {
        question: "Should I disable revisions completely?",
        answer: "Generally no. Keep at least 2-3 revisions for recovery purposes. Complete removal eliminates your safety net if content is accidentally deleted or corrupted."
      },
      {
        question: "Will limiting revisions affect existing revisions?",
        answer: "No, setting WP_POST_REVISIONS only affects new revisions going forward. Existing revisions remain until you manually delete them or implement an auto-cleanup function."
      },
      {
        question: "How do I clean up existing revisions safely?",
        answer: "Use plugins like WP-Optimize or WP-Sweep to bulk delete revisions. Always backup your database first. You can also use the provided SQL queries to delete revisions older than a certain date."
      },
      {
        question: "Does limiting revisions improve site performance?",
        answer: "Yes, indirectly. A smaller database loads faster during queries and backups complete quicker. However, the performance impact is more noticeable on sites with thousands of posts and years of accumulated revisions."
      }
    ]
  },
  {
    id: 13,
    slug: 'disable-emojis',
    title: 'Disable WordPress Emoji Scripts',
    excerpt: 'Remove WordPress emoji detection scripts and inline styles to improve page load speed and reduce HTTP requests.',
    content: `
      <h2>Why Disable WordPress Emojis?</h2>
      <p>Since WordPress 4.2, emoji support is built-in. However, it loads additional JavaScript (wp-emoji-release.min.js) and inline CSS on every page, even if you don't use emojis. Modern browsers support emojis natively, making these scripts unnecessary.</p>

      <h3>Complete Emoji Removal</h3>
      <pre><code class="language-php">// Remove all emoji-related scripts and styles
function disable_emojis() {
    // Remove emoji detection script
    remove_action('wp_head', 'print_emoji_detection_script', 7);
    remove_action('admin_print_scripts', 'print_emoji_detection_script');

    // Remove emoji styles
    remove_action('wp_print_styles', 'print_emoji_styles');
    remove_action('admin_print_styles', 'print_emoji_styles');

    // Remove emoji from RSS feed
    remove_filter('the_content_feed', 'wp_staticize_emoji');
    remove_filter('comment_text_rss', 'wp_staticize_emoji');

    // Remove emoji from emails
    remove_filter('wp_mail', 'wp_staticize_emoji_for_email');

    // Disable emoji in TinyMCE editor
    add_filter('tiny_mce_plugins', 'disable_emojicons_tinymce');

    // Remove emoji DNS prefetch
    add_filter('emoji_svg_url', '__return_false');
}
add_action('init', 'disable_emojis');

function disable_emojicons_tinymce($plugins) {
    if (is_array($plugins)) {
        return array_diff($plugins, array('wpemoji'));
    }
    return array();
}</code></pre>

      <h3>Remove Emoji DNS Prefetch</h3>
      <pre><code class="language-php">// Remove DNS prefetch for emoji CDN
function remove_dns_prefetch($hints, $relation_type) {
    if ('dns-prefetch' === $relation_type) {
        return array_diff($hints, array(
            '//s.w.org'  // WordPress emoji CDN
        ));
    }

    return $hints;
}
add_filter('wp_resource_hints', 'remove_dns_prefetch', 10, 2);</code></pre>

      <h3>Frontend Only Removal</h3>
      <pre><code class="language-php">// Disable emojis on frontend only (keep in admin)
function disable_emojis_frontend() {
    if (!is_admin()) {
        remove_action('wp_head', 'print_emoji_detection_script', 7);
        remove_action('wp_print_styles', 'print_emoji_styles');
        remove_filter('the_content_feed', 'wp_staticize_emoji');
        remove_filter('comment_text_rss', 'wp_staticize_emoji');
        remove_filter('wp_mail', 'wp_staticize_emoji_for_email');
    }
}
add_action('init', 'disable_emojis_frontend');</code></pre>

      <h3>Lightweight Alternative: CDN Redirect</h3>
      <pre><code class="language-php">// Redirect emoji to your own CDN or remove entirely
function custom_emoji_url($url) {
    // Option 1: Return false to disable
    return false;

    // Option 2: Use your own CDN
    // return 'https://your-cdn.com/emoji/';
}
add_filter('emoji_url', 'custom_emoji_url');</code></pre>

      <h3>Check if Emojis are Disabled</h3>
      <pre><code class="language-php">// Verify emoji scripts are removed
function check_emoji_status() {
    $emoji_enabled = has_action('wp_head', 'print_emoji_detection_script');

    if ($emoji_enabled !== false) {
        echo '<!-- Emoji scripts are ENABLED -->';
    } else {
        echo '<!-- Emoji scripts are DISABLED -->';
    }
}
add_action('wp_head', 'check_emoji_status', 999);</code></pre>

      <h3>Performance Impact</h3>
      <ul>
        <li><strong>File size:</strong> Removes ~11KB of JavaScript (wp-emoji-release.min.js)</li>
        <li><strong>HTTP requests:</strong> Reduces by 1-2 requests per page</li>
        <li><strong>DNS prefetch:</strong> Removes s.w.org DNS lookup</li>
        <li><strong>Inline CSS:</strong> Eliminates emoji-related inline styles</li>
        <li><strong>Cumulative impact:</strong> Faster page loads, especially on mobile</li>
      </ul>

      <h3>Will Emojis Still Work?</h3>
      <p>Yes! Modern browsers (Chrome, Firefox, Safari, Edge) support emojis natively. Disabling WordPress's emoji scripts only removes the polyfill for older browsers. Users will still see emojis correctly.</p>

      <h3>Browser Support</h3>
      <ul>
        <li><strong>Native emoji support:</strong> All modern browsers (98%+ of users)</li>
        <li><strong>No support:</strong> IE 10 and older (negligible usage)</li>
        <li><strong>Fallback:</strong> Older browsers show emoji characters or boxes</li>
      </ul>

      <h3>When to Keep Emoji Scripts</h3>
      <ul>
        <li>Supporting very old browsers (IE 10 or earlier)</li>
        <li>Specific client requirement for emoji consistency</li>
        <li>Custom emoji implementation that relies on wp-emoji</li>
      </ul>

      <h3>Testing After Removal</h3>
      <p>After disabling, test your site to ensure:</p>
      <ul>
        <li>Existing emoji in content display correctly</li>
        <li>Admin editor still allows emoji input</li>
        <li>No console errors appear</li>
        <li>Page load speed improves (use GTmetrix or PageSpeed Insights)</li>
      </ul>
    `,
    code: `add_action('init', 'disable_emojis');`,
    author: 'Shahmir Khan',
    date: '2025-01-16',
    readTime: '5 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Emojis', 'Optimization', 'Page Speed', 'Scripts'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.2+',
    seo: {
      metaTitle: 'Disable WordPress Emoji Scripts: Performance Optimization 2025',
      metaDescription: 'Remove WordPress emoji detection scripts to improve page speed. Complete code guide to safely disable emojis without affecting functionality.',
      keywords: ['disable wordpress emojis', 'remove emoji script', 'wordpress performance', 'wp emoji optimization', 'disable emoji js'],
      canonical: '/blog/disable-emojis',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Disable WordPress Emoji Scripts",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will disabling emoji scripts break existing emojis on my site?",
        answer: "No. Modern browsers support emojis natively. Disabling WordPress's emoji scripts only removes the polyfill for old browsers. Your existing emojis will display correctly in all modern browsers (Chrome, Firefox, Safari, Edge)."
      },
      {
        question: "How much performance improvement will I see?",
        answer: "You'll save ~11KB of JavaScript (wp-emoji-release.min.js) and reduce HTTP requests by 1-2 per page. The impact is modest but cumulative—combine with other optimizations for significant performance gains, especially on mobile connections."
      },
      {
        question: "Can I still use emojis in my content after disabling?",
        answer: "Absolutely! You can still type, paste, and display emojis in your content. The difference is WordPress won't load extra scripts to convert emoji unicode to images—modern browsers render them natively."
      },
      {
        question: "Should I disable emojis in the admin area too?",
        answer: "It's optional. Some developers prefer keeping emoji scripts in admin for a consistent editing experience. Use the frontend-only removal function if you want emojis available while editing but removed from public pages."
      },
      {
        question: "Will this affect older browsers?",
        answer: "Yes, but negligibly. Only very old browsers (IE 10 and earlier, representing <0.5% of traffic) might show emoji as plain characters or boxes. For 99%+ of your visitors with modern browsers, there's no negative impact."
      }
    ]
  },
  {
    id: 14,
    slug: 'defer-javascript-loading',
    title: 'Defer JavaScript Loading',
    excerpt: 'Improve page load performance by deferring non-critical JavaScript files, allowing HTML to load first and speeding up page rendering.',
    content: `
      <h2>Understanding Defer vs Async</h2>
      <p>Deferring JavaScript tells the browser to download scripts in parallel but execute them only after HTML parsing is complete. This prevents render-blocking and improves perceived page speed.</p>

      <h3>Defer All JavaScripts</h3>
      <pre><code class="language-php">// Add defer attribute to all scripts
function defer_all_scripts($tag, $handle) {
    // Don't defer jQuery (many scripts depend on it)
    if ('jquery' === $handle) {
        return $tag;
    }

    // Don't defer scripts in admin
    if (is_admin()) {
        return $tag;
    }

    // Add defer attribute
    return str_replace(' src', ' defer src', $tag);
}
add_filter('script_loader_tag', 'defer_all_scripts', 10, 2);</code></pre>

      <h3>Selective Defer with Exclusions</h3>
      <pre><code class="language-php">// Defer scripts except critical ones
function selective_defer_scripts($tag, $handle) {
    // Scripts that should NOT be deferred
    $exclude = array(
        'jquery',
        'jquery-core',
        'jquery-migrate',
        'custom-critical-script'
    );

    // Skip if in admin or script is excluded
    if (is_admin() || in_array($handle, $exclude)) {
        return $tag;
    }

    // Add defer attribute
    return str_replace(' src', ' defer src', $tag);
}
add_filter('script_loader_tag', 'selective_defer_scripts', 10, 2);</code></pre>

      <h3>Use Async for Independent Scripts</h3>
      <pre><code class="language-php">// Add async to specific independent scripts
function async_scripts($tag, $handle) {
    // Scripts that can load asynchronously
    $async_scripts = array(
        'google-analytics',
        'facebook-pixel',
        'twitter-widgets',
        'gtm'
    );

    if (in_array($handle, $async_scripts)) {
        return str_replace(' src', ' async src', $tag);
    }

    return $tag;
}
add_filter('script_loader_tag', 'async_scripts', 10, 2);</code></pre>

      <h3>Defer + Async Combined Strategy</h3>
      <pre><code class="language-php">// Comprehensive script loading strategy
function optimize_script_loading($tag, $handle) {
    if (is_admin()) {
        return $tag;
    }

    // Scripts that should use async
    $async_scripts = array(
        'google-analytics',
        'gtag',
        'facebook-sdk'
    );

    // Scripts that should NOT be deferred at all
    $no_defer = array(
        'jquery',
        'jquery-core',
        'modernizr'
    );

    // Skip if in no-defer list
    if (in_array($handle, $no_defer)) {
        return $tag;
    }

    // Add async for independent scripts
    if (in_array($handle, $async_scripts)) {
        return str_replace(' src', ' async src', $tag);
    }

    // Defer everything else
    return str_replace(' src', ' defer src', $tag);
}
add_filter('script_loader_tag', 'optimize_script_loading', 10, 2);</code></pre>

      <h3>Defer Only Footer Scripts</h3>
      <pre><code class="language-php">// Defer scripts only in footer
function defer_footer_scripts($tag, $handle) {
    // Check if script is in footer
    global $wp_scripts;

    if (isset($wp_scripts->registered[$handle]->extra['group']) &&
        $wp_scripts->registered[$handle]->extra['group'] === 1) {

        // This script is in footer, defer it
        return str_replace(' src', ' defer src', $tag);
    }

    return $tag;
}
add_filter('script_loader_tag', 'defer_footer_scripts', 10, 2);</code></pre>

      <h3>Advanced: Inline Critical Scripts</h3>
      <pre><code class="language-php">// Inline critical scripts and defer others
function inline_critical_defer_rest($tag, $handle) {
    $critical_scripts = array('theme-critical');

    if (in_array($handle, $critical_scripts)) {
        // Get script file path
        $script_path = get_template_directory() . '/js/' . $handle . '.js';

        if (file_exists($script_path)) {
            $script_content = file_get_contents($script_path);
            return "<script>{$script_content}</script>";
        }
    }

    // Defer all non-critical scripts
    if (!is_admin() && $handle !== 'jquery') {
        return str_replace(' src', ' defer src', $tag);
    }

    return $tag;
}
add_filter('script_loader_tag', 'inline_critical_defer_rest', 10, 2);</code></pre>

      <h3>When to Use Defer vs Async</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Method</th>
          <th style="border: 1px solid #ddd; padding: 8px;">When to Use</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Example Scripts</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;"><strong>Defer</strong></td>
          <td style="border: 1px solid #ddd; padding: 8px;">Scripts that depend on DOM or other scripts</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Theme scripts, UI libraries, plugins</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;"><strong>Async</strong></td>
          <td style="border: 1px solid #ddd; padding: 8px;">Independent scripts that don't depend on anything</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Analytics, ads, social widgets</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;"><strong>Neither</strong></td>
          <td style="border: 1px solid #ddd; padding: 8px;">Critical scripts required immediately</td>
          <td style="border: 1px solid #ddd; padding: 8px;">jQuery, Modernizr, polyfills</td>
        </tr>
      </table>

      <h3>Common Pitfalls</h3>
      <ul>
        <li><strong>Don't defer jQuery:</strong> Many scripts depend on it being loaded first</li>
        <li><strong>Test thoroughly:</strong> Some scripts may break if execution order changes</li>
        <li><strong>Watch for dependencies:</strong> Script A might need Script B to load first</li>
        <li><strong>Check third-party plugins:</strong> They may not work well with defer</li>
      </ul>

      <h3>Performance Impact</h3>
      <ul>
        <li>Improves First Contentful Paint (FCP) by 0.5-2 seconds</li>
        <li>Eliminates render-blocking JavaScript warnings</li>
        <li>Better PageSpeed Insights scores (85+ achievable)</li>
        <li>Faster perceived load time for users</li>
      </ul>

      <h3>Testing Your Implementation</h3>
      <p>After implementing, verify:</p>
      <ul>
        <li>All interactive elements work correctly</li>
        <li>No JavaScript console errors appear</li>
        <li>Forms, sliders, and menus function properly</li>
        <li>Third-party integrations still work (analytics, chat, etc.)</li>
        <li>Test on multiple browsers and devices</li>
      </ul>
    `,
    code: `add_filter('script_loader_tag', 'defer_all_scripts', 10, 2);`,
    author: 'Shahmir Khan',
    date: '2025-01-16',
    readTime: '7 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'JavaScript', 'Page Speed', 'Defer', 'Async'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.3+',
    seo: {
      metaTitle: 'Defer JavaScript Loading in WordPress: Complete Performance Guide',
      metaDescription: 'Speed up WordPress by deferring JavaScript. Learn when to use defer vs async with code examples and best practices.',
      keywords: ['defer javascript wordpress', 'async scripts wordpress', 'wordpress page speed', 'render blocking javascript', 'optimize javascript loading'],
      canonical: '/blog/defer-javascript-loading',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Defer JavaScript Loading",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between defer and async?",
        answer: "Defer downloads scripts in parallel but executes them in order after HTML parsing. Async downloads and executes immediately, potentially out of order. Use defer for scripts with dependencies, async for completely independent scripts like analytics."
      },
      {
        question: "Should I defer jQuery?",
        answer: "Generally no. Many WordPress themes and plugins depend on jQuery being loaded and available immediately. Deferring jQuery often breaks functionality. Keep jQuery loading normally unless you're certain nothing depends on it."
      },
      {
        question: "Will deferring scripts break my website?",
        answer: "It can if not done carefully. Scripts that depend on other scripts need to maintain their execution order. Test thoroughly after implementation, especially forms, sliders, and interactive elements."
      },
      {
        question: "How much will this improve my PageSpeed score?",
        answer: "Typically 5-15 points on Google PageSpeed Insights, sometimes more. You'll eliminate 'render-blocking JavaScript' warnings and improve FCP (First Contentful Paint) by 0.5-2 seconds depending on how many scripts you're deferring."
      },
      {
        question: "Can I defer scripts on specific pages only?",
        answer: "Yes! Add conditional checks in your defer function using is_front_page(), is_single(), is_page(), etc. This lets you defer aggressively on simple pages while being conservative on interactive pages."
      }
    ]
  },
  {
    id: 15,
    slug: 'lazy-load-images',
    title: 'Add Native Lazy Loading to Images',
    excerpt: 'Implement native browser lazy loading for images and iframes to improve page load performance without JavaScript libraries.',
    content: `
      <h2>Native Lazy Loading</h2>
      <p>Modern browsers support native lazy loading via the loading="lazy" attribute. This defers offscreen images until users scroll near them, significantly improving initial page load time.</p>

      <h3>Add Lazy Loading to All Images</h3>
      <pre><code class="language-php">// Add loading="lazy" to all content images
function add_lazy_loading_to_images($content) {
    // Skip if in admin or feed
    if (is_admin() || is_feed()) {
        return $content;
    }

    // Add loading="lazy" to img tags
    $content = preg_replace('/<img((?![^>]*loading=)[^>]*)>/i', '<img$1 loading="lazy">', $content);

    return $content;
}
add_filter('the_content', 'add_lazy_loading_to_images');
add_filter('post_thumbnail_html', 'add_lazy_loading_to_images');
add_filter('get_avatar', 'add_lazy_loading_to_images');</code></pre>

      <h3>Lazy Load + Width/Height Attributes</h3>
      <pre><code class="language-php">// Add lazy loading with dimensions to prevent layout shift
function lazy_load_with_dimensions($content) {
    if (is_admin() || is_feed()) {
        return $content;
    }

    // Match all img tags
    preg_match_all('/<img[^>]+>/i', $content, $matches);

    foreach ($matches[0] as $img_tag) {
        // Skip if already has loading attribute
        if (strpos($img_tag, 'loading=') !== false) {
            continue;
        }

        // Add loading="lazy"
        $new_img_tag = str_replace('<img', '<img loading="lazy"', $img_tag);

        // Replace in content
        $content = str_replace($img_tag, $new_img_tag, $content);
    }

    return $content;
}
add_filter('the_content', 'lazy_load_with_dimensions');</code></pre>

      <h3>Exclude Above-the-Fold Images</h3>
      <pre><code class="language-php">// Skip lazy loading for first N images (above fold)
function smart_lazy_loading($content) {
    if (is_admin() || is_feed()) {
        return $content;
    }

    // Skip lazy loading for the first 2 images (likely above fold)
    static $image_count = 0;
    $skip_first = 2;

    preg_match_all('/<img[^>]+>/i', $content, $matches);

    foreach ($matches[0] as $img_tag) {
        $image_count++;

        // Skip lazy loading for first images
        if ($image_count <= $skip_first) {
            continue;
        }

        // Add loading="lazy" to remaining images
        if (strpos($img_tag, 'loading=') === false) {
            $new_img_tag = str_replace('<img', '<img loading="lazy"', $img_tag);
            $content = str_replace($img_tag, $new_img_tag, $content);
        }
    }

    return $content;
}
add_filter('the_content', 'smart_lazy_loading');</code></pre>

      <h3>Lazy Load iframes (YouTube, Maps, etc.)</h3>
      <pre><code class="language-php">// Add lazy loading to iframes
function lazy_load_iframes($content) {
    if (is_admin() || is_feed()) {
        return $content;
    }

    // Add loading="lazy" to iframe tags
    $content = preg_replace(
        '/<iframe((?![^>]*loading=)[^>]*)>/i',
        '<iframe$1 loading="lazy">',
        $content
    );

    return $content;
}
add_filter('the_content', 'lazy_load_iframes');
add_filter('embed_oembed_html', 'lazy_load_iframes');</code></pre>

      <h3>Comprehensive Lazy Loading Solution</h3>
      <pre><code class="language-php">// Complete lazy loading implementation
function comprehensive_lazy_loading() {
    // Don't lazy load in admin or feeds
    if (is_admin() || is_feed() || is_preview()) {
        return;
    }

    // Lazy load content images
    add_filter('the_content', function($content) {
        // Skip first 2 images (above fold)
        static $processed = false;
        if (!$processed) {
            $processed = true;
            $skip = 2;
            $count = 0;

            $content = preg_replace_callback(
                '/<img([^>]*)>/i',
                function($match) use (&$count, $skip) {
                    $count++;
                    if ($count <= $skip || strpos($match[1], 'loading=') !== false) {
                        return $match[0];
                    }
                    return '<img' . $match[1] . ' loading="lazy">';
                },
                $content
            );
        }
        return $content;
    });

    // Lazy load featured images
    add_filter('post_thumbnail_html', function($html) {
        if (strpos($html, 'loading=') === false) {
            $html = str_replace('<img', '<img loading="lazy"', $html);
        }
        return $html;
    });

    // Lazy load avatars
    add_filter('get_avatar', function($avatar) {
        if (strpos($avatar, 'loading=') === false) {
            $avatar = str_replace('<img', '<img loading="lazy"', $avatar);
        }
        return $avatar;
    });

    // Lazy load iframes
    add_filter('the_content', function($content) {
        return preg_replace(
            '/<iframe((?![^>]*loading=)[^>]*)>/i',
            '<iframe$1 loading="lazy">',
            $content
        );
    });
}
add_action('wp', 'comprehensive_lazy_loading');</code></pre>

      <h3>Check Browser Support</h3>
      <pre><code class="language-php">// Add JavaScript fallback for older browsers
function lazy_load_with_fallback() {
    ?>
    <script>
    // Check if browser supports native lazy loading
    if ('loading' in HTMLImageElement.prototype) {
        // Native lazy loading supported
        console.log('Native lazy loading enabled');
    } else {
        // Fallback for older browsers (load polyfill or library)
        console.log('Native lazy loading not supported');
        // Load lazysizes.js or similar library
    }
    </script>
    <?php
}
add_action('wp_footer', 'lazy_load_with_fallback');</code></pre>

      <h3>Browser Support</h3>
      <ul>
        <li><strong>Chrome:</strong> 77+ (September 2019)</li>
        <li><strong>Firefox:</strong> 75+ (April 2020)</li>
        <li><strong>Safari:</strong> 15.4+ (March 2022)</li>
        <li><strong>Edge:</strong> 79+ (January 2020)</li>
        <li><strong>Coverage:</strong> ~95% of global users (2025)</li>
      </ul>

      <h3>Performance Benefits</h3>
      <ul>
        <li>Reduces initial page weight by 50-70%</li>
        <li>Faster First Contentful Paint (FCP)</li>
        <li>Lower data usage for mobile users</li>
        <li>Improved Core Web Vitals scores</li>
        <li>No JavaScript library required</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Don't lazy load above-the-fold images (first 1-2 images)</li>
        <li>Always include width and height attributes to prevent layout shift</li>
        <li>Test on mobile where lazy loading has the biggest impact</li>
        <li>Consider adding a loading placeholder for better UX</li>
        <li>Use loading="eager" for critical images if needed</li>
      </ul>

      <h3>Common Issues</h3>
      <ul>
        <li><strong>Layout shift:</strong> Set width/height on images</li>
        <li><strong>Hero images:</strong> Exclude first image or use loading="eager"</li>
        <li><strong>SEO concerns:</strong> Google fully supports native lazy loading</li>
        <li><strong>Old browsers:</strong> Images still load, just not lazily (~5% of users)</li>
      </ul>
    `,
    code: `add_filter('the_content', 'add_lazy_loading_to_images');`,
    author: 'Shahmir Khan',
    date: '2025-01-16',
    readTime: '6 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Images', 'Lazy Load', 'Core Web Vitals', 'Optimization'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 5.5+',
    seo: {
      metaTitle: 'Native Lazy Loading in WordPress: Complete Implementation Guide',
      metaDescription: 'Add native lazy loading to WordPress images and iframes. Improve page speed with loading="lazy" attribute. No plugins needed.',
      keywords: ['lazy loading wordpress', 'wordpress image optimization', 'loading lazy attribute', 'defer images wordpress', 'wordpress performance'],
      canonical: '/blog/lazy-load-images',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Native Lazy Loading to Images",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Does native lazy loading work in all browsers?",
        answer: "Native lazy loading works in ~95% of browsers (Chrome 77+, Firefox 75+, Safari 15.4+, Edge 79+). Older browsers simply load images normally without lazy loading, so there's no negative impact—it's a progressive enhancement."
      },
      {
        question: "Should I lazy load all images on my WordPress site?",
        answer: "No, exclude above-the-fold images (typically the first 1-2 images). Lazy loading hero images or logos can delay initial content display and hurt user experience. Only lazy load images that appear below the fold."
      },
      {
        question: "Will lazy loading affect my SEO?",
        answer: "No, Google fully supports and recommends native lazy loading. Googlebot can crawl and index lazy-loaded images without issues. In fact, lazy loading can improve SEO by boosting page speed metrics."
      },
      {
        question: "Do I need a plugin for lazy loading?",
        answer: "Not anymore! WordPress 5.5+ includes native lazy loading support. The code snippets provided enhance this with more control (excluding above-fold images, adding to avatars, etc.) without requiring heavy JavaScript libraries."
      },
      {
        question: "How much faster will my site load with lazy loading?",
        answer: "Expect 30-70% reduction in initial page weight for image-heavy pages. Initial load time typically improves by 1-3 seconds. The impact is most noticeable on mobile connections and pages with many images."
      }
    ]
  },
  {
    id: 16,
    slug: 'disable-heartbeat-api',
    title: 'Control WordPress Heartbeat API',
    excerpt: 'Optimize or disable the WordPress Heartbeat API to reduce server load and AJAX requests that can slow down your site.',
    content: `
      <h2>What is WordPress Heartbeat API?</h2>
      <p>The Heartbeat API is a near-real-time communication framework that sends AJAX requests every 15-60 seconds. While useful for autosave and real-time notifications, it can increase server load significantly, especially on high-traffic sites.</p>

      <h3>Completely Disable Heartbeat</h3>
      <pre><code class="language-php">// Disable Heartbeat API completely
function disable_heartbeat() {
    wp_deregister_script('heartbeat');
}
add_action('wp_enqueue_scripts', 'disable_heartbeat', 1);</code></pre>

      <h3>Disable on Frontend, Keep in Admin</h3>
      <pre><code class="language-php">// Disable Heartbeat on frontend only
function disable_heartbeat_frontend() {
    global $pagenow;

    // Disable on frontend
    if (!is_admin()) {
        wp_deregister_script('heartbeat');
    }

    // Optionally keep it only on post edit screen
    if ($pagenow != 'post.php' && $pagenow != 'post-new.php') {
        wp_deregister_script('heartbeat');
    }
}
add_action('init', 'disable_heartbeat_frontend', 1);</code></pre>

      <h3>Reduce Heartbeat Frequency</h3>
      <pre><code class="language-php">// Slow down Heartbeat instead of disabling
function modify_heartbeat_settings($settings) {
    // Slow down to once every 60 seconds (default is 15)
    $settings['interval'] = 60;
    return $settings;
}
add_filter('heartbeat_settings', 'modify_heartbeat_settings');</code></pre>

      <h3>Context-Specific Control</h3>
      <pre><code class="language-php">// Fine-tuned Heartbeat control based on location
function smart_heartbeat_control() {
    global $pagenow;

    // Disable everywhere except post editor
    if ($pagenow != 'post.php' && $pagenow != 'post-new.php') {
        wp_deregister_script('heartbeat');
        return;
    }

    // On post editor, slow it down
    add_filter('heartbeat_settings', function($settings) {
        $settings['interval'] = 60; // Every 60 seconds
        return $settings;
    });
}
add_action('init', 'smart_heartbeat_control', 1);</code></pre>

      <h3>Different Settings for Different Areas</h3>
      <pre><code class="language-php">// Customize Heartbeat by admin page
function customize_heartbeat_by_page($settings) {
    global $pagenow;

    // Post editor: every 60 seconds
    if ($pagenow == 'post.php' || $pagenow == 'post-new.php') {
        $settings['interval'] = 60;
    }

    // Dashboard: every 120 seconds
    elseif ($pagenow == 'index.php') {
        $settings['interval'] = 120;
    }

    // Everywhere else: disable or set very long interval
    else {
        $settings['interval'] = 300; // 5 minutes
    }

    return $settings;
}
add_filter('heartbeat_settings', 'customize_heartbeat_by_page');</code></pre>

      <h3>Monitor Heartbeat Activity</h3>
      <pre><code class="language-php">// Log Heartbeat requests for debugging
function log_heartbeat_data($response, $data, $screen_id) {
    $log_file = WP_CONTENT_DIR . '/heartbeat.log';
    $timestamp = current_time('mysql');
    $log_entry = "[$timestamp] Screen: $screen_id, Data: " .
                 json_encode($data) . "\n";

    error_log($log_entry, 3, $log_file);

    return $response;
}
add_filter('heartbeat_received', 'log_heartbeat_data', 10, 3);</code></pre>

      <h3>Disable for Specific User Roles</h3>
      <pre><code class="language-php">// Disable Heartbeat for subscribers and contributors
function disable_heartbeat_by_role() {
    $user = wp_get_current_user();

    // Roles that don't need Heartbeat
    $disable_for = array('subscriber', 'contributor', 'customer');

    if (array_intersect($disable_for, $user->roles)) {
        wp_deregister_script('heartbeat');
    }
}
add_action('init', 'disable_heartbeat_by_role', 1);</code></pre>

      <h3>Modify Heartbeat Response</h3>
      <pre><code class="language-php">// Control what data Heartbeat sends
function filter_heartbeat_response($response, $data) {
    // Remove unnecessary data from response
    if (isset($response['wp-refresh-post-lock'])) {
        unset($response['wp-refresh-post-lock']);
    }

    // Add custom data if needed
    if (isset($data['custom_check'])) {
        $response['custom_response'] = 'Your custom data here';
    }

    return $response;
}
add_filter('heartbeat_received', 'filter_heartbeat_response', 10, 2);</code></pre>

      <h3>What Uses Heartbeat?</h3>
      <ul>
        <li><strong>Post autosave:</strong> Automatically saves drafts while editing</li>
        <li><strong>Post locking:</strong> Prevents multiple users from editing simultaneously</li>
        <li><strong>Login expiration:</strong> Warns when session is about to expire</li>
        <li><strong>Plugin notifications:</strong> Real-time admin notifications</li>
      </ul>

      <h3>Performance Impact</h3>
      <ul>
        <li><strong>CPU usage:</strong> Each request consumes server resources</li>
        <li><strong>Database queries:</strong> 2-5 queries per heartbeat</li>
        <li><strong>Bandwidth:</strong> Minimal but cumulative over time</li>
        <li><strong>High traffic sites:</strong> Hundreds of concurrent heartbeat requests</li>
      </ul>

      <h3>Recommended Settings</h3>
      <ul>
        <li><strong>Small sites (&lt;1000 visits/day):</strong> Leave default or slow to 30s</li>
        <li><strong>Medium sites (1000-10000 visits/day):</strong> Set to 60s or disable on frontend</li>
        <li><strong>Large sites (&gt;10000 visits/day):</strong> Disable everywhere except post editor</li>
        <li><strong>Shared hosting:</strong> Disable or set to 120s+ to avoid resource limits</li>
      </ul>

      <h3>When to Keep Heartbeat</h3>
      <ul>
        <li>Multiple editors working simultaneously</li>
        <li>Real-time collaborative editing needed</li>
        <li>Plugins that depend on Heartbeat for functionality</li>
        <li>Live admin notifications are critical</li>
      </ul>

      <h3>Testing After Changes</h3>
      <p>After modifying Heartbeat, test:</p>
      <ul>
        <li>Post autosave still works in editor</li>
        <li>Post locking functions properly</li>
        <li>Login sessions don't expire unexpectedly</li>
        <li>Plugin features that use Heartbeat still function</li>
        <li>Check server logs for reduced AJAX requests</li>
      </ul>
    `,
    code: `add_action('init', 'disable_heartbeat_frontend', 1);`,
    author: 'Shahmir Khan',
    date: '2025-01-15',
    readTime: '6 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Heartbeat', 'AJAX', 'Server Load', 'Optimization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.6+',
    seo: {
      metaTitle: 'Control WordPress Heartbeat API: Reduce Server Load Guide 2025',
      metaDescription: 'Optimize or disable WordPress Heartbeat API to reduce AJAX requests and server load. Complete code examples with best practices.',
      keywords: ['wordpress heartbeat api', 'disable heartbeat wordpress', 'reduce server load', 'wordpress ajax', 'heartbeat optimization'],
      canonical: '/blog/disable-heartbeat-api',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Control WordPress Heartbeat API",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Will disabling Heartbeat break my WordPress site?",
        answer: "No, your site will function normally. You'll lose some convenience features like real-time autosave notifications and post locking warnings. Most sites don't need these features on the frontend at all."
      },
      {
        question: "How much server load does Heartbeat cause?",
        answer: "On high-traffic sites, Heartbeat can generate hundreds of AJAX requests per minute. Each request executes 2-5 database queries. This can consume significant CPU and memory resources, especially on shared hosting."
      },
      {
        question: "Should I disable Heartbeat completely or just slow it down?",
        answer: "For most sites, disabling on the frontend and slowing to 60 seconds in admin is optimal. If you have multiple editors or use collaborative plugins, slow it down instead of disabling completely."
      },
      {
        question: "Will this affect post autosave?",
        answer: "WordPress has separate autosave functionality that works independently of Heartbeat. Autosave will continue working even with Heartbeat disabled, though real-time 'saving draft' indicators may not appear."
      },
      {
        question: "Can plugins override Heartbeat settings?",
        answer: "Some plugins can modify or re-enable Heartbeat. If you've disabled it but still see Heartbeat activity, check your plugins. Popular page builders and chat plugins often use Heartbeat for real-time features."
      }
    ]
  },
  {
    id: 17,
    slug: 'remove-query-strings',
    title: 'Remove Query Strings from Static Resources',
    excerpt: 'Eliminate version query strings from CSS and JavaScript files to improve caching and boost PageSpeed Insights scores.',
    content: `
      <h2>Why Remove Query Strings?</h2>
      <p>WordPress adds version query strings (?ver=5.9.3) to CSS and JavaScript files. Some proxy caching servers and CDNs don't cache resources with query strings, potentially reducing cache hit rates.</p>

      <h3>Remove Query Strings from All Static Files</h3>
      <pre><code class="language-php">// Remove query strings from static resources
function remove_query_strings($src) {
    if (strpos($src, 'ver=')) {
        $src = remove_query_arg('ver', $src);
    }
    return $src;
}
add_filter('style_loader_src', 'remove_query_strings', 10, 1);
add_filter('script_loader_src', 'remove_query_strings', 10, 1);</code></pre>

      <h3>Remove Only from Your Own Files</h3>
      <pre><code class="language-php">// Remove query strings only from theme/plugin files
function remove_local_query_strings($src) {
    // Only remove from files hosted on your domain
    $site_url = site_url();

    if (strpos($src, $site_url) !== false && strpos($src, 'ver=') !== false) {
        $src = remove_query_arg('ver', $src);
    }

    return $src;
}
add_filter('style_loader_src', 'remove_local_query_strings', 10, 1);
add_filter('script_loader_src', 'remove_local_query_strings', 10, 1);</code></pre>

      <h3>Keep Query Strings for External Resources</h3>
      <pre><code class="language-php">// Remove query strings but preserve external CDN versions
function smart_remove_query_strings($src) {
    // List of external domains to preserve
    $preserve_domains = array(
        'googleapis.com',
        'cloudflare.com',
        'jsdelivr.net',
        'cdnjs.cloudflare.com'
    );

    // Check if source is external
    foreach ($preserve_domains as $domain) {
        if (strpos($src, $domain) !== false) {
            return $src; // Keep query string for external resources
        }
    }

    // Remove query strings from local files
    if (strpos($src, 'ver=') !== false) {
        $src = remove_query_arg('ver', $src);
    }

    return $src;
}
add_filter('style_loader_src', 'smart_remove_query_strings', 10, 1);
add_filter('script_loader_src', 'smart_remove_query_strings', 10, 1);</code></pre>

      <h3>Alternative: Use File Modification Time</h3>
      <pre><code class="language-php">// Replace query string with file modification time
function replace_version_with_filemtime($src) {
    if (strpos($src, site_url()) === false) {
        return $src; // External file, leave as-is
    }

    // Remove existing query string
    $src_without_query = remove_query_arg('ver', $src);

    // Get file path
    $file_path = str_replace(site_url(), ABSPATH, $src_without_query);

    if (file_exists($file_path)) {
        $mtime = filemtime($file_path);
        return add_query_arg('v', $mtime, $src_without_query);
    }

    return $src_without_query;
}
add_filter('style_loader_src', 'replace_version_with_filemtime', 10, 1);
add_filter('script_loader_src', 'replace_version_with_filemtime', 10, 1);</code></pre>

      <h3>Remove from Images and Media</h3>
      <pre><code class="language-php">// Remove version strings from all URLs including images
function remove_all_version_strings($src) {
    if (strpos($src, 'ver=')) {
        $src = remove_query_arg('ver', $src);
    }
    return $src;
}

// Apply to scripts and styles
add_filter('style_loader_src', 'remove_all_version_strings', 10, 1);
add_filter('script_loader_src', 'remove_all_version_strings', 10, 1);

// Apply to other resources
add_filter('wp_get_attachment_url', 'remove_all_version_strings', 10, 1);</code></pre>

      <h3>.htaccess Method (Alternative)</h3>
      <pre><code class="language-apache"># Remove query strings via .htaccess
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{QUERY_STRING} ^ver= [NC]
    RewriteRule ^(.*)$ /$1? [R=301,L]
</IfModule></code></pre>

      <h3>Handle Cache Busting</h3>
      <pre><code class="language-php">// Use file hash instead of version for cache busting
function hash_based_cache_busting($src) {
    if (strpos($src, site_url()) === false) {
        return $src;
    }

    // Remove ver parameter
    $src_clean = remove_query_arg('ver', $src);

    // Get file path
    $file_path = str_replace(
        array(site_url(), home_url()),
        array(ABSPATH, ABSPATH),
        $src_clean
    );

    if (file_exists($file_path)) {
        // Use file hash as version
        $hash = substr(md5_file($file_path), 0, 8);
        return add_query_arg('v', $hash, $src_clean);
    }

    return $src_clean;
}
add_filter('style_loader_src', 'hash_based_cache_busting', 10, 1);
add_filter('script_loader_src', 'hash_based_cache_busting', 10, 1);</code></pre>

      <h3>PageSpeed Impact</h3>
      <ul>
        <li><strong>Google PageSpeed:</strong> Eliminates "Remove query strings from static resources" warning</li>
        <li><strong>Cache efficiency:</strong> Improved with some proxy servers and CDNs</li>
        <li><strong>Score improvement:</strong> Typically 1-3 points on PageSpeed Insights</li>
        <li><strong>Real-world impact:</strong> Minimal but cumulative</li>
      </ul>

      <h3>Pros and Cons</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Pros</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Cons</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">
            ✓ Better caching with some servers<br>
            ✓ Cleaner URLs<br>
            ✓ PageSpeed warning removed<br>
            ✓ Improved cache hit rates
          </td>
          <td style="border: 1px solid #ddd; padding: 8px;">
            ✗ Harder to bust cache after updates<br>
            ✗ Can't track versions easily<br>
            ✗ May need alternative cache busting<br>
            ✗ Modern CDNs handle query strings fine
          </td>
        </tr>
      </table>

      <h3>Cache Busting Alternatives</h3>
      <p>After removing version query strings, consider these cache-busting methods:</p>
      <ul>
        <li><strong>File renaming:</strong> style.v2.css instead of style.css?ver=2</li>
        <li><strong>Modification time:</strong> Use filemtime() as version number</li>
        <li><strong>File hash:</strong> Use MD5 hash of file contents</li>
        <li><strong>Build process:</strong> Automated versioning during deployment</li>
        <li><strong>CDN purge:</strong> Manually purge CDN cache after updates</li>
      </ul>

      <h3>When to Remove Query Strings</h3>
      <ul>
        <li>Trying to achieve perfect PageSpeed score</li>
        <li>Using older proxy servers that don't cache query strings</li>
        <li>Prefer cleaner URLs for aesthetic reasons</li>
        <li>Have alternative cache-busting strategy in place</li>
      </ul>

      <h3>When to Keep Query Strings</h3>
      <ul>
        <li>Modern CDN that handles query strings properly (Cloudflare, etc.)</li>
        <li>Need automatic cache busting on updates</li>
        <li>Want to track file versions easily</li>
        <li>Development environment where versions help debugging</li>
      </ul>

      <h3>Testing After Implementation</h3>
      <p>After removing query strings, verify:</p>
      <ul>
        <li>CSS and JavaScript still load correctly</li>
        <li>No 404 errors in browser console</li>
        <li>Files are being cached properly</li>
        <li>PageSpeed Insights shows improvement</li>
        <li>Update site and verify cache busting works</li>
      </ul>
    `,
    code: `add_filter('style_loader_src', 'remove_query_strings', 10, 1);`,
    author: 'Shahmir Khan',
    date: '2025-01-15',
    readTime: '6 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Caching', 'Query Strings', 'PageSpeed', 'Optimization'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.0+',
    seo: {
      metaTitle: 'Remove Query Strings from Static Resources: WordPress Guide 2025',
      metaDescription: 'Remove version query strings from CSS and JS files in WordPress. Improve caching and PageSpeed scores with code examples.',
      keywords: ['remove query strings wordpress', 'wordpress cache optimization', 'pagespeed query strings', 'remove ver parameter', 'wordpress performance'],
      canonical: '/blog/remove-query-strings',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Remove Query Strings from Static Resources",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will removing query strings improve my site performance?",
        answer: "The performance impact is minimal but can improve cache hit rates with some older proxy servers and CDNs. Modern CDNs like Cloudflare handle query strings fine. The main benefit is removing a PageSpeed Insights warning."
      },
      {
        question: "How will I bust cache after updating CSS or JavaScript?",
        answer: "Use alternative methods like file modification time (filemtime), file hash (MD5), manual file renaming (style.v2.css), or CDN cache purging. The examples show how to implement filemtime-based versioning."
      },
      {
        question: "Should I remove query strings from external resources too?",
        answer: "No. Keep query strings for external resources (Google Fonts, CDN libraries, etc.) as they use them for version management. Only remove from your own locally-hosted files."
      },
      {
        question: "Does this affect WordPress core updates?",
        answer: "No, this only affects how files are loaded in the browser. WordPress core updates and functionality remain unchanged. After updates, you may need to clear your cache to load new versions."
      },
      {
        question: "Is this still relevant in 2025?",
        answer: "Less critical than before. Modern CDNs and browsers handle query strings efficiently. However, it's still a valid optimization for perfect PageSpeed scores and compatibility with all caching systems."
      }
    ]
  },
  {
    id: 18,
    slug: 'disable-dashicons',
    title: 'Disable Dashicons on Frontend',
    excerpt: 'Remove Dashicons icon font from the frontend for non-logged-in users to reduce page weight and improve load times.',
    content: `
      <h2>What are Dashicons?</h2>
      <p>Dashicons is WordPress's official icon font used primarily in the admin area. By default, WordPress loads dashicons.min.css (~3.7KB) on the frontend even when not needed, adding unnecessary HTTP requests.</p>

      <h3>Disable for Non-Logged-In Users</h3>
      <pre><code class="language-php">// Remove Dashicons for non-logged-in users
function disable_dashicons_frontend() {
    if (!is_user_logged_in()) {
        wp_deregister_style('dashicons');
    }
}
add_action('wp_enqueue_scripts', 'disable_dashicons_frontend');</code></pre>

      <h3>Disable Completely on Frontend</h3>
      <pre><code class="language-php">// Remove Dashicons from frontend entirely
function remove_dashicons() {
    if (!is_admin()) {
        wp_deregister_style('dashicons');
    }
}
add_action('wp_enqueue_scripts', 'remove_dashicons', 100);</code></pre>

      <h3>Keep for Specific Pages</h3>
      <pre><code class="language-php">// Disable except on specific pages that need it
function conditional_dashicons() {
    // Don't remove on admin, login, or register pages
    if (is_admin() || is_login() || is_register()) {
        return;
    }

    // Keep if user is logged in (for admin bar)
    if (is_user_logged_in()) {
        return;
    }

    // Remove for everyone else
    wp_deregister_style('dashicons');
}
add_action('wp_enqueue_scripts', 'conditional_dashicons');</code></pre>

      <h3>Advanced: Load Only If Needed</h3>
      <pre><code class="language-php">// Check if dashicons are actually used in content
function smart_dashicons_loading() {
    // Always allow in admin
    if (is_admin()) {
        return;
    }

    // Check if user is logged in (admin bar uses dashicons)
    if (is_user_logged_in()) {
        return;
    }

    global $post;

    // Check if post content contains dashicon classes
    $has_dashicons = false;
    if ($post && strpos($post->post_content, 'dashicons-') !== false) {
        $has_dashicons = true;
    }

    // Remove if not needed
    if (!$has_dashicons) {
        wp_deregister_style('dashicons');
    }
}
add_action('wp_enqueue_scripts', 'smart_dashicons_loading', 100);</code></pre>

      <h3>Selective Dequeue with Plugin Check</h3>
      <pre><code class="language-php">// Remove Dashicons unless required by active plugins
function plugin_aware_dashicons_removal() {
    if (is_admin() || is_user_logged_in()) {
        return;
    }

    // List of plugins that need dashicons on frontend
    $dashicons_plugins = array(
        'contact-form-7/wp-contact-form-7.php',
        'wordfence/wordfence.php'
    );

    // Check if any dashicon-dependent plugins are active
    foreach ($dashicons_plugins as $plugin) {
        if (is_plugin_active($plugin)) {
            return; // Keep dashicons
        }
    }

    // Remove if no dependent plugins
    wp_deregister_style('dashicons');
}
add_action('wp_enqueue_scripts', 'plugin_aware_dashicons_removal', 100);</code></pre>

      <h3>Alternative: Use SVG Icons Instead</h3>
      <pre><code class="language-php">// Replace dashicons with inline SVG
function replace_dashicons_with_svg() {
    if (!is_admin() && !is_user_logged_in()) {
        wp_deregister_style('dashicons');

        // Add custom SVG icons stylesheet
        wp_enqueue_style(
            'custom-svg-icons',
            get_template_directory_uri() . '/css/svg-icons.css',
            array(),
            '1.0.0'
        );
    }
}
add_action('wp_enqueue_scripts', 'replace_dashicons_with_svg', 100);</code></pre>

      <h3>Monitor Dashicon Usage</h3>
      <pre><code class="language-php">// Log which pages use dashicons (debugging)
function log_dashicon_usage() {
    if (!is_admin() && !is_user_logged_in()) {
        global $post;

        if ($post && strpos($post->post_content, 'dashicons-') !== false) {
            error_log('Dashicons used on: ' . get_permalink($post));
        }
    }
}
add_action('wp', 'log_dashicon_usage');</code></pre>

      <h3>Custom Admin Bar Without Dashicons</h3>
      <pre><code class="language-php">// Remove dashicons but keep admin bar functional
function custom_admin_bar_styles() {
    if (!is_admin() && is_user_logged_in()) {
        // Dequeue dashicons
        wp_deregister_style('dashicons');

        // Add custom admin bar styles
        wp_add_inline_style('admin-bar', '
            #wpadminbar .ab-icon:before {
                content: "▼";
                font-family: inherit;
            }
        ');
    }
}
add_action('wp_enqueue_scripts', 'custom_admin_bar_styles', 100);</code></pre>

      <h3>Performance Impact</h3>
      <ul>
        <li><strong>File size:</strong> Saves ~3.7KB (dashicons.min.css)</li>
        <li><strong>HTTP requests:</strong> Reduces by 1 request per page</li>
        <li><strong>Cumulative impact:</strong> Small but measurable on mobile</li>
        <li><strong>PageSpeed:</strong> Minor improvement (1-2 points)</li>
      </ul>

      <h3>What Uses Dashicons?</h3>
      <ul>
        <li><strong>WordPress Admin Bar:</strong> Icons for menu items</li>
        <li><strong>Admin Dashboard:</strong> All admin interface icons</li>
        <li><strong>Some Plugins:</strong> Contact Form 7, Wordfence, etc.</li>
        <li><strong>Theme Features:</strong> Custom admin bar menus</li>
        <li><strong>Shortcodes:</strong> Some themes/plugins use dashicon shortcodes</li>
      </ul>

      <h3>When to Keep Dashicons</h3>
      <ul>
        <li>Logged-in users see admin bar on frontend</li>
        <li>Plugins use dashicons in frontend widgets</li>
        <li>Theme uses dashicons in template files</li>
        <li>Custom shortcodes display dashicons</li>
      </ul>

      <h3>When to Remove Dashicons</h3>
      <ul>
        <li>Users never log in or see admin bar</li>
        <li>No plugins use dashicons on frontend</li>
        <li>Theme doesn't use WordPress icon font</li>
        <li>Using custom icon solution (Font Awesome, SVG)</li>
      </ul>

      <h3>Testing After Removal</h3>
      <p>After disabling dashicons, verify:</p>
      <ul>
        <li>Admin bar icons still display for logged-in users</li>
        <li>No missing icons on frontend</li>
        <li>Plugin functionality remains intact</li>
        <li>Custom menus display correctly</li>
        <li>Check as both logged-in and logged-out user</li>
      </ul>

      <h3>Common Issues</h3>
      <ul>
        <li><strong>Missing admin bar icons:</strong> Only remove for non-logged-in users</li>
        <li><strong>Plugin icons broken:</strong> Some plugins load dashicons on frontend</li>
        <li><strong>Theme features broken:</strong> Check if theme uses dashicons</li>
        <li><strong>Shortcodes fail:</strong> Some shortcodes rely on dashicons</li>
      </ul>

      <h3>Alternative Icon Solutions</h3>
      <p>If removing dashicons, consider these alternatives:</p>
      <ul>
        <li><strong>Font Awesome:</strong> More icons, better browser support</li>
        <li><strong>Inline SVG:</strong> Best performance, no HTTP requests</li>
        <li><strong>SVG Sprites:</strong> Single file for all icons</li>
        <li><strong>Unicode symbols:</strong> No additional files needed</li>
        <li><strong>Custom icon font:</strong> Include only needed icons</li>
      </ul>
    `,
    code: `add_action('wp_enqueue_scripts', 'disable_dashicons_frontend');`,
    author: 'Shahmir Khan',
    date: '2025-01-15',
    readTime: '5 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Icons', 'Dashicons', 'Frontend', 'Optimization'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.8+',
    seo: {
      metaTitle: 'Disable Dashicons on WordPress Frontend: Performance Guide 2025',
      metaDescription: 'Remove Dashicons icon font from WordPress frontend to reduce page weight. Complete code guide with examples.',
      keywords: ['disable dashicons wordpress', 'remove dashicons frontend', 'wordpress performance', 'dashicons optimization', 'wordpress icons'],
      canonical: '/blog/disable-dashicons',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Disable Dashicons on Frontend",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will removing Dashicons break my WordPress site?",
        answer: "Not if you only remove it for non-logged-in users. The admin bar for logged-in users needs dashicons, so always check is_user_logged_in() before dequeuing. Test your site after implementation."
      },
      {
        question: "How much performance improvement will I see?",
        answer: "You'll save ~3.7KB and 1 HTTP request per page. While modest, this is worthwhile optimization for mobile users and contributes to overall site speed when combined with other optimizations."
      },
      {
        question: "Do any plugins require Dashicons on the frontend?",
        answer: "Some plugins like Contact Form 7, Wordfence, and various page builders use dashicons on the frontend. Check your plugins and test thoroughly after removal. The smart loading example shows how to detect usage."
      },
      {
        question: "Can I replace Dashicons with another icon set?",
        answer: "Yes! Font Awesome, inline SVG, or custom icon fonts are popular alternatives. SVG icons offer the best performance as they don't require external file loads and scale perfectly."
      },
      {
        question: "What if my theme uses Dashicons?",
        answer: "Some themes display dashicons in templates or widgets. Check your theme files for 'dashicons-' classes. If found, either keep dashicons loaded or replace those icons with alternatives in your child theme."
      }
    ]
  },
  {
    id: 19,
    slug: 'database-cleanup',
    title: 'Database Cleanup & Optimization',
    excerpt: 'Clean up and optimize WordPress database by removing spam, trashed items, expired transients, and optimizing tables for better performance.',
    content: `
      <h2>Why Clean WordPress Database?</h2>
      <p>Over time, WordPress databases accumulate spam comments, post revisions, expired transients, and orphaned metadata. Regular cleanup can reduce database size by 30-70% and improve query performance.</p>

      <h3>Delete Spam and Trashed Comments</h3>
      <pre><code class="language-php">// Clean up spam and trashed comments
function cleanup_comments() {
    global $wpdb;

    // Delete spam comments
    $wpdb->query("DELETE FROM $wpdb->comments WHERE comment_approved = 'spam'");

    // Delete trashed comments
    $wpdb->query("DELETE FROM $wpdb->comments WHERE comment_approved = 'trash'");

    // Delete orphaned comment meta
    $wpdb->query("DELETE cm FROM $wpdb->commentmeta cm
                  LEFT JOIN $wpdb->comments c ON c.comment_ID = cm.comment_id
                  WHERE c.comment_ID IS NULL");

    return 'Comments cleaned up successfully';
}

// Run manually or schedule
// cleanup_comments();</code></pre>

      <h3>Remove Expired Transients</h3>
      <pre><code class="language-php">// Delete expired transients
function delete_expired_transients() {
    global $wpdb;

    $time = time();

    // Delete expired transients
    $wpdb->query(
        $wpdb->prepare(
            "DELETE FROM $wpdb->options
             WHERE option_name LIKE %s
             AND option_value < %d",
            $wpdb->esc_like('_transient_timeout_') . '%',
            $time
        )
    );

    // Delete associated transient data
    $wpdb->query(
        "DELETE FROM $wpdb->options
         WHERE option_name LIKE '_transient_%'
         AND option_name NOT LIKE '_transient_timeout_%'
         AND option_name NOT IN (
             SELECT REPLACE(option_name, '_timeout', '')
             FROM $wpdb->options
             WHERE option_name LIKE '_transient_timeout_%'
         )"
    );

    return 'Transients cleaned up';
}

// Schedule weekly cleanup
if (!wp_next_scheduled('cleanup_transients_hook')) {
    wp_schedule_event(time(), 'weekly', 'cleanup_transients_hook');
}
add_action('cleanup_transients_hook', 'delete_expired_transients');</code></pre>

      <h3>Clean Post Revisions</h3>
      <pre><code class="language-php">// Delete old post revisions
function cleanup_post_revisions() {
    global $wpdb;

    // Keep only last 3 revisions per post
    $wpdb->query("
        DELETE FROM $wpdb->posts
        WHERE post_type = 'revision'
        AND ID NOT IN (
            SELECT ID FROM (
                SELECT ID
                FROM $wpdb->posts AS p
                WHERE p.post_type = 'revision'
                ORDER BY p.post_modified DESC
                LIMIT 3
            ) AS keep_revisions
        )
    ");

    return 'Revisions cleaned up';
}</code></pre>

      <h3>Remove Auto-Drafts</h3>
      <pre><code class="language-php">// Delete auto-drafts older than 30 days
function cleanup_auto_drafts() {
    global $wpdb;

    $wpdb->query(
        $wpdb->prepare(
            "DELETE FROM $wpdb->posts
             WHERE post_status = 'auto-draft'
             AND post_date < DATE_SUB(NOW(), INTERVAL %d DAY)",
            30
        )
    );

    return 'Auto-drafts cleaned up';
}</code></pre>

      <h3>Optimize Database Tables</h3>
      <pre><code class="language-php">// Optimize all WordPress tables
function optimize_database_tables() {
    global $wpdb;

    // Get all WordPress tables
    $tables = $wpdb->get_results('SHOW TABLES', ARRAY_N);

    foreach ($tables as $table) {
        $table_name = $table[0];

        // Only optimize WordPress tables
        if (strpos($table_name, $wpdb->prefix) === 0) {
            $wpdb->query("OPTIMIZE TABLE $table_name");
        }
    }

    return 'Database optimized';
}

// Schedule monthly optimization
if (!wp_next_scheduled('optimize_db_hook')) {
    wp_schedule_event(time(), 'monthly', 'optimize_db_hook');
}
add_action('optimize_db_hook', 'optimize_database_tables');</code></pre>

      <h3>Comprehensive Database Cleanup</h3>
      <pre><code class="language-php">// Complete database maintenance function
function comprehensive_db_cleanup() {
    global $wpdb;

    $results = array();

    // 1. Clean comments
    $spam_deleted = $wpdb->query("DELETE FROM $wpdb->comments WHERE comment_approved = 'spam'");
    $trash_deleted = $wpdb->query("DELETE FROM $wpdb->comments WHERE comment_approved = 'trash'");
    $results['comments'] = $spam_deleted + $trash_deleted;

    // 2. Clean orphaned comment meta
    $orphaned_meta = $wpdb->query(
        "DELETE cm FROM $wpdb->commentmeta cm
         LEFT JOIN $wpdb->comments c ON c.comment_ID = cm.comment_id
         WHERE c.comment_ID IS NULL"
    );
    $results['orphaned_meta'] = $orphaned_meta;

    // 3. Delete expired transients
    $time = time();
    $transients = $wpdb->query(
        $wpdb->prepare(
            "DELETE FROM $wpdb->options
             WHERE option_name LIKE %s AND option_value < %d",
            $wpdb->esc_like('_transient_timeout_') . '%',
            $time
        )
    );
    $results['transients'] = $transients;

    // 4. Clean post revisions (keep latest 3)
    $revisions = $wpdb->query(
        "DELETE FROM $wpdb->posts
         WHERE post_type = 'revision'
         AND post_date < DATE_SUB(NOW(), INTERVAL 60 DAY)"
    );
    $results['revisions'] = $revisions;

    // 5. Delete auto-drafts
    $drafts = $wpdb->query(
        "DELETE FROM $wpdb->posts
         WHERE post_status = 'auto-draft'
         AND post_date < DATE_SUB(NOW(), INTERVAL 30 DAY)"
    );
    $results['auto_drafts'] = $drafts;

    // 6. Optimize tables
    $tables = $wpdb->get_results('SHOW TABLES', ARRAY_N);
    $optimized = 0;
    foreach ($tables as $table) {
        if (strpos($table[0], $wpdb->prefix) === 0) {
            $wpdb->query("OPTIMIZE TABLE {$table[0]}");
            $optimized++;
        }
    }
    $results['tables_optimized'] = $optimized;

    return $results;
}

// Add admin page to run cleanup
add_action('admin_menu', function() {
    add_management_page(
        'Database Cleanup',
        'DB Cleanup',
        'manage_options',
        'db-cleanup',
        function() {
            if (isset($_POST['run_cleanup']) && check_admin_referer('db_cleanup')) {
                $results = comprehensive_db_cleanup();
                echo '<div class="notice notice-success"><p>Cleanup complete! ';
                echo 'Comments: ' . $results['comments'] . ', ';
                echo 'Transients: ' . $results['transients'] . ', ';
                echo 'Revisions: ' . $results['revisions'] . ', ';
                echo 'Tables optimized: ' . $results['tables_optimized'];
                echo '</p></div>';
            }
            ?>
            <div class="wrap">
                <h1>Database Cleanup</h1>
                <form method="post">
                    <?php wp_nonce_field('db_cleanup'); ?>
                    <p>This will clean spam comments, expired transients, old revisions, and optimize database tables.</p>
                    <button type="submit" name="run_cleanup" class="button button-primary">
                        Run Cleanup
                    </button>
                </form>
            </div>
            <?php
        }
    );
});</code></pre>

      <h3>Monitor Database Size</h3>
      <pre><code class="language-php">// Get database size information
function get_database_size() {
    global $wpdb;

    $db_name = DB_NAME;

    $result = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT SUM(data_length + index_length) / 1024 / 1024 AS size_mb
             FROM information_schema.TABLES
             WHERE table_schema = %s
             AND table_name LIKE %s",
            $db_name,
            $wpdb->esc_like($wpdb->prefix) . '%'
        )
    );

    return round($result->size_mb, 2) . ' MB';
}

// Display in dashboard widget
add_action('wp_dashboard_setup', function() {
    wp_add_dashboard_widget(
        'db_size_widget',
        'Database Size',
        function() {
            echo '<p>Current database size: <strong>' . get_database_size() . '</strong></p>';
        }
    );
});</code></pre>

      <h3>What Gets Cleaned</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Item</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Typical Savings</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Impact</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Spam comments</td>
          <td style="border: 1px solid #ddd; padding: 8px;">10-50 MB</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Medium</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Expired transients</td>
          <td style="border: 1px solid #ddd; padding: 8px;">5-20 MB</td>
          <td style="border: 1px solid #ddd; padding: 8px;">High</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Post revisions</td>
          <td style="border: 1px solid #ddd; padding: 8px;">10-100 MB</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Medium</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Auto-drafts</td>
          <td style="border: 1px solid #ddd; padding: 8px;">1-5 MB</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Low</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Table optimization</td>
          <td style="border: 1px solid #ddd; padding: 8px;">5-15%</td>
          <td style="border: 1px solid #ddd; padding: 8px;">High</td>
        </tr>
      </table>

      <h3>Safety Precautions</h3>
      <ul>
        <li><strong>Always backup first:</strong> Use UpdraftPlus, BackWPup, or phpMyAdmin</li>
        <li><strong>Test on staging:</strong> Never run cleanup on production without testing</li>
        <li><strong>Check results:</strong> Verify site functionality after cleanup</li>
        <li><strong>Schedule carefully:</strong> Run during low-traffic periods</li>
        <li><strong>Monitor performance:</strong> Measure improvement before/after</li>
      </ul>

      <h3>Recommended Schedule</h3>
      <ul>
        <li><strong>Weekly:</strong> Delete expired transients, spam comments</li>
        <li><strong>Monthly:</strong> Clean revisions, optimize tables</li>
        <li><strong>Quarterly:</strong> Comprehensive cleanup with backup</li>
        <li><strong>Annual:</strong> Full database audit and restructure if needed</li>
      </ul>

      <h3>Alternative: Use Plugins</h3>
      <p>For non-technical users, consider these plugins:</p>
      <ul>
        <li><strong>WP-Optimize:</strong> All-in-one cleanup and optimization</li>
        <li><strong>Advanced Database Cleaner:</strong> Deep cleaning options</li>
        <li><strong>WP-Sweep:</strong> Removes orphaned data</li>
        <li><strong>Optimize Database after Deleting Revisions:</strong> Focused on revisions</li>
      </ul>
    `,
    code: `add_action('cleanup_transients_hook', 'delete_expired_transients');`,
    author: 'Shahmir Khan',
    date: '2025-01-14',
    readTime: '8 min read',
    category: 'WordPress Performance',
    tags: ['Database', 'Performance', 'Optimization', 'Maintenance', 'Cleanup'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 2.0+',
    seo: {
      metaTitle: 'WordPress Database Cleanup & Optimization: Complete Guide 2025',
      metaDescription: 'Clean and optimize WordPress database with code snippets. Remove spam, transients, revisions and optimize tables for better performance.',
      keywords: ['wordpress database cleanup', 'optimize wordpress database', 'clean wp database', 'database optimization', 'wordpress maintenance'],
      canonical: '/blog/database-cleanup',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Database Cleanup & Optimization",
        "proficiencyLevel": "Advanced"
      }
    },
    faqs: [
      {
        question: "How often should I clean my WordPress database?",
        answer: "Run automated weekly cleanups for transients and spam, monthly table optimization, and quarterly comprehensive cleanups. High-traffic sites benefit from more frequent maintenance."
      },
      {
        question: "Will database cleanup improve my site speed?",
        answer: "Yes! Cleaning can reduce database size by 30-70% and improve query performance. You'll notice faster admin dashboard, quicker page loads, and more efficient backups."
      },
      {
        question: "Is it safe to run these SQL queries on my live site?",
        answer: "Only if you backup first! Always test on staging environments. The queries are safe but irreversible. Use plugins like WP-Optimize if you're uncomfortable with direct SQL queries."
      },
      {
        question: "What happens if I delete too many revisions?",
        answer: "You lose the ability to restore older versions of posts. Keep at least 2-3 recent revisions per post. The examples show how to preserve recent revisions while cleaning old ones."
      },
      {
        question: "Can I automate database cleanup?",
        answer: "Yes! Use wp_schedule_event() to run cleanup functions automatically. The examples show weekly transient cleanup and monthly table optimization. Combine with WP-CLI for advanced automation."
      }
    ]
  },
  {
    id: 20,
    slug: 'gzip-compression',
    title: 'Enable GZIP Compression',
    excerpt: 'Compress your WordPress files with GZIP to reduce bandwidth usage and improve page load times by 50-70%.',
    content: `
      <h2>What is GZIP Compression?</h2>
      <p>GZIP compression reduces the size of files sent from your server to browsers, typically achieving 50-70% reduction in file size. This dramatically improves page load times, especially for text-based files like HTML, CSS, and JavaScript.</p>

      <h3>Enable via .htaccess (Apache)</h3>
      <pre><code class="language-apache"># Enable GZIP Compression
<IfModule mod_deflate.c>
    # Compress HTML, CSS, JavaScript, Text, XML and fonts
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
    AddOutputFilterByType DEFLATE application/x-font
    AddOutputFilterByType DEFLATE application/x-font-opentype
    AddOutputFilterByType DEFLATE application/x-font-otf
    AddOutputFilterByType DEFLATE application/x-font-truetype
    AddOutputFilterByType DEFLATE application/x-font-ttf
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE font/opentype
    AddOutputFilterByType DEFLATE font/otf
    AddOutputFilterByType DEFLATE font/ttf
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE image/x-icon
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/javascript
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/xml

    # Remove browser bugs (only needed for really old browsers)
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
    Header append Vary User-Agent
</IfModule></code></pre>

      <h3>Enable via PHP</h3>
      <pre><code class="language-php">// Enable GZIP compression in WordPress
function enable_gzip_compression() {
    if (!ob_start('ob_gzhandler')) {
        ob_start();
    }
}
add_action('init', 'enable_gzip_compression');</code></pre>

      <h3>Enable via wp-config.php</h3>
      <pre><code class="language-php">// Add to wp-config.php
// Enable GZIP output compression
if (!defined('ENFORCE_GZIP')) {
    define('ENFORCE_GZIP', true);
}

// Enable compression
ini_set('zlib.output_compression', 'On');
ini_set('zlib.output_compression_level', '6');</code></pre>

      <h3>Nginx Configuration</h3>
      <pre><code class="language-nginx"># Add to nginx.conf or site config
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_proxied any;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/rss+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;</code></pre>

      <h3>Check if GZIP is Enabled</h3>
      <pre><code class="language-php">// Test if GZIP compression is working
function check_gzip_compression() {
    if (!is_admin() && current_user_can('manage_options')) {
        echo '<!-- GZIP Compression: ';

        if (extension_loaded('zlib')) {
            echo 'Enabled';

            $compression = ini_get('zlib.output_compression');
            if ($compression) {
                echo ' (Level: ' . ini_get('zlib.output_compression_level') . ')';
            }
        } else {
            echo 'Disabled - zlib not loaded';
        }

        echo ' -->';
    }
}
add_action('wp_head', 'check_gzip_compression');</code></pre>

      <h3>Advanced: Selective Compression</h3>
      <pre><code class="language-php">// Compress only for specific file types
function selective_gzip_compression() {
    // Check if we should compress
    $compress = false;

    // Get current content type
    $headers = headers_list();
    foreach ($headers as $header) {
        if (stripos($header, 'Content-Type') !== false) {
            // Compress text-based content
            if (stripos($header, 'text/') !== false ||
                stripos($header, 'javascript') !== false ||
                stripos($header, 'json') !== false) {
                $compress = true;
                break;
            }
        }
    }

    if ($compress && !ob_start('ob_gzhandler')) {
        ob_start();
    }
}
add_action('init', 'selective_gzip_compression', 1);</code></pre>

      <h3>Brotli Compression (Modern Alternative)</h3>
      <pre><code class="language-apache"># Enable Brotli compression (more efficient than GZIP)
<IfModule mod_brotli.c>
    AddOutputFilterByType BROTLI_COMPRESS text/html text/plain text/xml
    AddOutputFilterByType BROTLI_COMPRESS text/css text/javascript
    AddOutputFilterByType BROTLI_COMPRESS application/javascript
    AddOutputFilterByType BROTLI_COMPRESS application/json
    AddOutputFilterByType BROTLI_COMPRESS application/xml
</IfModule>

# Fallback to GZIP if Brotli not available
<IfModule !mod_brotli.c>
    <IfModule mod_deflate.c>
        AddOutputFilterByType DEFLATE text/html text/plain text/xml
        AddOutputFilterByType DEFLATE text/css text/javascript
        AddOutputFilterByType DEFLATE application/javascript
        AddOutputFilterByType DEFLATE application/json
    </IfModule>
</IfModule></code></pre>

      <h3>Exclude Specific Files</h3>
      <pre><code class="language-apache"># Don't compress images and already-compressed files
<IfModule mod_deflate.c>
    SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png|webp|ico|pdf|gz|zip|rar)$ no-gzip dont-vary

    # Compress everything except what we excluded
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule></code></pre>

      <h3>Compression Levels</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Level</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Compression</th>
          <th style="border: 1px solid #ddd; padding: 8px;">CPU Usage</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Recommended For</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">1-3</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Low (fast)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Low</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Shared hosting, high traffic</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">4-6</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Medium (balanced)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Medium</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Most sites (recommended)</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">7-9</td>
          <td style="border: 1px solid #ddd; padding: 8px;">High (slow)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">High</td>
          <td style="border: 1px solid #ddd; padding: 8px;">VPS/dedicated, low traffic</td>
        </tr>
      </table>

      <h3>Performance Impact</h3>
      <ul>
        <li><strong>File size reduction:</strong> 50-70% for text files</li>
        <li><strong>HTML pages:</strong> 60-80% smaller</li>
        <li><strong>CSS files:</strong> 70-80% smaller</li>
        <li><strong>JavaScript:</strong> 60-70% smaller</li>
        <li><strong>Page load time:</strong> 40-60% faster</li>
        <li><strong>Bandwidth savings:</strong> Significant cost reduction</li>
      </ul>

      <h3>What to Compress</h3>
      <ul>
        <li>✓ HTML pages</li>
        <li>✓ CSS stylesheets</li>
        <li>✓ JavaScript files</li>
        <li>✓ XML and JSON</li>
        <li>✓ SVG images</li>
        <li>✓ Plain text files</li>
        <li>✗ Images (JPG, PNG, GIF already compressed)</li>
        <li>✗ Videos (already compressed)</li>
        <li>✗ PDFs (minimal benefit)</li>
        <li>✗ Zip/Rar files (already compressed)</li>
      </ul>

      <h3>Testing GZIP</h3>
      <p>Verify GZIP is working using these tools:</p>
      <ul>
        <li><strong>GTmetrix:</strong> Check "Enable compression" in PageSpeed</li>
        <li><strong>GIDNetwork:</strong> gidnetwork.com/tools/gzip-test.php</li>
        <li><strong>Check GZIP:</strong> checkgzipcompression.com</li>
        <li><strong>Browser DevTools:</strong> Check response headers for "content-encoding: gzip"</li>
        <li><strong>cURL:</strong> curl -H "Accept-Encoding: gzip" -I yoursite.com</li>
      </ul>

      <h3>Common Issues</h3>
      <ul>
        <li><strong>Double compression:</strong> Check if host already enables GZIP</li>
        <li><strong>Broken pages:</strong> Lower compression level or use .htaccess instead of PHP</li>
        <li><strong>High CPU:</strong> Reduce compression level from 9 to 6 or lower</li>
        <li><strong>No effect:</strong> Clear cache (browser, CDN, and WordPress cache)</li>
        <li><strong>Headers already sent:</strong> GZIP must be enabled before any output</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Use compression level 5-6 for best balance</li>
        <li>Don't compress images, videos, or already-compressed files</li>
        <li>Test thoroughly after enabling</li>
        <li>Check server logs for compression errors</li>
        <li>Consider Brotli for modern browsers</li>
        <li>Combine with browser caching for maximum benefit</li>
      </ul>
    `,
    code: `add_action('init', 'enable_gzip_compression');`,
    author: 'Shahmir Khan',
    date: '2025-01-14',
    readTime: '7 min read',
    category: 'WordPress Performance',
    tags: ['Performance', 'Compression', 'GZIP', 'Page Speed', 'Optimization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 2.0+',
    seo: {
      metaTitle: 'Enable GZIP Compression in WordPress: Complete Guide 2025',
      metaDescription: 'Enable GZIP compression to reduce file sizes by 50-70%. Complete code examples for Apache, Nginx, and PHP configuration.',
      keywords: ['gzip compression wordpress', 'enable gzip', 'wordpress compression', 'reduce file size', 'wordpress performance'],
      canonical: '/blog/gzip-compression',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Enable GZIP Compression",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "How much faster will my site be with GZIP enabled?",
        answer: "GZIP typically reduces text file sizes by 50-70%, resulting in 40-60% faster page loads. A 500KB page might compress to 150KB, significantly improving load times especially on mobile connections."
      },
      {
        question: "Does GZIP compression increase server load?",
        answer: "Yes, but minimally. Compression level 6 (recommended) uses negligible CPU resources and the bandwidth savings far outweigh the processing cost. The tradeoff is heavily favorable even on shared hosting."
      },
      {
        question: "Should I use GZIP or Brotli compression?",
        answer: "Use both! Brotli offers ~20% better compression than GZIP but isn't supported by all browsers. Configure your server to prefer Brotli with GZIP as fallback for maximum compatibility and performance."
      },
      {
        question: "How do I know if GZIP is already enabled?",
        answer: "Check your browser's Network tab (DevTools) and look for 'content-encoding: gzip' in response headers. Or use online tools like GTmetrix, which will show 'Enable compression' passed/failed."
      },
      {
        question: "Can GZIP compression break my WordPress site?",
        answer: "Rarely. Issues usually occur from double compression (host + WordPress both compressing) or headers already sent errors. Test after enabling and reduce compression level if you experience problems. Most modern hosts support GZIP without issues."
      }
    ]
  },
  {
    id: 21,
    slug: 'register-custom-post-type',
    title: 'Register Custom Post Types',
    excerpt: 'Create custom post types in WordPress to organize different content types beyond posts and pages, with full customization options.',
    content: `
      <h2>Why Use Custom Post Types?</h2>
      <p>Custom Post Types (CPTs) let you create specialized content types like portfolios, testimonials, products, or events. They provide better content organization and tailored admin interfaces for different content needs.</p>

      <h3>Basic Custom Post Type</h3>
      <pre><code class="language-php">// Register a simple custom post type
function register_portfolio_post_type() {
    register_post_type('portfolio', array(
        'labels' => array(
            'name' => 'Portfolio',
            'singular_name' => 'Portfolio Item',
            'add_new' => 'Add New Item',
            'add_new_item' => 'Add New Portfolio Item',
            'edit_item' => 'Edit Portfolio Item',
            'new_item' => 'New Portfolio Item',
            'view_item' => 'View Portfolio Item',
            'search_items' => 'Search Portfolio',
            'not_found' => 'No portfolio items found',
            'not_found_in_trash' => 'No portfolio items found in trash'
        ),
        'public' => true,
        'has_archive' => true,
        'menu_icon' => 'dashicons-portfolio',
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),
        'rewrite' => array('slug' => 'portfolio'),
    ));
}
add_action('init', 'register_portfolio_post_type');</code></pre>

      <h3>Advanced Custom Post Type with All Options</h3>
      <pre><code class="language-php">// Comprehensive CPT registration
function register_advanced_cpt() {
    $labels = array(
        'name' => 'Events',
        'singular_name' => 'Event',
        'menu_name' => 'Events',
        'add_new' => 'Add Event',
        'add_new_item' => 'Add New Event',
        'edit' => 'Edit',
        'edit_item' => 'Edit Event',
        'new_item' => 'New Event',
        'view' => 'View Event',
        'view_item' => 'View Event',
        'search_items' => 'Search Events',
        'not_found' => 'No Events Found',
        'not_found_in_trash' => 'No Events Found in Trash',
        'parent_item_colon' => 'Parent Event'
    );

    $args = array(
        'labels' => $labels,
        'description' => 'Manage your events',
        'public' => true,
        'publicly_queryable' => true,
        'show_ui' => true,
        'show_in_menu' => true,
        'show_in_nav_menus' => true,
        'show_in_admin_bar' => true,
        'show_in_rest' => true, // Gutenberg support
        'menu_position' => 5,
        'menu_icon' => 'dashicons-calendar-alt',
        'capability_type' => 'post',
        'hierarchical' => false, // true for page-like, false for post-like
        'supports' => array(
            'title',
            'editor',
            'author',
            'thumbnail',
            'excerpt',
            'comments',
            'custom-fields',
            'revisions',
            'page-attributes'
        ),
        'has_archive' => true,
        'rewrite' => array(
            'slug' => 'events',
            'with_front' => false,
            'pages' => true,
            'feeds' => true,
        ),
        'query_var' => true,
        'can_export' => true,
        'delete_with_user' => false,
        'exclude_from_search' => false,
    );

    register_post_type('event', $args);
}
add_action('init', 'register_advanced_cpt');</code></pre>

      <h3>Multiple Custom Post Types</h3>
      <pre><code class="language-php">// Register multiple CPTs efficiently
function register_multiple_cpts() {
    $post_types = array(
        'portfolio' => array(
            'labels' => array(
                'name' => 'Portfolio',
                'singular_name' => 'Portfolio Item'
            ),
            'menu_icon' => 'dashicons-portfolio',
            'supports' => array('title', 'editor', 'thumbnail')
        ),
        'testimonial' => array(
            'labels' => array(
                'name' => 'Testimonials',
                'singular_name' => 'Testimonial'
            ),
            'menu_icon' => 'dashicons-format-quote',
            'supports' => array('title', 'editor', 'thumbnail')
        ),
        'team' => array(
            'labels' => array(
                'name' => 'Team Members',
                'singular_name' => 'Team Member'
            ),
            'menu_icon' => 'dashicons-groups',
            'supports' => array('title', 'editor', 'thumbnail', 'custom-fields')
        )
    );

    foreach ($post_types as $key => $args) {
        $defaults = array(
            'public' => true,
            'has_archive' => true,
            'show_in_rest' => true,
            'rewrite' => array('slug' => $key)
        );

        register_post_type($key, array_merge($defaults, $args));
    }
}
add_action('init', 'register_multiple_cpts');</code></pre>

      <h3>CPT with Custom Capabilities</h3>
      <pre><code class="language-php">// Custom post type with specific permissions
function register_cpt_with_capabilities() {
    register_post_type('project', array(
        'labels' => array(
            'name' => 'Projects',
            'singular_name' => 'Project'
        ),
        'public' => true,
        'show_in_rest' => true,
        'menu_icon' => 'dashicons-lightbulb',
        'capability_type' => 'project',
        'map_meta_cap' => true,
        'capabilities' => array(
            'edit_post' => 'edit_project',
            'read_post' => 'read_project',
            'delete_post' => 'delete_project',
            'edit_posts' => 'edit_projects',
            'edit_others_posts' => 'edit_others_projects',
            'publish_posts' => 'publish_projects',
            'read_private_posts' => 'read_private_projects',
        ),
        'supports' => array('title', 'editor', 'thumbnail')
    ));
}
add_action('init', 'register_cpt_with_capabilities');

// Add capabilities to roles
function add_project_capabilities() {
    $role = get_role('administrator');
    $role->add_cap('edit_project');
    $role->add_cap('edit_projects');
    $role->add_cap('edit_others_projects');
    $role->add_cap('publish_projects');
    $role->add_cap('read_project');
    $role->add_cap('read_private_projects');
    $role->add_cap('delete_project');
}
register_activation_hook(__FILE__, 'add_project_capabilities');</code></pre>

      <h3>CPT with Custom Taxonomies</h3>
      <pre><code class="language-php">// Register CPT with associated taxonomies
function register_cpt_with_taxonomies() {
    // Register the post type
    register_post_type('book', array(
        'labels' => array(
            'name' => 'Books',
            'singular_name' => 'Book'
        ),
        'public' => true,
        'has_archive' => true,
        'show_in_rest' => true,
        'menu_icon' => 'dashicons-book',
        'supports' => array('title', 'editor', 'thumbnail', 'excerpt'),
        'taxonomies' => array('genre', 'author-tax') // Register taxonomies
    ));

    // Register genre taxonomy
    register_taxonomy('genre', 'book', array(
        'labels' => array(
            'name' => 'Genres',
            'singular_name' => 'Genre'
        ),
        'hierarchical' => true, // Like categories
        'show_in_rest' => true,
        'rewrite' => array('slug' => 'genre')
    ));

    // Register author taxonomy
    register_taxonomy('author-tax', 'book', array(
        'labels' => array(
            'name' => 'Authors',
            'singular_name' => 'Author'
        ),
        'hierarchical' => false, // Like tags
        'show_in_rest' => true,
        'rewrite' => array('slug' => 'book-author')
    ));
}
add_action('init', 'register_cpt_with_taxonomies');</code></pre>

      <h3>Flush Rewrite Rules</h3>
      <pre><code class="language-php">// Flush rewrite rules on theme activation
function flush_cpt_rewrite_rules() {
    // Register your CPT
    register_portfolio_post_type();

    // Flush rewrite rules
    flush_rewrite_rules();
}
register_activation_hook(__FILE__, 'flush_cpt_rewrite_rules');

// Also flush on theme switch
add_action('after_switch_theme', 'flush_rewrite_rules');</code></pre>

      <h3>Custom Admin Columns</h3>
      <pre><code class="language-php">// Add custom columns to CPT admin list
function add_portfolio_columns($columns) {
    $new_columns = array();
    $new_columns['cb'] = $columns['cb'];
    $new_columns['thumbnail'] = 'Image';
    $new_columns['title'] = $columns['title'];
    $new_columns['category'] = 'Category';
    $new_columns['date'] = $columns['date'];

    return $new_columns;
}
add_filter('manage_portfolio_posts_columns', 'add_portfolio_columns');

function portfolio_column_content($column_name, $post_id) {
    if ($column_name == 'thumbnail') {
        $thumbnail = get_the_post_thumbnail($post_id, array(50, 50));
        echo $thumbnail ? $thumbnail : '—';
    }

    if ($column_name == 'category') {
        $terms = get_the_terms($post_id, 'portfolio_category');
        if ($terms && !is_wp_error($terms)) {
            $term_names = wp_list_pluck($terms, 'name');
            echo implode(', ', $term_names);
        } else {
            echo '—';
        }
    }
}
add_action('manage_portfolio_posts_custom_column', 'portfolio_column_content', 10, 2);</code></pre>

      <h3>Common CPT Parameters</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Parameter</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Description</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Default</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">public</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Show in admin and on frontend</td>
          <td style="border: 1px solid #ddd; padding: 8px;">false</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">show_in_rest</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Enable Gutenberg and REST API</td>
          <td style="border: 1px solid #ddd; padding: 8px;">false</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">hierarchical</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Page-like (true) or post-like (false)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">false</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">has_archive</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Enable archive page</td>
          <td style="border: 1px solid #ddd; padding: 8px;">false</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">supports</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Features (title, editor, thumbnail, etc.)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">title, editor</td>
        </tr>
      </table>

      <h3>Best Practices</h3>
      <ul>
        <li>Use lowercase, singular names for post type keys (e.g., 'book' not 'books')</li>
        <li>Always flush rewrite rules after registering CPTs</li>
        <li>Enable 'show_in_rest' for Gutenberg support</li>
        <li>Use descriptive labels for better UX</li>
        <li>Don't use reserved words (post, page, attachment, etc.)</li>
        <li>Register CPTs on 'init' action with priority 0</li>
        <li>Keep post type keys under 20 characters</li>
      </ul>

      <h3>Common Use Cases</h3>
      <ul>
        <li><strong>Portfolio:</strong> Showcase creative work</li>
        <li><strong>Testimonials:</strong> Client reviews and feedback</li>
        <li><strong>Team Members:</strong> Staff and employee profiles</li>
        <li><strong>Products:</strong> E-commerce items (or use WooCommerce)</li>
        <li><strong>Events:</strong> Calendar and event management</li>
        <li><strong>FAQs:</strong> Frequently asked questions</li>
        <li><strong>Services:</strong> Business services offered</li>
      </ul>

      <h3>Template Hierarchy</h3>
      <p>WordPress looks for templates in this order:</p>
      <ul>
        <li>single-{post-type}.php (e.g., single-portfolio.php)</li>
        <li>archive-{post-type}.php (e.g., archive-portfolio.php)</li>
        <li>taxonomy-{taxonomy}-{term}.php</li>
        <li>taxonomy-{taxonomy}.php</li>
        <li>single.php</li>
        <li>archive.php</li>
        <li>index.php</li>
      </ul>
    `,
    code: `add_action('init', 'register_portfolio_post_type');`,
    author: 'Shahmir Khan',
    date: '2025-01-13',
    readTime: '8 min read',
    category: 'WordPress Theme Development',
    tags: ['Custom Post Types', 'Theme Development', 'CPT', 'Development', 'Content Types'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Register Custom Post Types in WordPress: Complete Guide 2025',
      metaDescription: 'Create custom post types in WordPress with complete code examples. Learn CPT registration, taxonomies, and best practices.',
      keywords: ['wordpress custom post types', 'register post type', 'cpt wordpress', 'custom post type tutorial', 'wordpress development'],
      canonical: '/blog/register-custom-post-type',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Register Custom Post Types",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between hierarchical true and false?",
        answer: "Hierarchical true makes your CPT behave like pages (can have parent/child relationships, page attributes box). Hierarchical false makes it behave like posts (chronological, categories/tags). Use true for structured content, false for blog-style content."
      },
      {
        question: "Do I need to flush rewrite rules every time?",
        answer: "No, only when registering new CPTs or changing slug/rewrite settings. Use register_activation_hook() for plugins or after_switch_theme for themes. Never flush on every page load—it impacts performance."
      },
      {
        question: "Why isn't my custom post type showing in Gutenberg?",
        answer: "Add 'show_in_rest' => true to your registration array. This enables both the REST API and Gutenberg editor. Without it, you'll only have the classic editor."
      },
      {
        question: "Can I add custom fields to my CPT?",
        answer: "Yes! Use add_meta_box() to add custom fields, or use plugins like Advanced Custom Fields (ACF) or Meta Box for easier implementation. Include 'custom-fields' in the 'supports' array to enable the basic custom fields box."
      },
      {
        question: "Should I create CPTs in a plugin or theme?",
        answer: "Use a plugin for CPTs that contain important content (portfolio, testimonials, etc.) so data persists across theme changes. Use themes only for display-related CPTs that are theme-specific and don't matter if lost when switching themes."
      }
    ]
  },
  {
    id: 22,
    slug: 'register-custom-taxonomy',
    title: 'Register Custom Taxonomies',
    excerpt: 'Create custom taxonomies in WordPress to organize and categorize content with tags and categories beyond the defaults.',
    content: `
      <h2>What are Custom Taxonomies?</h2>
      <p>Taxonomies are how WordPress groups content. Custom taxonomies let you create new ways to organize posts, pages, and custom post types—like movie genres, product brands, or event locations.</p>

      <h3>Basic Custom Taxonomy (Category-Style)</h3>
      <pre><code class="language-php">// Register hierarchical taxonomy (like categories)
function register_genre_taxonomy() {
    register_taxonomy('genre', array('post', 'book'), array(
        'labels' => array(
            'name' => 'Genres',
            'singular_name' => 'Genre',
            'search_items' => 'Search Genres',
            'all_items' => 'All Genres',
            'parent_item' => 'Parent Genre',
            'parent_item_colon' => 'Parent Genre:',
            'edit_item' => 'Edit Genre',
            'update_item' => 'Update Genre',
            'add_new_item' => 'Add New Genre',
            'new_item_name' => 'New Genre Name',
            'menu_name' => 'Genres',
        ),
        'hierarchical' => true, // true = categories, false = tags
        'show_ui' => true,
        'show_in_rest' => true, // Gutenberg support
        'show_admin_column' => true,
        'query_var' => true,
        'rewrite' => array('slug' => 'genre'),
    ));
}
add_action('init', 'register_genre_taxonomy');</code></pre>

      <h3>Tag-Style Taxonomy (Non-Hierarchical)</h3>
      <pre><code class="language-php">// Register non-hierarchical taxonomy (like tags)
function register_location_taxonomy() {
    register_taxonomy('location', 'event', array(
        'labels' => array(
            'name' => 'Locations',
            'singular_name' => 'Location',
            'search_items' => 'Search Locations',
            'popular_items' => 'Popular Locations',
            'all_items' => 'All Locations',
            'edit_item' => 'Edit Location',
            'update_item' => 'Update Location',
            'add_new_item' => 'Add New Location',
            'new_item_name' => 'New Location Name',
            'separate_items_with_commas' => 'Separate locations with commas',
            'add_or_remove_items' => 'Add or remove locations',
            'choose_from_most_used' => 'Choose from most used locations',
            'menu_name' => 'Locations',
        ),
        'hierarchical' => false, // Acts like tags
        'show_ui' => true,
        'show_in_rest' => true,
        'show_admin_column' => true,
        'update_count_callback' => '_update_post_term_count',
        'query_var' => true,
        'rewrite' => array(
            'slug' => 'location',
            'with_front' => false
        ),
    ));
}
add_action('init', 'register_location_taxonomy');</code></pre>

      <h3>Advanced Taxonomy with Full Options</h3>
      <pre><code class="language-php">// Comprehensive taxonomy registration
function register_advanced_taxonomy() {
    $labels = array(
        'name' => 'Product Categories',
        'singular_name' => 'Product Category',
        'menu_name' => 'Categories',
        'all_items' => 'All Categories',
        'parent_item' => 'Parent Category',
        'parent_item_colon' => 'Parent Category:',
        'new_item_name' => 'New Category Name',
        'add_new_item' => 'Add New Category',
        'edit_item' => 'Edit Category',
        'update_item' => 'Update Category',
        'view_item' => 'View Category',
        'separate_items_with_commas' => 'Separate categories with commas',
        'add_or_remove_items' => 'Add or remove categories',
        'choose_from_most_used' => 'Choose from most used',
        'popular_items' => 'Popular Categories',
        'search_items' => 'Search Categories',
        'not_found' => 'Not Found',
        'no_terms' => 'No categories',
        'items_list' => 'Categories list',
        'items_list_navigation' => 'Categories list navigation',
    );

    $args = array(
        'labels' => $labels,
        'description' => 'Product categorization system',
        'hierarchical' => true,
        'public' => true,
        'publicly_queryable' => true,
        'show_ui' => true,
        'show_in_menu' => true,
        'show_in_nav_menus' => true,
        'show_in_rest' => true,
        'show_tagcloud' => true,
        'show_in_quick_edit' => true,
        'show_admin_column' => true,
        'meta_box_cb' => 'post_categories_meta_box', // Custom meta box
        'rewrite' => array(
            'slug' => 'product-category',
            'with_front' => true,
            'hierarchical' => true,
        ),
        'query_var' => true,
        'update_count_callback' => '_update_post_term_count',
        'sort' => true,
    );

    register_taxonomy('product_category', array('product'), $args);
}
add_action('init', 'register_advanced_taxonomy');</code></pre>

      <h3>Multiple Taxonomies</h3>
      <pre><code class="language-php">// Register multiple taxonomies efficiently
function register_multiple_taxonomies() {
    $taxonomies = array(
        'brand' => array(
            'post_types' => array('product'),
            'labels' => array(
                'name' => 'Brands',
                'singular_name' => 'Brand'
            ),
            'hierarchical' => true
        ),
        'color' => array(
            'post_types' => array('product'),
            'labels' => array(
                'name' => 'Colors',
                'singular_name' => 'Color'
            ),
            'hierarchical' => false
        ),
        'size' => array(
            'post_types' => array('product'),
            'labels' => array(
                'name' => 'Sizes',
                'singular_name' => 'Size'
            ),
            'hierarchical' => false
        )
    );

    foreach ($taxonomies as $key => $tax) {
        $defaults = array(
            'public' => true,
            'show_in_rest' => true,
            'show_admin_column' => true,
            'rewrite' => array('slug' => $key)
        );

        register_taxonomy(
            $key,
            $tax['post_types'],
            array_merge($defaults, $tax)
        );
    }
}
add_action('init', 'register_multiple_taxonomies');</code></pre>

      <h3>Add Custom Fields to Taxonomy</h3>
      <pre><code class="language-php">// Add custom fields to taxonomy terms
function add_genre_custom_fields($term) {
    $color = get_term_meta($term->term_id, 'genre_color', true);
    ?>
    <tr class="form-field">
        <th scope="row">
            <label for="genre_color">Color</label>
        </th>
        <td>
            <input type="color" name="genre_color" id="genre_color"
                   value="<?php echo esc_attr($color ?: '#000000'); ?>">
            <p class="description">Choose a color for this genre</p>
        </td>
    </tr>
    <?php
}
add_action('genre_edit_form_fields', 'add_genre_custom_fields');

// Save custom field
function save_genre_custom_fields($term_id) {
    if (isset($_POST['genre_color'])) {
        update_term_meta($term_id, 'genre_color', sanitize_hex_color($_POST['genre_color']));
    }
}
add_action('edited_genre', 'save_genre_custom_fields');
add_action('create_genre', 'save_genre_custom_fields');</code></pre>

      <h3>Custom Taxonomy Columns</h3>
      <pre><code class="language-php">// Add custom columns to taxonomy admin
function add_taxonomy_columns($columns) {
    $new_columns = array();
    $new_columns['cb'] = $columns['cb'];
    $new_columns['name'] = $columns['name'];
    $new_columns['color'] = 'Color';
    $new_columns['posts'] = $columns['posts'];

    return $new_columns;
}
add_filter('manage_edit-genre_columns', 'add_taxonomy_columns');

function populate_taxonomy_columns($content, $column_name, $term_id) {
    if ($column_name == 'color') {
        $color = get_term_meta($term_id, 'genre_color', true);
        if ($color) {
            $content = '<span style="display:inline-block; width:20px; height:20px;
                        background:' . esc_attr($color) . '; border:1px solid #ddd;"></span>';
        } else {
            $content = '—';
        }
    }

    return $content;
}
add_filter('manage_genre_custom_column', 'populate_taxonomy_columns', 10, 3);</code></pre>

      <h3>Default Terms</h3>
      <pre><code class="language-php">// Set default term for taxonomy
function set_default_genre($post_id, $post) {
    // Only for published posts
    if ($post->post_status != 'publish') {
        return;
    }

    // Get taxonomy terms
    $terms = wp_get_object_terms($post_id, 'genre');

    // If no terms assigned, add default
    if (empty($terms)) {
        wp_set_object_terms($post_id, 'Uncategorized', 'genre');
    }
}
add_action('save_post', 'set_default_genre', 10, 2);</code></pre>

      <h3>Custom Permalinks for Taxonomy</h3>
      <pre><code class="language-php">// Custom rewrite rules for taxonomy archives
function custom_taxonomy_rewrites() {
    register_taxonomy('genre', 'book', array(
        'rewrite' => array(
            'slug' => 'books/genre',
            'with_front' => false,
            'hierarchical' => true
        )
    ));

    // Flush rewrite rules (only once!)
    // flush_rewrite_rules();
}
add_action('init', 'custom_taxonomy_rewrites');</code></pre>

      <h3>Query Posts by Taxonomy</h3>
      <pre><code class="language-php">// Query posts by custom taxonomy
function get_posts_by_genre($genre_slug) {
    $args = array(
        'post_type' => 'book',
        'tax_query' => array(
            array(
                'taxonomy' => 'genre',
                'field' => 'slug',
                'terms' => $genre_slug,
            ),
        ),
        'posts_per_page' => 10
    );

    return new WP_Query($args);
}

// Multiple taxonomies
function get_posts_by_multiple_taxonomies($genre, $location) {
    $args = array(
        'post_type' => 'event',
        'tax_query' => array(
            'relation' => 'AND',
            array(
                'taxonomy' => 'genre',
                'field' => 'slug',
                'terms' => $genre,
            ),
            array(
                'taxonomy' => 'location',
                'field' => 'slug',
                'terms' => $location,
            ),
        ),
    );

    return new WP_Query($args);
}</code></pre>

      <h3>Hierarchical vs Non-Hierarchical</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Feature</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Hierarchical (true)</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Non-Hierarchical (false)</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Behavior</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Like categories</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Like tags</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Parent/Child</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Yes</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">Meta Box UI</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Checkboxes</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Text input</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">URL Structure</td>
          <td style="border: 1px solid #ddd; padding: 8px;">/genre/parent/child/</td>
          <td style="border: 1px solid #ddd; padding: 8px;">/tag/term/</td>
        </tr>
      </table>

      <h3>Common Use Cases</h3>
      <ul>
        <li><strong>Products:</strong> Brands, colors, sizes, materials</li>
        <li><strong>Events:</strong> Locations, event types, organizers</li>
        <li><strong>Portfolio:</strong> Industries, services, technologies</li>
        <li><strong>Books:</strong> Genres, authors, publishers</li>
        <li><strong>Movies:</strong> Genres, actors, directors, studios</li>
        <li><strong>Recipes:</strong> Cuisines, courses, dietary restrictions</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Use lowercase, descriptive taxonomy names (e.g., 'product_type' not 'types')</li>
        <li>Always set 'show_in_rest' => true for Gutenberg support</li>
        <li>Use hierarchical = true for structured data, false for free-form tags</li>
        <li>Flush rewrite rules after registration (only once!)</li>
        <li>Keep taxonomy slugs under 32 characters</li>
        <li>Use singular names for taxonomy keys, plural for labels</li>
        <li>Don't use reserved words (category, tag, post_tag, etc.)</li>
      </ul>

      <h3>Template Files</h3>
      <p>WordPress looks for taxonomy templates in this order:</p>
      <ul>
        <li>taxonomy-{taxonomy}-{term}.php (e.g., taxonomy-genre-fiction.php)</li>
        <li>taxonomy-{taxonomy}.php (e.g., taxonomy-genre.php)</li>
        <li>taxonomy.php</li>
        <li>archive.php</li>
        <li>index.php</li>
      </ul>

      <h3>Performance Tips</h3>
      <ul>
        <li>Cache taxonomy queries with transients</li>
        <li>Use wp_get_object_terms() for better performance</li>
        <li>Avoid excessive hierarchical depth (&gt;3 levels)</li>
        <li>Index taxonomy relationships in custom tables for large sites</li>
      </ul>
    `,
    code: `add_action('init', 'register_genre_taxonomy');`,
    author: 'Shahmir Khan',
    date: '2025-01-13',
    readTime: '9 min read',
    category: 'WordPress Theme Development',
    tags: ['Taxonomies', 'Theme Development', 'Categories', 'Tags', 'Organization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 2.8+',
    seo: {
      metaTitle: 'Register Custom Taxonomies in WordPress: Complete Guide 2025',
      metaDescription: 'Create custom taxonomies in WordPress with detailed code examples. Learn to build categories, tags, and custom organization systems.',
      keywords: ['wordpress custom taxonomy', 'register taxonomy', 'custom categories wordpress', 'taxonomy wordpress', 'wordpress development'],
      canonical: '/blog/register-custom-taxonomy',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Register Custom Taxonomies",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between hierarchical and non-hierarchical taxonomies?",
        answer: "Hierarchical (true) creates category-style taxonomies with parent/child relationships and checkbox UI. Non-hierarchical (false) creates tag-style taxonomies with flat structure and text input. Use hierarchical for structured data, non-hierarchical for flexible tagging."
      },
      {
        question: "Can I add a taxonomy to multiple post types?",
        answer: "Yes! Pass an array of post types when registering: register_taxonomy('genre', array('post', 'book', 'movie'), $args). This allows the same taxonomy to organize multiple content types."
      },
      {
        question: "How do I add custom fields to taxonomy terms?",
        answer: "Use term meta functions: get_term_meta(), update_term_meta(). Hook into {taxonomy}_edit_form_fields and {taxonomy}_add_form_fields actions to add fields, then use edited_{taxonomy} and create_{taxonomy} to save values."
      },
      {
        question: "Do I need to flush rewrite rules after registering taxonomies?",
        answer: "Yes, but only once after initial registration or URL structure changes. Use register_activation_hook() for plugins or after_switch_theme for themes. Never flush on every page load—it severely impacts performance."
      },
      {
        question: "How do I query posts by multiple taxonomies?",
        answer: "Use tax_query with 'relation' parameter. Set relation to 'AND' for posts matching all taxonomies, or 'OR' for posts matching any. You can query by term ID, slug, or name using the 'field' parameter."
      }
    ]
  },
  {
    id: 23,
    slug: 'add-custom-widget-area',
    title: 'Add Custom Widget Areas (Sidebars)',
    excerpt: 'Register custom widget areas in WordPress themes to add flexible content zones throughout your site with drag-and-drop functionality.',
    content: `
      <h2>What are Widget Areas?</h2>
      <p>Widget areas (also called sidebars) are customizable sections where you can add widgets like recent posts, search, custom HTML, and more. They provide non-technical users an easy way to manage content without editing code.</p>

      <h3>Register a Single Widget Area</h3>
      <pre><code class="language-php">// Register a basic widget area
function register_custom_widget_area() {
    register_sidebar(array(
        'name' => 'Footer Widget Area',
        'id' => 'footer-widget-area',
        'description' => 'Appears in the footer section',
        'before_widget' => '<div class="widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<h3 class="widget-title">',
        'after_title' => '</h3>',
    ));
}
add_action('widgets_init', 'register_custom_widget_area');</code></pre>

      <h3>Display Widget Area in Template</h3>
      <pre><code class="language-php">// Display in your theme template
<?php if (is_active_sidebar('footer-widget-area')) : ?>
    <div class="footer-widgets">
        <?php dynamic_sidebar('footer-widget-area'); ?>
    </div>
<?php endif; ?></code></pre>

      <h3>Register Multiple Widget Areas</h3>
      <pre><code class="language-php">// Register multiple sidebars at once
function register_theme_widget_areas() {
    // Main sidebar
    register_sidebar(array(
        'name' => 'Main Sidebar',
        'id' => 'main-sidebar',
        'description' => 'Appears on blog posts and pages',
        'before_widget' => '<aside id="%1$s" class="widget %2$s">',
        'after_widget' => '</aside>',
        'before_title' => '<h2 class="widget-title">',
        'after_title' => '</h2>',
    ));

    // Footer widget areas (3 columns)
    $footer_widgets = 3;
    for ($i = 1; $i <= $footer_widgets; $i++) {
        register_sidebar(array(
            'name' => sprintf('Footer Widget Area %d', $i),
            'id' => sprintf('footer-widget-%d', $i),
            'description' => sprintf('Footer column %d', $i),
            'before_widget' => '<div class="footer-widget %2$s">',
            'after_widget' => '</div>',
            'before_title' => '<h4 class="footer-widget-title">',
            'after_title' => '</h4>',
        ));
    }

    // Shop sidebar
    register_sidebar(array(
        'name' => 'Shop Sidebar',
        'id' => 'shop-sidebar',
        'description' => 'Appears on WooCommerce pages',
        'before_widget' => '<div class="shop-widget %2$s">',
        'after_widget' => '</div>',
        'before_title' => '<h3 class="shop-widget-title">',
        'after_title' => '</h3>',
    ));
}
add_action('widgets_init', 'register_theme_widget_areas');</code></pre>

      <h3>Advanced Widget Area with Custom HTML</h3>
      <pre><code class="language-php">// Widget area with custom wrapper and schema markup
function register_advanced_widget_area() {
    register_sidebar(array(
        'name' => 'Article Sidebar',
        'id' => 'article-sidebar',
        'description' => 'Sidebar for blog articles',
        'before_widget' => '<section id="%1$s" class="widget %2$s" itemscope itemtype="https://schema.org/WPSideBar">',
        'after_widget' => '</section>',
        'before_title' => '<h3 class="widget-title" itemprop="name">',
        'after_title' => '</h3>',
    ));
}
add_action('widgets_init', 'register_advanced_widget_area');</code></pre>

      <h3>Conditional Widget Areas</h3>
      <pre><code class="language-php">// Display different widget areas based on page type
function conditional_widget_display() {
    if (is_single()) {
        // Show post sidebar on single posts
        if (is_active_sidebar('post-sidebar')) {
            dynamic_sidebar('post-sidebar');
        }
    } elseif (is_page()) {
        // Show page sidebar on pages
        if (is_active_sidebar('page-sidebar')) {
            dynamic_sidebar('page-sidebar');
        }
    } elseif (is_archive()) {
        // Show archive sidebar on archives
        if (is_active_sidebar('archive-sidebar')) {
            dynamic_sidebar('archive-sidebar');
        }
    } else {
        // Default sidebar
        if (is_active_sidebar('main-sidebar')) {
            dynamic_sidebar('main-sidebar');
        }
    }
}</code></pre>

      <h3>Widget Area with Default Content</h3>
      <pre><code class="language-php">// Display widget area with fallback content
function widget_area_with_fallback($sidebar_id) {
    if (is_active_sidebar($sidebar_id)) {
        dynamic_sidebar($sidebar_id);
    } else {
        // Fallback content when no widgets added
        ?>
        <div class="default-sidebar-content">
            <h3>Welcome!</h3>
            <p>Add widgets to this area from the WordPress admin.</p>
            <p>Go to Appearance → Widgets to customize this section.</p>
        </div>
        <?php
    }
}

// Use in template
widget_area_with_fallback('main-sidebar');</code></pre>

      <h3>Dynamic Widget Area Registration</h3>
      <pre><code class="language-php">// Register widget areas from theme options
function register_dynamic_widget_areas() {
    // Get number of footer columns from theme settings
    $footer_columns = get_theme_mod('footer_columns', 4);

    for ($i = 1; $i <= $footer_columns; $i++) {
        register_sidebar(array(
            'name' => sprintf(__('Footer Column %d', 'textdomain'), $i),
            'id' => 'footer-' . $i,
            'description' => sprintf(__('Footer column number %d', 'textdomain'), $i),
            'before_widget' => '<div class="footer-widget">',
            'after_widget' => '</div>',
            'before_title' => '<h4>',
            'after_title' => '</h4>',
        ));
    }
}
add_action('widgets_init', 'register_dynamic_widget_areas');</code></pre>

      <h3>Display Footer Columns</h3>
      <pre><code class="language-php">// Display footer widget columns in template
<footer class="site-footer">
    <div class="footer-widgets">
        <div class="footer-widgets-grid">
            <?php
            $footer_columns = get_theme_mod('footer_columns', 4);
            for ($i = 1; $i <= $footer_columns; $i++) :
                $sidebar_id = 'footer-' . $i;
                if (is_active_sidebar($sidebar_id)) :
            ?>
                <div class="footer-column">
                    <?php dynamic_sidebar($sidebar_id); ?>
                </div>
            <?php
                endif;
            endfor;
            ?>
        </div>
    </div>
</footer></code></pre>

      <h3>Widget Area Body Classes</h3>
      <pre><code class="language-php">// Add body class when sidebar is active
function sidebar_body_class($classes) {
    if (is_active_sidebar('main-sidebar')) {
        $classes[] = 'has-sidebar';
    } else {
        $classes[] = 'no-sidebar';
    }

    return $classes;
}
add_filter('body_class', 'sidebar_body_class');</code></pre>

      <h3>Custom Widget Wrapper Styling</h3>
      <pre><code class="language-css">/* CSS for widget areas */
.widget {
    margin-bottom: 30px;
    padding: 20px;
    background: #f9f9f9;
    border-radius: 5px;
}

.widget-title {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 2px solid #333;
}

.footer-widgets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
}

.footer-widget {
    color: #fff;
}

/* Responsive sidebar */
@media (max-width: 768px) {
    .has-sidebar .main-content {
        width: 100%;
    }

    .main-sidebar {
        width: 100%;
        margin-top: 30px;
    }
}</code></pre>

      <h3>Unregister Default Widget Areas</h3>
      <pre><code class="language-php">// Remove unwanted default sidebars
function remove_default_sidebars() {
    unregister_sidebar('sidebar-1');
    unregister_sidebar('sidebar-2');
}
add_action('widgets_init', 'remove_default_sidebars', 11);</code></pre>

      <h3>Widget Area Parameters</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <th style="border: 1px solid #ddd; padding: 8px;">Parameter</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Description</th>
          <th style="border: 1px solid #ddd; padding: 8px;">Required</th>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">name</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Display name in admin</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Yes</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">id</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Unique identifier (lowercase, dashes)</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Yes</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">description</td>
          <td style="border: 1px solid #ddd; padding: 8px;">Helper text in admin</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">before_widget</td>
          <td style="border: 1px solid #ddd; padding: 8px;">HTML before each widget</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">after_widget</td>
          <td style="border: 1px solid #ddd; padding: 8px;">HTML after each widget</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">before_title</td>
          <td style="border: 1px solid #ddd; padding: 8px;">HTML before widget title</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
        <tr>
          <td style="border: 1px solid #ddd; padding: 8px;">after_title</td>
          <td style="border: 1px solid #ddd; padding: 8px;">HTML after widget title</td>
          <td style="border: 1px solid #ddd; padding: 8px;">No</td>
        </tr>
      </table>

      <h3>Common Widget Area Locations</h3>
      <ul>
        <li><strong>Primary Sidebar:</strong> Main content area (blog, posts, pages)</li>
        <li><strong>Footer Widgets:</strong> Site-wide footer (typically 3-4 columns)</li>
        <li><strong>Header Widget:</strong> Above main content (call-to-action, search)</li>
        <li><strong>Shop Sidebar:</strong> E-commerce pages (filters, categories)</li>
        <li><strong>Below Content:</strong> After post content (related posts, CTA)</li>
        <li><strong>Homepage Widgets:</strong> Customizable homepage sections</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Use descriptive, unique IDs (lowercase with dashes)</li>
        <li>Include %1$s for widget ID and %2$s for widget class in before_widget</li>
        <li>Always check is_active_sidebar() before displaying</li>
        <li>Provide clear descriptions for admin users</li>
        <li>Use semantic HTML5 elements (aside, section)</li>
        <li>Keep widget wrapper HTML minimal for flexibility</li>
        <li>Register all widget areas on 'widgets_init' hook</li>
      </ul>

      <h3>Testing Widget Areas</h3>
      <p>After registering widget areas:</p>
      <ul>
        <li>Go to Appearance → Widgets in WordPress admin</li>
        <li>Verify all widget areas appear correctly</li>
        <li>Add test widgets to each area</li>
        <li>View frontend to confirm proper display</li>
        <li>Test responsive behavior on mobile</li>
        <li>Check empty state (no widgets added)</li>
      </ul>

      <h3>Common Issues</h3>
      <ul>
        <li><strong>Widget area not showing:</strong> Check is_active_sidebar() condition</li>
        <li><strong>No widgets visible:</strong> Verify dynamic_sidebar() call with correct ID</li>
        <li><strong>Broken layout:</strong> Check before/after widget HTML structure</li>
        <li><strong>Can't find in admin:</strong> Ensure widgets_init hook fires</li>
      </ul>
    `,
    code: `add_action('widgets_init', 'register_custom_widget_area');`,
    author: 'Shahmir Khan',
    date: '2025-01-13',
    readTime: '7 min read',
    category: 'WordPress Theme Development',
    tags: ['Widgets', 'Sidebars', 'Theme Development', 'Widget Areas', 'Customization'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.8+',
    seo: {
      metaTitle: 'Add Custom Widget Areas in WordPress: Complete Guide 2025',
      metaDescription: 'Register custom widget areas (sidebars) in WordPress themes. Complete code examples with best practices and styling tips.',
      keywords: ['wordpress widget areas', 'register sidebar', 'custom sidebars wordpress', 'widget area tutorial', 'wordpress theme development'],
      canonical: '/blog/add-custom-widget-area',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Custom Widget Areas (Sidebars)",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the difference between a sidebar and a widget area?",
        answer: "They're the same thing! WordPress uses register_sidebar() for historical reasons, but the term 'widget area' is more accurate since these areas can appear anywhere (header, footer, content area), not just on the side."
      },
      {
        question: "Why should I use %1$s and %2$s in before_widget?",
        answer: "%1$s is replaced with the widget's unique ID, and %2$s with the widget's CSS class name. This allows individual styling for each widget instance and provides semantic HTML structure."
      },
      {
        question: "How many widget areas should I create?",
        answer: "Create widget areas where content flexibility is needed. Common setups: 1 main sidebar, 3-4 footer columns, 1 below-content area. Avoid creating too many—focus on areas users will actually customize."
      },
      {
        question: "Can I have different sidebars for different pages?",
        answer: "Yes! Use conditional tags (is_single(), is_page(), is_archive()) to display different widget areas based on page type. Or use plugins like Widget Logic for per-page widget control."
      },
      {
        question: "What happens if no widgets are added to a widget area?",
        answer: "is_active_sidebar() returns false when empty, so you can conditionally hide the area or show placeholder content. Always wrap dynamic_sidebar() in an is_active_sidebar() check to avoid empty widget area containers."
      }
    ]
  },
  {
    id: 24,
    slug: 'enqueue-scripts-styles',
    title: 'Properly Enqueue Scripts and Styles',
    excerpt: 'Learn the correct way to add CSS and JavaScript files in WordPress using wp_enqueue_script() and wp_enqueue_style() functions.',
    content: `
      <h2>Why Proper Enqueueing Matters</h2>
      <p>WordPress provides a sophisticated system for loading CSS and JavaScript files that prevents conflicts, manages dependencies, and optimizes loading order. Never hard-code script and style tags in your theme - always use the enqueueing system.</p>

      <h3>Benefits of WordPress Enqueue System</h3>
      <ul>
        <li><strong>Dependency Management:</strong> Automatically loads required libraries in the correct order</li>
        <li><strong>Conflict Prevention:</strong> Prevents duplicate loading of the same script/style</li>
        <li><strong>Version Control:</strong> Manages cache busting with version parameters</li>
        <li><strong>Conditional Loading:</strong> Load assets only where needed</li>
        <li><strong>CDN Support:</strong> Easy integration with external resources</li>
        <li><strong>Performance:</strong> Control whether scripts load in header or footer</li>
      </ul>

      <h2>Basic Script Enqueueing</h2>
      <p>The fundamental way to enqueue a script in WordPress:</p>
      <pre><code>function my_theme_enqueue_scripts() {
    // Enqueue custom JavaScript file
    wp_enqueue_script(
        'my-custom-script',                          // Handle (unique identifier)
        get_template_directory_uri() . '/js/custom.js', // File path
        array('jquery'),                             // Dependencies
        '1.0.0',                                     // Version
        true                                          // Load in footer (true) or header (false)
    );
}
add_action('wp_enqueue_scripts', 'my_theme_enqueue_scripts');</code></pre>

      <h2>Basic Style Enqueueing</h2>
      <p>Enqueuing stylesheets works similarly:</p>
      <pre><code>function my_theme_enqueue_styles() {
    // Enqueue main stylesheet
    wp_enqueue_style(
        'my-theme-style',                           // Handle
        get_stylesheet_uri(),                       // File path
        array(),                                    // Dependencies
        wp_get_theme()->get('Version')             // Version from style.css
    );

    // Enqueue custom stylesheet
    wp_enqueue_style(
        'custom-style',
        get_template_directory_uri() . '/css/custom.css',
        array('my-theme-style'),                   // Load after main stylesheet
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'my_theme_enqueue_styles');</code></pre>

      <h2>Complete Theme Enqueueing Example</h2>
      <p>A comprehensive example for a production theme:</p>
      <pre><code>function mytheme_enqueue_assets() {
    // Get theme version for cache busting
    $theme_version = wp_get_theme()->get('Version');

    // === STYLES ===

    // Main stylesheet
    wp_enqueue_style('mytheme-style', get_stylesheet_uri(), array(), $theme_version);

    // Google Fonts
    wp_enqueue_style(
        'mytheme-fonts',
        'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap',
        array(),
        null  // No version for external resources
    );

    // Custom CSS
    wp_enqueue_style(
        'mytheme-custom',
        get_template_directory_uri() . '/assets/css/custom.css',
        array('mytheme-style'),
        $theme_version
    );

    // === SCRIPTS ===

    // jQuery (WordPress includes it, just ensure it's loaded)
    wp_enqueue_script('jquery');

    // Main theme JavaScript
    wp_enqueue_script(
        'mytheme-main',
        get_template_directory_uri() . '/assets/js/main.js',
        array('jquery'),
        $theme_version,
        true  // Load in footer
    );

    // Navigation script
    wp_enqueue_script(
        'mytheme-navigation',
        get_template_directory_uri() . '/assets/js/navigation.js',
        array('jquery'),
        $theme_version,
        true
    );

    // Comment reply script (only on singular posts/pages with comments)
    if (is_singular() && comments_open() && get_option('thread_comments')) {
        wp_enqueue_script('comment-reply');
    }
}
add_action('wp_enqueue_scripts', 'mytheme_enqueue_assets');</code></pre>

      <h2>Conditional Loading</h2>
      <p>Load assets only where they're needed to improve performance:</p>
      <pre><code>function conditional_enqueue_assets() {
    // Only on homepage
    if (is_front_page()) {
        wp_enqueue_script('homepage-slider', get_template_directory_uri() . '/js/slider.js', array('jquery'), '1.0', true);
        wp_enqueue_style('slider-style', get_template_directory_uri() . '/css/slider.css', array(), '1.0');
    }

    // Only on single posts
    if (is_single()) {
        wp_enqueue_script('post-sharing', get_template_directory_uri() . '/js/sharing.js', array(), '1.0', true);
    }

    // Only on WooCommerce pages
    if (class_exists('WooCommerce') && (is_woocommerce() || is_cart() || is_checkout())) {
        wp_enqueue_style('woo-custom', get_template_directory_uri() . '/css/woocommerce.css', array(), '1.0');
    }

    // Only on contact page
    if (is_page('contact')) {
        wp_enqueue_script('google-maps', 'https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY', array(), null, true);
    }

    // Only for logged-in users
    if (is_user_logged_in()) {
        wp_enqueue_style('member-dashboard', get_template_directory_uri() . '/css/dashboard.css', array(), '1.0');
    }
}
add_action('wp_enqueue_scripts', 'conditional_enqueue_assets');</code></pre>

      <h2>Inline Scripts and Styles</h2>
      <p>Add inline code that depends on an enqueued file:</p>
      <pre><code>function add_inline_scripts() {
    // Enqueue the main script first
    wp_enqueue_script('my-script', get_template_directory_uri() . '/js/script.js', array('jquery'), '1.0', true);

    // Add inline script AFTER the enqueued file
    $inline_script = "
        jQuery(document).ready(function($) {
            console.log('Script loaded!');
            // Pass PHP data to JavaScript
            var siteData = {
                ajaxUrl: '" . admin_url('admin-ajax.php') . "',
                nonce: '" . wp_create_nonce('my-nonce') . "',
                userId: " . get_current_user_id() . "
            };
        });
    ";
    wp_add_inline_script('my-script', $inline_script);

    // Add inline CSS
    wp_enqueue_style('my-style', get_template_directory_uri() . '/css/style.css', array(), '1.0');
    $custom_css = "
        .custom-element {
            background-color: " . get_theme_mod('custom_bg_color', '#ffffff') . ";
        }
    ";
    wp_add_inline_style('my-style', $custom_css);
}
add_action('wp_enqueue_scripts', 'add_inline_scripts');</code></pre>

      <h2>Localizing Scripts (Pass PHP to JavaScript)</h2>
      <p>The proper way to pass PHP variables to JavaScript:</p>
      <pre><code>function localize_script_data() {
    wp_enqueue_script('my-ajax-script', get_template_directory_uri() . '/js/ajax.js', array('jquery'), '1.0', true);

    // Create data array
    $script_data = array(
        'ajaxUrl'    => admin_url('admin-ajax.php'),
        'nonce'      => wp_create_nonce('my_ajax_nonce'),
        'postId'     => get_the_ID(),
        'userId'     => get_current_user_id(),
        'siteUrl'    => home_url(),
        'themePath'  => get_template_directory_uri(),
        'isLoggedIn' => is_user_logged_in(),
        'strings'    => array(
            'loading' => __('Loading...', 'textdomain'),
            'error'   => __('An error occurred', 'textdomain')
        )
    );

    // Localize the script
    wp_localize_script('my-ajax-script', 'myScriptData', $script_data);
}
add_action('wp_enqueue_scripts', 'localize_script_data');

// In your JavaScript file (ajax.js):
// Access data like: myScriptData.ajaxUrl, myScriptData.nonce, etc.</code></pre>

      <h2>Dequeue and Deregister Scripts</h2>
      <p>Remove unwanted scripts loaded by plugins or themes:</p>
      <pre><code>function remove_unwanted_scripts() {
    // Dequeue a script (can be re-enqueued later)
    wp_dequeue_script('jquery-migrate');

    // Deregister a script (completely removes it)
    wp_deregister_script('wp-embed');

    // Remove emoji scripts
    remove_action('wp_head', 'print_emoji_detection_script', 7);
    remove_action('wp_print_styles', 'print_emoji_styles');

    // Dequeue WooCommerce scripts on non-shop pages
    if (!is_woocommerce() && !is_cart() && !is_checkout()) {
        wp_dequeue_style('woocommerce-general');
        wp_dequeue_style('woocommerce-layout');
        wp_dequeue_style('woocommerce-smallscreen');
    }
}
add_action('wp_enqueue_scripts', 'remove_unwanted_scripts', 100); // High priority to run later</code></pre>

      <h2>Admin Scripts and Styles</h2>
      <p>Enqueue assets for the WordPress admin area:</p>
      <pre><code>function admin_enqueue_assets($hook) {
    // Global admin assets
    wp_enqueue_style('admin-custom', get_template_directory_uri() . '/admin/css/admin.css', array(), '1.0');

    // Only on specific admin pages
    if ('post.php' === $hook || 'post-new.php' === $hook) {
        wp_enqueue_script('post-editor-enhancements', get_template_directory_uri() . '/admin/js/editor.js', array('jquery'), '1.0', true);
    }

    // Only on theme options page
    if ('appearance_page_theme-options' === $hook) {
        wp_enqueue_style('wp-color-picker');
        wp_enqueue_script('theme-options', get_template_directory_uri() . '/admin/js/options.js', array('wp-color-picker'), '1.0', true);
    }

    // Enqueue media uploader
    if ('post.php' === $hook) {
        wp_enqueue_media();
    }
}
add_action('admin_enqueue_scripts', 'admin_enqueue_assets');</code></pre>

      <h2>Script Attributes (async, defer, module)</h2>
      <p>Add modern script attributes for better performance:</p>
      <pre><code>// Add defer attribute to scripts
function add_defer_attribute($tag, $handle) {
    $defer_scripts = array('my-script', 'analytics');

    if (in_array($handle, $defer_scripts)) {
        return str_replace(' src', ' defer src', $tag);
    }

    return $tag;
}
add_filter('script_loader_tag', 'add_defer_attribute', 10, 2);

// Add async attribute
function add_async_attribute($tag, $handle) {
    $async_scripts = array('google-analytics', 'facebook-pixel');

    if (in_array($handle, $async_scripts)) {
        return str_replace(' src', ' async src', $tag);
    }

    return $tag;
}
add_filter('script_loader_tag', 'add_async_attribute', 10, 2);

// Add type="module" for ES6 modules
function add_module_attribute($tag, $handle) {
    if ('my-module-script' === $handle) {
        return str_replace(' src', ' type="module" src', $tag);
    }
    return $tag;
}
add_filter('script_loader_tag', 'add_module_attribute', 10, 2);</code></pre>

      <h2>Advanced: Resource Hints</h2>
      <p>Optimize loading with DNS prefetch, preconnect, and preload:</p>
      <pre><code>function add_resource_hints($urls, $relation_type) {
    if ('dns-prefetch' === $relation_type) {
        $urls[] = '//fonts.googleapis.com';
        $urls[] = '//fonts.gstatic.com';
        $urls[] = '//www.google-analytics.com';
    }

    if ('preconnect' === $relation_type) {
        $urls[] = 'https://fonts.gstatic.com';
    }

    return $urls;
}
add_filter('wp_resource_hints', 'add_resource_hints', 10, 2);

// Preload critical assets
function preload_critical_assets() {
    echo '<link rel="preload" href="' . get_template_directory_uri() . '/assets/fonts/main-font.woff2" as="font" type="font/woff2" crossorigin>';
    echo '<link rel="preload" href="' . get_template_directory_uri() . '/assets/css/critical.css" as="style">';
}
add_action('wp_head', 'preload_critical_assets', 1);</code></pre>

      <h2>Best Practices Summary</h2>
      <table>
        <thead>
          <tr>
            <th>Practice</th>
            <th>Why It Matters</th>
            <th>Example</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Use unique handles</td>
            <td>Prevents conflicts with plugins</td>
            <td>'mytheme-main' not just 'main'</td>
          </tr>
          <tr>
            <td>Declare dependencies</td>
            <td>Ensures load order</td>
            <td>array('jquery') for jQuery-dependent scripts</td>
          </tr>
          <tr>
            <td>Version your assets</td>
            <td>Cache busting</td>
            <td>Use theme version or filemtime()</td>
          </tr>
          <tr>
            <td>Load scripts in footer</td>
            <td>Better page load performance</td>
            <td>Set $in_footer parameter to true</td>
          </tr>
          <tr>
            <td>Use conditional loading</td>
            <td>Reduces unnecessary HTTP requests</td>
            <td>is_front_page(), is_single(), etc.</td>
          </tr>
          <tr>
            <td>Use wp_localize_script()</td>
            <td>Pass PHP to JS safely</td>
            <td>For AJAX URLs, nonces, settings</td>
          </tr>
          <tr>
            <td>Never hard-code tags</td>
            <td>Breaks WordPress ecosystem</td>
            <td>Use enqueue functions, not &lt;script&gt; tags</td>
          </tr>
        </tbody>
      </table>

      <h2>Common Mistakes to Avoid</h2>
      <ul>
        <li><strong>Hard-coding scripts in header.php:</strong> Bypasses WordPress's dependency management</li>
        <li><strong>Not checking if script exists:</strong> Can cause errors if plugin is deactivated</li>
        <li><strong>Loading everything everywhere:</strong> Kills performance - use conditional loading</li>
        <li><strong>Forgetting dependencies:</strong> Scripts may fail if jQuery loads after your code</li>
        <li><strong>Not versioning assets:</strong> Users see cached old versions after updates</li>
        <li><strong>Using document.write():</strong> Breaks async/defer loading</li>
        <li><strong>Enqueuing in the wrong hook:</strong> Use wp_enqueue_scripts for frontend, admin_enqueue_scripts for backend</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Properly enqueuing assets can reduce page load time by 30-50%</strong> through dependency optimization, conditional loading, and proper script placement. Always load JavaScript in the footer when possible, and only load assets where they're actually needed.</p>
    `,
    code: `function my_theme_enqueue_scripts() {
    // Enqueue CSS
    wp_enqueue_style(
        'my-theme-style',
        get_stylesheet_uri(),
        array(),
        wp_get_theme()->get('Version')
    );

    // Enqueue JavaScript
    wp_enqueue_script(
        'my-custom-script',
        get_template_directory_uri() . '/js/custom.js',
        array('jquery'),
        '1.0.0',
        true  // Load in footer
    );

    // Localize script with data
    wp_localize_script('my-custom-script', 'myData', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce'   => wp_create_nonce('my_nonce')
    ));
}
add_action('wp_enqueue_scripts', 'my_theme_enqueue_scripts');`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '8 min read',
    category: 'WordPress Theme Development',
    tags: ['JavaScript', 'CSS', 'wp_enqueue', 'Performance', 'Dependencies'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 5.0+',
    seo: {
      metaTitle: 'How to Properly Enqueue Scripts and Styles in WordPress | Complete Guide',
      metaDescription: 'Master WordPress script and style enqueueing with wp_enqueue_script() and wp_enqueue_style(). Learn dependency management, conditional loading, and performance optimization.',
      keywords: ['wordpress enqueue scripts', 'wp_enqueue_script', 'wp_enqueue_style', 'wordpress add javascript', 'wordpress add css', 'wordpress dependencies', 'wordpress localize script', 'wordpress performance'],
      canonical: '/blog/enqueue-scripts-styles',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Properly Enqueue Scripts and Styles in WordPress",
        "description": "Comprehensive guide to WordPress script and style enqueueing system for better performance and conflict prevention",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between wp_enqueue_script() and wp_register_script()?",
        answer: "wp_register_script() only registers a script for later use, while wp_enqueue_script() both registers AND queues it for output. You can register scripts early (in init) and enqueue them conditionally later. However, wp_enqueue_script() can do both in one step, so you often don't need wp_register_script() unless you're registering scripts that might be used by other plugins/themes."
      },
      {
        question: "Should I load scripts in the header or footer?",
        answer: "Always load scripts in the footer (set $in_footer parameter to true) unless they're absolutely critical for above-the-fold rendering. Footer-loaded scripts don't block page rendering, resulting in faster perceived load times. Only load in header if the script must run before page content renders, like modernizr or critical configuration scripts."
      },
      {
        question: "How do I pass PHP variables to JavaScript in WordPress?",
        answer: "Use wp_localize_script() after enqueuing your script. This creates a JavaScript object with your PHP data. Example: wp_localize_script('my-script', 'myData', array('ajaxUrl' => admin_url('admin-ajax.php'))). In your JS file, access it as myData.ajaxUrl. Never echo JavaScript variables directly in templates."
      },
      {
        question: "Why shouldn't I use <script> tags directly in my theme files?",
        answer: "Hard-coding script tags bypasses WordPress's dependency management, can cause conflicts with plugins, prevents version control, breaks caching optimization, and doesn't allow other plugins to properly dequeue or modify your scripts. Always use wp_enqueue_script() in the wp_enqueue_scripts hook for proper integration with the WordPress ecosystem."
      },
      {
        question: "How can I conditionally load scripts only on specific pages?",
        answer: "Use WordPress conditional tags inside your enqueue function. For example: if (is_front_page()) { wp_enqueue_script('slider', ...) } or if (is_single()) { wp_enqueue_script('sharing', ...) }. This prevents unnecessary HTTP requests on pages where the scripts aren't needed, significantly improving performance."
      }
    ]
  },
  {
    id: 25,
    slug: 'add-theme-support',
    title: 'Enable WordPress Theme Features',
    excerpt: 'Use add_theme_support() to enable powerful WordPress features like post thumbnails, custom logos, HTML5 markup, and more in your theme.',
    content: `
      <h2>Understanding Theme Support</h2>
      <p>WordPress includes many optional features that themes must explicitly enable using the add_theme_support() function. This function tells WordPress that your theme is ready to handle specific functionality, from basic features like post thumbnails to advanced capabilities like block editor enhancements.</p>

      <h3>Why Use Theme Support?</h3>
      <ul>
        <li><strong>Feature Control:</strong> Enable only the features your theme actually needs</li>
        <li><strong>Performance:</strong> Avoid loading unnecessary functionality</li>
        <li><strong>Standards:</strong> Implement WordPress best practices and modern standards</li>
        <li><strong>Block Editor:</strong> Unlock advanced Gutenberg capabilities</li>
        <li><strong>User Experience:</strong> Provide expected WordPress functionality</li>
      </ul>

      <h2>Basic Theme Support Setup</h2>
      <p>All theme support declarations go in your functions.php file, hooked to after_setup_theme:</p>
      <pre><code>function mytheme_setup() {
    // Post thumbnails (featured images)
    add_theme_support('post-thumbnails');

    // Automatic feed links
    add_theme_support('automatic-feed-links');

    // Let WordPress manage the document title
    add_theme_support('title-tag');

    // HTML5 markup
    add_theme_support('html5', array(
        'search-form',
        'comment-form',
        'comment-list',
        'gallery',
        'caption',
        'style',
        'script'
    ));

    // Custom logo
    add_theme_support('custom-logo', array(
        'height'      => 100,
        'width'       => 400,
        'flex-height' => true,
        'flex-width'  => true
    ));
}
add_action('after_setup_theme', 'mytheme_setup');</code></pre>

      <h2>Essential Theme Features</h2>

      <h3>1. Post Thumbnails (Featured Images)</h3>
      <pre><code>// Basic post thumbnail support
add_theme_support('post-thumbnails');

// For specific post types only
add_theme_support('post-thumbnails', array('post', 'page', 'portfolio'));

// Set custom thumbnail sizes
add_image_size('thumbnail-large', 800, 600, true);  // Hard crop
add_image_size('banner', 1200, 400, false);         // Proportional resize
add_image_size('square', 400, 400, true);           // Perfect square

// Usage in templates:
// the_post_thumbnail('thumbnail-large');</code></pre>

      <h3>2. Title Tag Management</h3>
      <pre><code>// Let WordPress handle the <title> tag
add_theme_support('title-tag');

// Remove the <title> tag from header.php - WordPress adds it automatically
// This enables SEO plugins to manage the title properly</code></pre>

      <h3>3. HTML5 Support</h3>
      <pre><code>// Enable modern HTML5 markup for WordPress-generated elements
add_theme_support('html5', array(
    'search-form',      // Search form
    'comment-form',     // Comment form
    'comment-list',     // Comment list
    'gallery',          // Gallery shortcode
    'caption',          // Image captions
    'style',            // Inline style tags
    'script',           // Inline script tags
    'navigation-widgets' // Navigation widget
));

// Benefits: Cleaner markup, better accessibility, modern standards</code></pre>

      <h3>4. Custom Logo</h3>
      <pre><code>add_theme_support('custom-logo', array(
    'height'      => 100,
    'width'       => 400,
    'flex-height' => true,      // Allow any height
    'flex-width'  => true,       // Allow any width
    'header-text' => array('site-title', 'site-description'),
    'unlink-homepage-logo' => true  // Don't link logo on homepage
));

// Display in template:
// if (has_custom_logo()) {
//     the_custom_logo();
// }</code></pre>

      <h3>5. Custom Background</h3>
      <pre><code>add_theme_support('custom-background', array(
    'default-color'      => 'ffffff',
    'default-image'      => get_template_directory_uri() . '/images/bg.jpg',
    'default-repeat'     => 'no-repeat',
    'default-position-x' => 'center',
    'default-position-y' => 'top',
    'default-size'       => 'cover',
    'default-attachment' => 'fixed'
));</code></pre>

      <h3>6. Custom Header</h3>
      <pre><code>add_theme_support('custom-header', array(
    'default-image'      => get_template_directory_uri() . '/images/header.jpg',
    'width'              => 1920,
    'height'             => 400,
    'flex-width'         => true,
    'flex-height'        => true,
    'header-text'        => true,
    'default-text-color' => '000000'
));

// Register default header images
register_default_headers(array(
    'header1' => array(
        'url'           => get_template_directory_uri() . '/images/header1.jpg',
        'thumbnail_url' => get_template_directory_uri() . '/images/header1-thumb.jpg',
        'description'   => __('Header Image 1', 'textdomain')
    )
));</code></pre>

      <h2>Block Editor (Gutenberg) Support</h2>

      <h3>Wide and Full Width Blocks</h3>
      <pre><code>// Enable wide and full alignment options
add_theme_support('align-wide');

// Requires CSS in your theme:
// .alignwide { max-width: 1200px; }
// .alignfull { width: 100vw; margin-left: calc(50% - 50vw); }</code></pre>

      <h3>Editor Color Palette</h3>
      <pre><code>add_theme_support('editor-color-palette', array(
    array(
        'name'  => __('Primary Color', 'textdomain'),
        'slug'  => 'primary',
        'color' => '#007bff'
    ),
    array(
        'name'  => __('Secondary Color', 'textdomain'),
        'slug'  => 'secondary',
        'color' => '#6c757d'
    ),
    array(
        'name'  => __('Dark Gray', 'textdomain'),
        'slug'  => 'dark-gray',
        'color' => '#333333'
    ),
    array(
        'name'  => __('Light Gray', 'textdomain'),
        'slug'  => 'light-gray',
        'color' => '#f8f9fa'
    )
));

// Disable custom colors (force palette only)
add_theme_support('disable-custom-colors');</code></pre>

      <h3>Editor Font Sizes</h3>
      <pre><code>add_theme_support('editor-font-sizes', array(
    array(
        'name' => __('Small', 'textdomain'),
        'size' => 14,
        'slug' => 'small'
    ),
    array(
        'name' => __('Regular', 'textdomain'),
        'size' => 16,
        'slug' => 'regular'
    ),
    array(
        'name' => __('Large', 'textdomain'),
        'size' => 24,
        'slug' => 'large'
    ),
    array(
        'name' => __('Huge', 'textdomain'),
        'size' => 36,
        'slug' => 'huge'
    )
));

// Disable custom font sizes
add_theme_support('disable-custom-font-sizes');</code></pre>

      <h3>Editor Styles</h3>
      <pre><code>// Load editor stylesheet
add_theme_support('editor-styles');

// Add stylesheet for block editor
add_editor_style('editor-style.css');

// Or multiple stylesheets
add_editor_style(array('editor-style.css', 'custom-fonts.css'));</code></pre>

      <h3>Responsive Embeds</h3>
      <pre><code>// Make embeds responsive (YouTube, Vimeo, etc.)
add_theme_support('responsive-embeds');</code></pre>

      <h2>Post Formats</h2>
      <pre><code>// Enable post formats
add_theme_support('post-formats', array(
    'aside',   // Short note or update
    'gallery', // Image gallery
    'link',    // Link to another site
    'image',   // Single image
    'quote',   // Quotation
    'status',  // Short status update (Twitter-like)
    'video',   // Single video
    'audio',   // Audio file
    'chat'     // Chat transcript
));

// Check format in template:
// if (has_post_format('video')) {
//     // Display video format
// }</code></pre>

      <h2>Complete Modern Theme Setup</h2>
      <p>A comprehensive example for a modern WordPress theme:</p>
      <pre><code>function mytheme_setup() {
    // === ESSENTIAL FEATURES ===

    // Load text domain for translations
    load_theme_textdomain('mytheme', get_template_directory() . '/languages');

    // Automatic feed links
    add_theme_support('automatic-feed-links');

    // Let WordPress handle title tag
    add_theme_support('title-tag');

    // Post thumbnails
    add_theme_support('post-thumbnails');
    set_post_thumbnail_size(825, 510, true);
    add_image_size('mytheme-featured', 1200, 630, true);
    add_image_size('mytheme-thumbnail', 350, 233, true);

    // HTML5 support
    add_theme_support('html5', array(
        'search-form',
        'comment-form',
        'comment-list',
        'gallery',
        'caption',
        'style',
        'script',
        'navigation-widgets'
    ));

    // === CUSTOMIZATION ===

    // Custom logo
    add_theme_support('custom-logo', array(
        'height'      => 90,
        'width'       => 400,
        'flex-height' => true,
        'flex-width'  => true
    ));

    // Custom background
    add_theme_support('custom-background', array(
        'default-color' => 'ffffff'
    ));

    // Refresh widgets
    add_theme_support('customize-selective-refresh-widgets');

    // === BLOCK EDITOR ===

    // Wide alignment
    add_theme_support('align-wide');

    // Responsive embeds
    add_theme_support('responsive-embeds');

    // Editor styles
    add_theme_support('editor-styles');
    add_editor_style('editor-style.css');

    // Custom color palette
    add_theme_support('editor-color-palette', array(
        array('name' => __('Primary', 'mytheme'), 'slug' => 'primary', 'color' => '#007bff'),
        array('name' => __('Secondary', 'mytheme'), 'slug' => 'secondary', 'color' => '#6c757d'),
        array('name' => __('Success', 'mytheme'), 'slug' => 'success', 'color' => '#28a745'),
        array('name' => __('Danger', 'mytheme'), 'slug' => 'danger', 'color' => '#dc3545'),
        array('name' => __('Light', 'mytheme'), 'slug' => 'light', 'color' => '#f8f9fa'),
        array('name' => __('Dark', 'mytheme'), 'slug' => 'dark', 'color' => '#343a40')
    ));

    // Custom font sizes
    add_theme_support('editor-font-sizes', array(
        array('name' => __('Small', 'mytheme'), 'size' => 14, 'slug' => 'small'),
        array('name' => __('Normal', 'mytheme'), 'size' => 16, 'slug' => 'normal'),
        array('name' => __('Medium', 'mytheme'), 'size' => 20, 'slug' => 'medium'),
        array('name' => __('Large', 'mytheme'), 'size' => 28, 'slug' => 'large'),
        array('name' => __('Huge', 'mytheme'), 'size' => 36, 'slug' => 'huge')
    ));

    // === WooCommerce (if plugin active) ===
    if (class_exists('WooCommerce')) {
        add_theme_support('woocommerce');
        add_theme_support('wc-product-gallery-zoom');
        add_theme_support('wc-product-gallery-lightbox');
        add_theme_support('wc-product-gallery-slider');
    }
}
add_action('after_setup_theme', 'mytheme_setup');</code></pre>

      <h2>Checking Theme Support</h2>
      <pre><code>// Check if a feature is supported
if (current_theme_supports('post-thumbnails')) {
    // Feature is enabled
}

// Get support parameters
$args = get_theme_support('custom-logo');

// Remove theme support
remove_theme_support('custom-header');

// Check specific post type support
if (post_type_supports('page', 'thumbnail')) {
    // Pages support thumbnails
}</code></pre>

      <h2>All Available Theme Support Features</h2>
      <table>
        <thead>
          <tr>
            <th>Feature</th>
            <th>Purpose</th>
            <th>Since Version</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>post-thumbnails</td>
            <td>Featured images for posts</td>
            <td>2.9</td>
          </tr>
          <tr>
            <td>automatic-feed-links</td>
            <td>RSS feed links in head</td>
            <td>3.0</td>
          </tr>
          <tr>
            <td>title-tag</td>
            <td>Let WordPress manage title tag</td>
            <td>4.1</td>
          </tr>
          <tr>
            <td>html5</td>
            <td>HTML5 markup for core features</td>
            <td>3.6</td>
          </tr>
          <tr>
            <td>custom-logo</td>
            <td>Site logo uploader</td>
            <td>4.5</td>
          </tr>
          <tr>
            <td>custom-background</td>
            <td>Background customization</td>
            <td>3.4</td>
          </tr>
          <tr>
            <td>custom-header</td>
            <td>Header image customization</td>
            <td>3.4</td>
          </tr>
          <tr>
            <td>post-formats</td>
            <td>Special post formats</td>
            <td>3.1</td>
          </tr>
          <tr>
            <td>align-wide</td>
            <td>Wide/full block alignment</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>editor-styles</td>
            <td>Block editor styling</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>responsive-embeds</td>
            <td>Responsive video embeds</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>editor-color-palette</td>
            <td>Custom editor colors</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>editor-font-sizes</td>
            <td>Custom editor font sizes</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>wp-block-styles</td>
            <td>Default block styles</td>
            <td>5.0</td>
          </tr>
          <tr>
            <td>widgets</td>
            <td>Legacy widgets support</td>
            <td>2.2</td>
          </tr>
          <tr>
            <td>menus</td>
            <td>Custom navigation menus</td>
            <td>3.0</td>
          </tr>
        </tbody>
      </table>

      <h2>Best Practices</h2>
      <ul>
        <li><strong>Hook to after_setup_theme:</strong> Always add theme support in this hook, not directly in functions.php</li>
        <li><strong>Enable only what you need:</strong> Don't blindly enable all features - consider your theme's design</li>
        <li><strong>Check requirements:</strong> Some features require corresponding CSS/template support</li>
        <li><strong>Test thoroughly:</strong> Ensure enabled features work properly in your theme</li>
        <li><strong>Document features:</strong> Let users know which WordPress features your theme supports</li>
        <li><strong>Consider child themes:</strong> Make sure features work if a child theme is used</li>
        <li><strong>Block editor first:</strong> For modern themes, prioritize block editor features</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Minimal performance impact</strong> when used correctly. Theme support declarations are simple feature flags that don't load additional code unless the feature is actually used. However, enabling unused features can add unnecessary admin UI elements.</p>
    `,
    code: `function mytheme_setup() {
    // Essential features
    add_theme_support('title-tag');
    add_theme_support('post-thumbnails');
    add_theme_support('automatic-feed-links');

    // HTML5 support
    add_theme_support('html5', array(
        'search-form',
        'comment-form',
        'comment-list',
        'gallery',
        'caption'
    ));

    // Custom logo
    add_theme_support('custom-logo', array(
        'height'      => 100,
        'width'       => 400,
        'flex-height' => true,
        'flex-width'  => true
    ));

    // Block editor features
    add_theme_support('align-wide');
    add_theme_support('editor-styles');
    add_theme_support('responsive-embeds');
}
add_action('after_setup_theme', 'mytheme_setup');`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '7 min read',
    category: 'WordPress Theme Development',
    tags: ['Theme Support', 'Features', 'add_theme_support', 'Gutenberg', 'Block Editor'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 5.0+',
    seo: {
      metaTitle: 'WordPress add_theme_support() Complete Guide | Enable Theme Features',
      metaDescription: 'Learn how to use add_theme_support() to enable WordPress features like post thumbnails, custom logos, HTML5, block editor enhancements, and more in your theme.',
      keywords: ['wordpress theme support', 'add_theme_support', 'wordpress post thumbnails', 'wordpress custom logo', 'wordpress block editor', 'wordpress theme features', 'gutenberg support'],
      canonical: '/blog/add-theme-support',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "WordPress Theme Support - Complete Guide to add_theme_support()",
        "description": "Complete guide to enabling WordPress theme features using add_theme_support() function",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What is the difference between add_theme_support() and add_post_type_support()?",
        answer: "add_theme_support() enables features at the theme level (like post thumbnails, custom logos, HTML5 markup), while add_post_type_support() adds specific features to post types (like 'thumbnail', 'editor', 'comments'). Theme support enables features globally, while post type support is more granular and targets specific content types."
      },
      {
        question: "When should I use the after_setup_theme hook for theme support?",
        answer: "Always use after_setup_theme for add_theme_support() calls. This hook fires before init and allows both parent and child themes to register features. Don't call add_theme_support() directly in functions.php outside this hook, as it may cause compatibility issues with child themes and some WordPress core functionality."
      },
      {
        question: "Do I need CSS for block editor features like align-wide?",
        answer: "Yes, enabling block editor features like align-wide only adds the UI options in the editor. You must add corresponding CSS to your theme to properly display these features on the frontend. For example, .alignwide and .alignfull classes need max-width and width styles to function correctly."
      },
      {
        question: "Can I disable theme support that was added by a parent theme?",
        answer: "Yes, use remove_theme_support('feature-name') in your child theme's functions.php, also hooked to after_setup_theme but with a higher priority (like 11). Example: add_action('after_setup_theme', 'child_theme_remove_features', 11); This allows child themes to disable features they don't want to support."
      },
      {
        question: "What happens if I don't enable title-tag support?",
        answer: "If you don't enable title-tag support, you must manually add the <title> tag in your header.php file. This is the old method and is not recommended because it prevents SEO plugins from properly managing page titles. Always use add_theme_support('title-tag') and let WordPress handle the title tag automatically."
      }
    ]
  },
  {
    id: 26,
    slug: 'register-navigation-menu',
    title: 'Register Custom Navigation Menus',
    excerpt: 'Learn how to register and display custom navigation menus in WordPress using register_nav_menus() and wp_nav_menu() functions.',
    content: `
      <h2>WordPress Navigation Menu System</h2>
      <p>WordPress provides a powerful menu system that allows users to create custom navigation menus through the admin interface. As a theme developer, you register menu locations where these menus can be displayed, giving site administrators full control over their navigation structure.</p>

      <h3>Benefits of Custom Menus</h3>
      <ul>
        <li><strong>User Control:</strong> Non-technical users can manage navigation without touching code</li>
        <li><strong>Flexibility:</strong> Support multiple menu locations (header, footer, mobile, etc.)</li>
        <li><strong>Hierarchy:</strong> Built-in support for nested menu items</li>
        <li><strong>Customization:</strong> Add custom classes, icons, and attributes</li>
        <li><strong>Accessibility:</strong> Built-in ARIA attributes and keyboard navigation</li>
      </ul>

      <h2>Basic Menu Registration</h2>
      <p>Register menu locations in your theme's functions.php:</p>
      <pre><code>function mytheme_register_menus() {
    register_nav_menus(array(
        'primary'   => __('Primary Menu', 'mytheme'),
        'footer'    => __('Footer Menu', 'mytheme')
    ));
}
add_action('after_setup_theme', 'mytheme_register_menus');</code></pre>

      <h2>Displaying Menus in Templates</h2>
      <p>Use wp_nav_menu() to display registered menus:</p>
      <pre><code><!-- Basic menu display -->
<?php
wp_nav_menu(array(
    'theme_location' => 'primary',
    'container'      => 'nav',
    'container_class' => 'main-navigation',
    'menu_class'     => 'menu',
    'fallback_cb'    => false
));
?></code></pre>

      <h2>Complete Menu Registration Example</h2>
      <p>Register multiple menu locations for a full-featured theme:</p>
      <pre><code>function mytheme_register_navigation_menus() {
    register_nav_menus(array(
        'primary'   => esc_html__('Primary Menu', 'mytheme'),
        'secondary' => esc_html__('Secondary Menu', 'mytheme'),
        'footer'    => esc_html__('Footer Menu', 'mytheme'),
        'mobile'    => esc_html__('Mobile Menu', 'mytheme'),
        'social'    => esc_html__('Social Links Menu', 'mytheme')
    ));
}
add_action('after_setup_theme', 'mytheme_register_navigation_menus');

// Alternative: Register single menu
// register_nav_menu('primary', __('Primary Menu', 'mytheme'));</code></pre>

      <h2>Advanced Menu Display Options</h2>

      <h3>Primary Navigation with Full Options</h3>
      <pre><code><?php
wp_nav_menu(array(
    'theme_location'  => 'primary',
    'menu_id'         => 'primary-menu',
    'menu_class'      => 'nav-menu',
    'container'       => 'nav',
    'container_class' => 'primary-navigation',
    'container_id'    => 'site-navigation',
    'depth'           => 3,                  // Maximum menu depth
    'fallback_cb'     => 'wp_page_menu',    // Fallback function
    'items_wrap'      => '<ul id="%1$s" class="%2$s">%3$s</ul>',
    'before'          => '',                 // Before each link
    'after'           => '',                 // After each link
    'link_before'     => '<span>',          // Inside each link, before text
    'link_after'      => '</span>',         // Inside each link, after text
    'echo'            => true                // Echo or return
));
?></code></pre>

      <h3>Footer Menu (Simple List)</h3>
      <pre><code><?php
wp_nav_menu(array(
    'theme_location' => 'footer',
    'menu_id'        => 'footer-menu',
    'menu_class'     => 'footer-links',
    'container'      => 'div',
    'container_class' => 'footer-navigation',
    'depth'          => 1,                  // Single level only
    'fallback_cb'    => false               // No fallback
));
?></code></pre>

      <h3>Mobile Menu with Toggle</h3>
      <pre><code><button class="mobile-menu-toggle" aria-controls="mobile-menu" aria-expanded="false">
    <span class="screen-reader-text"><?php esc_html_e('Menu', 'mytheme'); ?></span>
    <span class="hamburger"></span>
</button>

<?php
wp_nav_menu(array(
    'theme_location' => 'mobile',
    'menu_id'        => 'mobile-menu',
    'menu_class'     => 'mobile-nav-menu',
    'container'      => 'nav',
    'container_class' => 'mobile-navigation',
    'container_id'   => 'mobile-nav'
));
?></code></pre>

      <h2>Conditional Menu Display</h2>
      <pre><code>// Check if menu location has a menu assigned
if (has_nav_menu('primary')) {
    wp_nav_menu(array(
        'theme_location' => 'primary'
    ));
} else {
    echo '<p>Please assign a menu to the Primary Menu location.</p>';
}

// Display different menus based on conditions
if (is_user_logged_in()) {
    wp_nav_menu(array('theme_location' => 'member-menu'));
} else {
    wp_nav_menu(array('theme_location' => 'guest-menu'));
}

// Custom menu by ID or slug
wp_nav_menu(array(
    'menu' => 'Main Menu',  // Menu name
    // or
    'menu' => 12            // Menu ID
));</code></pre>

      <h2>Social Links Menu</h2>
      <pre><code>// Register social menu
register_nav_menu('social', __('Social Links Menu', 'mytheme'));

// Display with icons (requires CSS or SVG handling)
<nav class="social-navigation">
    <?php
    wp_nav_menu(array(
        'theme_location'  => 'social',
        'menu_id'         => 'social-menu',
        'menu_class'      => 'social-links',
        'depth'           => 1,
        'link_before'     => '<span class="screen-reader-text">',
        'link_after'      => '</span>',
        'container'       => 'div',
        'container_class' => 'social-links-wrapper'
    ));
    ?>
</nav>

<!-- Add CSS to display icons -->
<style>
.social-links a[href*="facebook.com"]::before { content: "\\f09a"; }
.social-links a[href*="twitter.com"]::before { content: "\\f099"; }
.social-links a[href*="instagram.com"]::before { content: "\\f16d"; }
</style></code></pre>

      <h2>Custom Menu Walker</h2>
      <p>Create a custom walker class to modify menu output:</p>
      <pre><code>class Custom_Walker_Nav_Menu extends Walker_Nav_Menu {
    // Start level (ul)
    function start_lvl(&$output, $depth = 0, $args = null) {
        $indent = str_repeat("\\t", $depth);
        $output .= "\\n$indent<ul class=\\"sub-menu depth-$depth\\">\\n";
    }

    // Start element (li)
    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = ($depth) ? str_repeat("\\t", $depth) : '';

        // Add custom classes
        $classes = empty($item->classes) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;

        if ($item->current) {
            $classes[] = 'current-menu-item';
        }

        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';

        $output .= $indent . '<li' . $class_names . '>';

        // Build link
        $atts = array();
        $atts['title']  = !empty($item->attr_title) ? $item->attr_title : '';
        $atts['target'] = !empty($item->target) ? $item->target : '';
        $atts['rel']    = !empty($item->xfn) ? $item->xfn : '';
        $atts['href']   = !empty($item->url) ? $item->url : '';

        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);

        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }

        $title = apply_filters('the_title', $item->title, $item->ID);

        $item_output = $args->before;
        $item_output .= '<a' . $attributes . '>';
        $item_output .= $args->link_before . $title . $args->link_after;
        $item_output .= '</a>';
        $item_output .= $args->after;

        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
}

// Use custom walker
wp_nav_menu(array(
    'theme_location' => 'primary',
    'walker'         => new Custom_Walker_Nav_Menu()
));</code></pre>

      <h2>Menu Filters and Customization</h2>

      <h3>Add Custom Class to Menu Items</h3>
      <pre><code>// Add icon to specific menu items
function add_menu_item_icons($classes, $item, $args, $depth) {
    if ($args->theme_location == 'primary') {
        if ($item->title == 'Home') {
            $classes[] = 'menu-item-home';
        }
        if ($item->title == 'Contact') {
            $classes[] = 'menu-item-contact';
        }
    }
    return $classes;
}
add_filter('nav_menu_css_class', 'add_menu_item_icons', 10, 4);</code></pre>

      <h3>Modify Menu Link Attributes</h3>
      <pre><code>function add_menu_link_attributes($atts, $item, $args, $depth) {
    // Add data attributes
    $atts['data-menu-item'] = $item->ID;

    // Add rel="nofollow" to specific links
    if (in_array('nofollow', $item->classes)) {
        $atts['rel'] = 'nofollow';
    }

    // Open external links in new tab
    if (strpos($atts['href'], 'http') !== false && strpos($atts['href'], home_url()) === false) {
        $atts['target'] = '_blank';
        $atts['rel'] = 'noopener noreferrer';
    }

    return $atts;
}
add_filter('nav_menu_link_attributes', 'add_menu_link_attributes', 10, 4);</code></pre>

      <h3>Add Description to Menu Items</h3>
      <pre><code>class Menu_With_Description extends Walker_Nav_Menu {
    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = ($depth) ? str_repeat("\\t", $depth) : '';

        $output .= $indent . '<li class="menu-item">';

        $output .= '<a href="' . esc_url($item->url) . '">';
        $output .= esc_html($item->title);

        // Add description if available
        if (!empty($item->description)) {
            $output .= '<span class="menu-item-description">' . esc_html($item->description) . '</span>';
        }

        $output .= '</a>';
    }
}

// Enable menu item descriptions
add_filter('walker_nav_menu_start_el', 'enable_menu_description', 10, 4);
function enable_menu_description($item_output, $item, $depth, $args) {
    if (!empty($item->description)) {
        $item_output = str_replace(
            '</a>',
            '<span class="menu-description">' . $item->description . '</span></a>',
            $item_output
        );
    }
    return $item_output;
}</code></pre>

      <h2>Get Menu Locations and Data</h2>
      <pre><code>// Get all registered menu locations
$locations = get_registered_nav_menus();
print_r($locations);

// Get menu assigned to a location
$menu = get_nav_menu_locations();
$menu_id = $menu['primary'];

// Get menu object
$menu_object = wp_get_nav_menu_object($menu_id);
echo $menu_object->name;

// Get menu items
$menu_items = wp_get_nav_menu_items($menu_id);
foreach ($menu_items as $item) {
    echo $item->title . ' - ' . $item->url . '<br>';
}</code></pre>

      <h2>Responsive Menu Example</h2>
      <pre><code><!-- HTML Structure -->
<header class="site-header">
    <div class="site-branding">
        <?php the_custom_logo(); ?>
    </div>

    <button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
        <span class="menu-toggle-icon"></span>
        <span class="screen-reader-text">Menu</span>
    </button>

    <?php
    wp_nav_menu(array(
        'theme_location' => 'primary',
        'menu_id'        => 'primary-menu',
        'container'      => 'nav',
        'container_class' => 'primary-navigation'
    ));
    ?>
</header>

<script>
// Toggle mobile menu
document.querySelector('.menu-toggle').addEventListener('click', function() {
    const menu = document.getElementById('primary-menu');
    const isExpanded = this.getAttribute('aria-expanded') === 'true';

    this.setAttribute('aria-expanded', !isExpanded);
    menu.classList.toggle('menu-open');
});
</script></code></pre>

      <h2>Common Menu Parameters</h2>
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Description</th>
            <th>Default</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>theme_location</td>
            <td>Registered menu location</td>
            <td>''</td>
          </tr>
          <tr>
            <td>menu</td>
            <td>Menu ID, slug, or name</td>
            <td>''</td>
          </tr>
          <tr>
            <td>container</td>
            <td>Wrapper element (div, nav, false)</td>
            <td>'div'</td>
          </tr>
          <tr>
            <td>container_class</td>
            <td>CSS class for container</td>
            <td>'menu-{menu-slug}-container'</td>
          </tr>
          <tr>
            <td>menu_class</td>
            <td>CSS class for ul element</td>
            <td>'menu'</td>
          </tr>
          <tr>
            <td>menu_id</td>
            <td>ID attribute for ul element</td>
            <td>''</td>
          </tr>
          <tr>
            <td>depth</td>
            <td>Maximum menu depth (0 = unlimited)</td>
            <td>0</td>
          </tr>
          <tr>
            <td>walker</td>
            <td>Custom walker class instance</td>
            <td>Walker_Nav_Menu</td>
          </tr>
          <tr>
            <td>fallback_cb</td>
            <td>Callback if menu doesn't exist</td>
            <td>'wp_page_menu'</td>
          </tr>
          <tr>
            <td>before</td>
            <td>HTML before each link</td>
            <td>''</td>
          </tr>
          <tr>
            <td>after</td>
            <td>HTML after each link</td>
            <td>''</td>
          </tr>
          <tr>
            <td>link_before</td>
            <td>HTML inside link, before text</td>
            <td>''</td>
          </tr>
          <tr>
            <td>link_after</td>
            <td>HTML inside link, after text</td>
            <td>''</td>
          </tr>
          <tr>
            <td>items_wrap</td>
            <td>HTML template for ul element</td>
            <td>'<ul id="%1$s" class="%2$s">%3$s</ul>'</td>
          </tr>
          <tr>
            <td>echo</td>
            <td>Echo or return output</td>
            <td>true</td>
          </tr>
        </tbody>
      </table>

      <h2>Best Practices</h2>
      <ul>
        <li><strong>Register in after_setup_theme:</strong> Always register menus in this hook for proper theme support</li>
        <li><strong>Descriptive location names:</strong> Use clear names like 'primary', 'footer', not 'menu1', 'menu2'</li>
        <li><strong>Always check has_nav_menu():</strong> Provide fallbacks when no menu is assigned</li>
        <li><strong>Use semantic HTML:</strong> Wrap menus in &lt;nav&gt; elements for accessibility</li>
        <li><strong>Add ARIA attributes:</strong> Include aria-expanded, aria-label for better accessibility</li>
        <li><strong>Mobile-first approach:</strong> Design for mobile navigation first, enhance for desktop</li>
        <li><strong>Limit depth wisely:</strong> Deep nested menus can be difficult to navigate</li>
        <li><strong>Test thoroughly:</strong> Ensure menus work with keyboard navigation</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Minimal performance impact.</strong> WordPress menu system is well-optimized with built-in caching. However, avoid complex walkers with database queries inside loops, and consider caching menu output for high-traffic sites using transients or object caching.</p>
    `,
    code: `// Register menu locations
function mytheme_register_menus() {
    register_nav_menus(array(
        'primary' => __('Primary Menu', 'mytheme'),
        'footer'  => __('Footer Menu', 'mytheme'),
        'mobile'  => __('Mobile Menu', 'mytheme')
    ));
}
add_action('after_setup_theme', 'mytheme_register_menus');

// Display menu in template
<?php
if (has_nav_menu('primary')) {
    wp_nav_menu(array(
        'theme_location'  => 'primary',
        'menu_id'         => 'primary-menu',
        'container'       => 'nav',
        'container_class' => 'main-navigation'
    ));
}
?>`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '9 min read',
    category: 'WordPress Theme Development',
    tags: ['Menus', 'Navigation', 'Theme Development', 'wp_nav_menu', 'Accessibility'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'WordPress Custom Navigation Menus Guide | register_nav_menus & wp_nav_menu',
      metaDescription: 'Complete guide to registering and displaying WordPress navigation menus. Learn register_nav_menus(), wp_nav_menu(), custom walkers, and menu customization techniques.',
      keywords: ['wordpress navigation menu', 'register_nav_menus', 'wp_nav_menu', 'wordpress custom menu', 'wordpress menu walker', 'wordpress menu customization', 'wordpress mobile menu'],
      canonical: '/blog/register-navigation-menu',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Register and Display Custom Navigation Menus in WordPress",
        "description": "Comprehensive guide to WordPress navigation menu system including registration, display, and customization",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the difference between register_nav_menu() and register_nav_menus()?",
        answer: "register_nav_menu() registers a single menu location and takes two parameters (location key and description). register_nav_menus() registers multiple locations at once and takes an array of location => description pairs. Both achieve the same result, but register_nav_menus() is more convenient when registering multiple locations."
      },
      {
        question: "How do I display a menu without a container wrapper?",
        answer: "Set 'container' => false in wp_nav_menu() arguments. This will output only the <ul> menu element without any wrapper div or nav. Example: wp_nav_menu(array('theme_location' => 'primary', 'container' => false)). This is useful when you need precise control over the menu HTML structure."
      },
      {
        question: "Can I add custom fields to menu items?",
        answer: "Yes, use the walker_nav_menu_start_el filter or create a custom Walker class. You can also enable built-in fields like CSS Classes, Link Target, and Description by clicking 'Screen Options' in the Menus admin page. For completely custom fields, you'll need to hook into wp_setup_nav_menu_item and add custom meta boxes."
      },
      {
        question: "How do I create a mega menu in WordPress?",
        answer: "Create a custom Walker class that modifies the menu output structure, or use CSS to style deep nested menus. In your walker, check the menu depth and add custom HTML containers for submenu items. Combine this with CSS grid or flexbox to create multi-column layouts. Many themes use JavaScript to dynamically position and show/hide mega menu panels."
      },
      {
        question: "What is the fallback_cb parameter for?",
        answer: "fallback_cb specifies a function to call if no menu is assigned to the location. The default is 'wp_page_menu' which displays a list of pages. Set it to false to show nothing if no menu exists, or create a custom callback function to display alternative content. This is useful for providing helpful messages or default navigation."
      }
    ]
  },
  {
    id: 27,
    slug: 'add-custom-image-sizes',
    title: 'Register Custom Image Sizes',
    excerpt: 'Create custom image sizes in WordPress using add_image_size() to automatically generate optimized thumbnails for different layouts.',
    content: `
      <h2>WordPress Image Size System</h2>
      <p>WordPress automatically generates multiple sizes when you upload an image. By default, it creates thumbnail, medium, medium_large, and large sizes. You can register custom image sizes to match your theme's specific design requirements, ensuring images are perfectly sized for different contexts without manual resizing.</p>

      <h3>Benefits of Custom Image Sizes</h3>
      <ul>
        <li><strong>Performance:</strong> Serve appropriately-sized images instead of scaling large originals</li>
        <li><strong>Consistency:</strong> Uniform image dimensions across your site</li>
        <li><strong>Flexibility:</strong> Different sizes for different layouts (blog cards, hero sections, galleries)</li>
        <li><strong>Responsive Design:</strong> Optimized images for various screen sizes</li>
        <li><strong>Bandwidth Savings:</strong> Smaller file sizes improve load times</li>
      </ul>

      <h2>Basic Image Size Registration</h2>
      <p>Register custom image sizes in your theme's functions.php:</p>
      <pre><code>function mytheme_register_image_sizes() {
    // add_image_size( $name, $width, $height, $crop );
    add_image_size('blog-thumbnail', 400, 300, true);
    add_image_size('hero-banner', 1920, 600, true);
    add_image_size('square-small', 200, 200, true);
}
add_action('after_setup_theme', 'mytheme_register_image_sizes');</code></pre>

      <h3>Parameter Explanation</h3>
      <ul>
        <li><strong>$name:</strong> Unique identifier for the image size</li>
        <li><strong>$width:</strong> Maximum width in pixels (0 = no limit)</li>
        <li><strong>$height:</strong> Maximum height in pixels (0 = no limit)</li>
        <li><strong>$crop:</strong> true = hard crop, false = proportional resize, array = crop position</li>
      </ul>

      <h2>Crop Options</h2>

      <h3>Hard Crop (Exact Dimensions)</h3>
      <pre><code>// True = crop to exact dimensions (center crop)
add_image_size('portfolio-thumb', 400, 400, true);

// This will always produce 400x400 images, cropping if necessary</code></pre>

      <h3>Soft Crop (Proportional Resize)</h3>
      <pre><code>// False = resize proportionally (no cropping)
add_image_size('flexible-size', 800, 600, false);

// This maintains aspect ratio, max 800px wide or 600px tall
// Actual size depends on original image proportions</code></pre>

      <h3>Crop Position (Advanced)</h3>
      <pre><code>// Specify crop position as array [x, y]
// x: 'left', 'center', 'right'
// y: 'top', 'center', 'bottom'

add_image_size('header-image', 1200, 400, array('center', 'top'));
add_image_size('profile-pic', 300, 300, array('center', 'center'));
add_image_size('bottom-crop', 800, 600, array('center', 'bottom'));</code></pre>

      <h2>Complete Theme Image Sizes Example</h2>
      <pre><code>function mytheme_setup_image_sizes() {
    // Enable post thumbnail support
    add_theme_support('post-thumbnails');

    // Set default post thumbnail size (soft crop)
    set_post_thumbnail_size(825, 510, false);

    // === BLOG & POST IMAGES ===

    // Featured image for blog cards
    add_image_size('blog-card', 600, 400, true);

    // Large blog post image
    add_image_size('blog-large', 1200, 675, array('center', 'center'));

    // Small thumbnail for related posts
    add_image_size('related-post', 300, 200, true);

    // === GALLERY & PORTFOLIO ===

    // Square thumbnails for galleries
    add_image_size('gallery-thumb', 350, 350, true);

    // Portfolio grid item
    add_image_size('portfolio-item', 600, 450, array('center', 'center'));

    // Portfolio full width
    add_image_size('portfolio-full', 1920, 1080, false);

    // === HEADER & HERO ===

    // Hero/banner image
    add_image_size('hero-banner', 1920, 600, array('center', 'center'));

    // Page header
    add_image_size('page-header', 1600, 400, array('center', 'top'));

    // === SIDEBAR & WIDGETS ===

    // Sidebar widget thumbnail
    add_image_size('sidebar-thumb', 100, 100, true);

    // Widget featured image
    add_image_size('widget-featured', 400, 250, true);

    // === SPECIAL SIZES ===

    // Open Graph / Social sharing
    add_image_size('og-image', 1200, 630, true);

    // Email newsletter
    add_image_size('newsletter', 600, 400, false);
}
add_action('after_setup_theme', 'mytheme_setup_image_sizes');</code></pre>

      <h2>Displaying Custom Image Sizes</h2>

      <h3>In The Loop (Featured Images)</h3>
      <pre><code>// Display specific size
if (has_post_thumbnail()) {
    the_post_thumbnail('blog-card', array('class' => 'blog-thumbnail'));
}

// With attributes
the_post_thumbnail('hero-banner', array(
    'class' => 'hero-image',
    'alt'   => get_the_title(),
    'loading' => 'lazy'
));

// Get thumbnail HTML without echoing
$thumbnail = get_the_post_thumbnail(get_the_ID(), 'portfolio-item');</code></pre>

      <h3>By Attachment ID</h3>
      <pre><code>$attachment_id = get_post_thumbnail_id();

// Display image
echo wp_get_attachment_image($attachment_id, 'gallery-thumb', false, array(
    'class' => 'gallery-image',
    'alt'   => get_the_title()
));

// Get image URL only
$image_url = wp_get_attachment_image_src($attachment_id, 'blog-large');
if ($image_url) {
    echo '<img src="' . esc_url($image_url[0]) . '" width="' . $image_url[1] . '" height="' . $image_url[2] . '">';
}

// Get image metadata
$image_data = wp_get_attachment_image_src($attachment_id, 'hero-banner');
list($url, $width, $height) = $image_data;
echo "URL: $url, Width: $width, Height: $height";</code></pre>

      <h3>Using WordPress Image Functions</h3>
      <pre><code>// Get all available sizes for an image
$image_sizes = wp_get_attachment_metadata($attachment_id);
print_r($image_sizes['sizes']);

// Check if specific size exists
if (isset($image_sizes['sizes']['blog-card'])) {
    $blog_card = $image_sizes['sizes']['blog-card'];
    echo "Blog card: {$blog_card['width']}x{$blog_card['height']}";
}</code></pre>

      <h2>Responsive Images with srcset</h2>
      <pre><code>// WordPress automatically generates srcset for responsive images
the_post_thumbnail('blog-large', array('class' => 'responsive-image'));

// Manually create srcset
$image_id = get_post_thumbnail_id();
$srcset = wp_get_attachment_image_srcset($image_id, 'blog-large');
$sizes = wp_get_attachment_image_sizes($image_id, 'blog-large');

echo '<img src="' . wp_get_attachment_image_url($image_id, 'blog-large') . '"';
echo ' srcset="' . esc_attr($srcset) . '"';
echo ' sizes="' . esc_attr($sizes) . '"';
echo ' alt="' . esc_attr(get_post_meta($image_id, '_wp_attachment_image_alt', true)) . '">';

// Custom sizes attribute for different breakpoints
the_post_thumbnail('blog-large', array(
    'sizes' => '(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 800px'
));</code></pre>

      <h2>Make Custom Sizes Selectable in Editor</h2>
      <pre><code>// Add custom sizes to media library size dropdown
function add_custom_image_sizes_to_media_library($sizes) {
    return array_merge($sizes, array(
        'blog-card'      => __('Blog Card (600x400)', 'mytheme'),
        'hero-banner'    => __('Hero Banner (1920x600)', 'mytheme'),
        'portfolio-item' => __('Portfolio Item (600x450)', 'mytheme'),
        'og-image'       => __('Social Sharing (1200x630)', 'mytheme')
    ));
}
add_filter('image_size_names_choose', 'add_custom_image_sizes_to_media_library');</code></pre>

      <h2>Conditional Image Sizes</h2>
      <pre><code>// Different sizes based on post type
if (has_post_thumbnail()) {
    if (get_post_type() === 'portfolio') {
        the_post_thumbnail('portfolio-item');
    } elseif (get_post_type() === 'product') {
        the_post_thumbnail('product-thumbnail');
    } else {
        the_post_thumbnail('blog-card');
    }
}

// Different sizes based on context
if (is_single()) {
    the_post_thumbnail('blog-large');  // Large for single posts
} else {
    the_post_thumbnail('blog-card');   // Smaller for archives
}</code></pre>

      <h2>Regenerating Thumbnails</h2>
      <pre><code>// Programmatically regenerate thumbnails for existing images
// Note: This can be resource-intensive, run carefully

function regenerate_all_image_sizes() {
    // Only allow administrators to run this
    if (!current_user_can('manage_options')) {
        return;
    }

    $args = array(
        'post_type'      => 'attachment',
        'post_mime_type' => 'image',
        'post_status'    => 'inherit',
        'posts_per_page' => -1
    );

    $attachments = get_posts($args);

    foreach ($attachments as $attachment) {
        $file = get_attached_file($attachment->ID);

        if (file_exists($file)) {
            wp_update_attachment_metadata(
                $attachment->ID,
                wp_generate_attachment_metadata($attachment->ID, $file)
            );
        }
    }
}

// Better: Use WP-CLI or a plugin like "Regenerate Thumbnails" for production
// wp media regenerate --yes</code></pre>

      <h2>Removing Default Image Sizes</h2>
      <pre><code>// Disable default WordPress image sizes to save disk space
function remove_default_image_sizes($sizes) {
    // Remove specific sizes
    unset($sizes['thumbnail']);    // 150x150
    unset($sizes['medium']);       // 300x300
    unset($sizes['medium_large']); // 768x0
    unset($sizes['large']);        // 1024x1024

    return $sizes;
}
add_filter('intermediate_image_sizes_advanced', 'remove_default_image_sizes');

// Prevent generation of specific sizes
function disable_image_sizes() {
    remove_image_size('1536x1536'); // WordPress 5.3+ 2x medium_large
    remove_image_size('2048x2048'); // WordPress 5.3+ 2x large
}
add_action('init', 'disable_image_sizes');</code></pre>

      <h2>Get All Registered Image Sizes</h2>
      <pre><code>function get_all_image_sizes() {
    global $_wp_additional_image_sizes;

    $sizes = array();

    // Get default sizes
    foreach (array('thumbnail', 'medium', 'medium_large', 'large') as $size) {
        $sizes[$size] = array(
            'width'  => get_option("{$size}_size_w"),
            'height' => get_option("{$size}_size_h"),
            'crop'   => (bool) get_option("{$size}_crop")
        );
    }

    // Get custom sizes
    if (isset($_wp_additional_image_sizes) && count($_wp_additional_image_sizes)) {
        $sizes = array_merge($sizes, $_wp_additional_image_sizes);
    }

    return $sizes;
}

// Display all sizes
$all_sizes = get_all_image_sizes();
foreach ($all_sizes as $size => $data) {
    echo "$size: {$data['width']}x{$data['height']}, Crop: " . ($data['crop'] ? 'Yes' : 'No') . "<br>";
}</code></pre>

      <h2>Best Practices</h2>
      <table>
        <thead>
          <tr>
            <th>Practice</th>
            <th>Why It Matters</th>
            <th>Example</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Descriptive names</td>
            <td>Makes sizes easy to identify</td>
            <td>'blog-card' not 'size1'</td>
          </tr>
          <tr>
            <td>Register in after_setup_theme</td>
            <td>Ensures proper timing</td>
            <td>Use the correct hook</td>
          </tr>
          <tr>
            <td>Don't over-generate</td>
            <td>Saves disk space and processing</td>
            <td>Only create sizes you'll use</td>
          </tr>
          <tr>
            <td>Use appropriate crop</td>
            <td>Prevents awkward cropping</td>
            <td>Portraits: center crop, landscapes: soft crop</td>
          </tr>
          <tr>
            <td>Match design specs</td>
            <td>Avoids browser resizing</td>
            <td>Measure actual dimensions in design</td>
          </tr>
          <tr>
            <td>Consider retina displays</td>
            <td>Sharp images on high-DPI screens</td>
            <td>2x sizes for critical images</td>
          </tr>
          <tr>
            <td>Use lazy loading</td>
            <td>Improves page load speed</td>
            <td>loading="lazy" attribute</td>
          </tr>
        </tbody>
      </table>

      <h2>Common Image Size Patterns</h2>
      <ul>
        <li><strong>Blog Card:</strong> 600x400 (3:2 ratio) - Perfect for blog listings</li>
        <li><strong>Square Thumbnail:</strong> 300x300 (1:1 ratio) - Great for avatars, product grids</li>
        <li><strong>Hero Banner:</strong> 1920x600 (16:5 ratio) - Wide header images</li>
        <li><strong>Open Graph:</strong> 1200x630 (1.91:1 ratio) - Social media sharing</li>
        <li><strong>Portrait:</strong> 600x800 (3:4 ratio) - Team members, portraits</li>
        <li><strong>Landscape:</strong> 800x450 (16:9 ratio) - Video thumbnails, wide images</li>
        <li><strong>Sidebar Widget:</strong> 400x250 - Small promotional images</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Initial processing cost, ongoing performance gain.</strong> Generating thumbnails uses server resources when images are uploaded, but dramatically improves frontend performance by serving appropriately-sized images. A 4MB original resized to 50KB for thumbnails is an 80x file size reduction. Consider using a CDN and image optimization plugin for best results.</p>
    `,
    code: `function mytheme_register_image_sizes() {
    // Enable post thumbnails
    add_theme_support('post-thumbnails');

    // Set default thumbnail size
    set_post_thumbnail_size(825, 510, false);

    // Register custom sizes
    add_image_size('blog-card', 600, 400, true);
    add_image_size('hero-banner', 1920, 600, array('center', 'center'));
    add_image_size('gallery-thumb', 350, 350, true);
    add_image_size('portfolio-item', 800, 600, false);
}
add_action('after_setup_theme', 'mytheme_register_image_sizes');

// Make sizes available in media library
function add_sizes_to_media_library($sizes) {
    return array_merge($sizes, array(
        'blog-card' => __('Blog Card', 'mytheme'),
        'hero-banner' => __('Hero Banner', 'mytheme')
    ));
}
add_filter('image_size_names_choose', 'add_sizes_to_media_library');`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '8 min read',
    category: 'WordPress Theme Development',
    tags: ['Images', 'Thumbnails', 'Media', 'Performance', 'Responsive'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.9+',
    seo: {
      metaTitle: 'WordPress Custom Image Sizes Guide | add_image_size() Tutorial',
      metaDescription: 'Learn how to register custom image sizes in WordPress using add_image_size(). Complete guide to cropping, responsive images, and thumbnail optimization.',
      keywords: ['wordpress image sizes', 'add_image_size', 'wordpress thumbnails', 'custom image sizes wordpress', 'wordpress crop images', 'wordpress responsive images', 'regenerate thumbnails'],
      canonical: '/blog/add-custom-image-sizes',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Register Custom Image Sizes in WordPress",
        "description": "Complete guide to creating and using custom image sizes in WordPress themes",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the difference between hard crop and soft crop in add_image_size()?",
        answer: "Hard crop (true) forces exact dimensions by cropping the image to fit, potentially cutting off parts of the image. Soft crop (false) resizes proportionally without cropping, maintaining the entire image but resulting in variable dimensions that won't exceed your specified width or height. Use hard crop for consistent layouts, soft crop when you need to preserve the entire image."
      },
      {
        question: "Do I need to regenerate thumbnails after adding new image sizes?",
        answer: "Yes, for existing images. New image sizes only affect images uploaded after registration. Use a plugin like 'Regenerate Thumbnails' or WP-CLI command 'wp media regenerate' to create the new sizes for previously uploaded images. New uploads will automatically generate all registered sizes."
      },
      {
        question: "How can I reduce the number of image sizes WordPress generates?",
        answer: "Use the intermediate_image_sizes_advanced filter to remove unwanted sizes. This prevents WordPress from generating default sizes like thumbnail, medium, and large. Only register the exact sizes your theme needs to save disk space and processing time. Consider removing 1536x1536 and 2048x2048 sizes added in WordPress 5.3+ if you don't need them."
      },
      {
        question: "Can I specify crop position when using add_image_size()?",
        answer: "Yes, pass an array as the fourth parameter with x and y positions. Example: add_image_size('header', 1200, 400, array('center', 'top')) crops from the center horizontally and top vertically. Options are 'left', 'center', 'right' for x-axis and 'top', 'center', 'bottom' for y-axis. This gives you precise control over which part of the image is kept."
      },
      {
        question: "How do I make custom image sizes appear in the WordPress media library dropdown?",
        answer: "Use the image_size_names_choose filter. Add your custom sizes with descriptive names: add_filter('image_size_names_choose', function($sizes) { return array_merge($sizes, array('blog-card' => 'Blog Card')); }); This makes your custom sizes selectable when inserting images into posts, allowing editors to choose the appropriate size."
      }
    ]
  },
  {
    id: 28,
    slug: 'custom-post-meta-fields',
    title: 'Add Custom Meta Boxes',
    excerpt: 'Create custom meta boxes and fields in the WordPress post editor using add_meta_box() to store additional post metadata.',
    content: `
      <h2>WordPress Meta Box System</h2>
      <p>Meta boxes are custom panels in the WordPress post editor that allow you to add extra fields and functionality. They're essential for storing additional post data beyond title and content, such as custom prices, dates, settings, or any custom information your theme or plugin needs.</p>

      <h3>Common Use Cases</h3>
      <ul>
        <li><strong>Custom Fields:</strong> Store additional post-specific data (subtitle, location, price)</li>
        <li><strong>Post Options:</strong> Control layout, features, or display settings per post</li>
        <li><strong>SEO Data:</strong> Custom title, description, keywords</li>
        <li><strong>Product Information:</strong> Price, SKU, specifications</li>
        <li><strong>Event Details:</strong> Date, time, venue, registration link</li>
        <li><strong>Media:</strong> External video URLs, image galleries</li>
      </ul>

      <h2>Basic Meta Box Registration</h2>
      <pre><code>function register_custom_meta_box() {
    add_meta_box(
        'custom_meta_box_id',           // Unique ID
        'Custom Meta Box Title',        // Box title
        'render_custom_meta_box',       // Callback function
        'post',                         // Post type (post, page, or custom)
        'normal',                       // Context (normal, side, advanced)
        'high'                          // Priority (high, low, default)
    );
}
add_action('add_meta_boxes', 'register_custom_meta_box');

// Callback function to display meta box content
function render_custom_meta_box($post) {
    // Add nonce for security
    wp_nonce_field('custom_meta_box_nonce_action', 'custom_meta_box_nonce');

    // Get current value
    $value = get_post_meta($post->ID, '_custom_field_key', true);

    // Display field
    echo '<label for="custom_field">Custom Field:</label>';
    echo '<input type="text" id="custom_field" name="custom_field" value="' . esc_attr($value) . '" style="width: 100%;">';
}

// Save meta box data
function save_custom_meta_box($post_id) {
    // Check nonce
    if (!isset($_POST['custom_meta_box_nonce']) ||
        !wp_verify_nonce($_POST['custom_meta_box_nonce'], 'custom_meta_box_nonce_action')) {
        return;
    }

    // Check autosave
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    // Check permissions
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    // Save data
    if (isset($_POST['custom_field'])) {
        update_post_meta($post_id, '_custom_field_key', sanitize_text_field($_POST['custom_field']));
    }
}
add_action('save_post', 'save_custom_meta_box');</code></pre>

      <h2>Complete Meta Box Example</h2>
      <p>A production-ready meta box with multiple field types:</p>
      <pre><code>// Register meta box
function product_details_meta_box() {
    add_meta_box(
        'product_details',
        __('Product Details', 'textdomain'),
        'product_details_callback',
        'product',  // Custom post type
        'normal',
        'high'
    );
}
add_action('add_meta_boxes', 'product_details_meta_box');

// Display meta box
function product_details_callback($post) {
    // Nonce for security
    wp_nonce_field('product_details_nonce_action', 'product_details_nonce');

    // Get saved values
    $price = get_post_meta($post->ID, '_product_price', true);
    $sku = get_post_meta($post->ID, '_product_sku', true);
    $featured = get_post_meta($post->ID, '_product_featured', true);
    $status = get_post_meta($post->ID, '_product_status', true);
    ?>
    <style>
        .product-meta-field { margin-bottom: 15px; }
        .product-meta-field label { display: block; font-weight: bold; margin-bottom: 5px; }
        .product-meta-field input[type="text"],
        .product-meta-field input[type="number"],
        .product-meta-field select { width: 100%; }
    </style>

    <div class="product-meta-field">
        <label for="product_price"><?php _e('Price ($):', 'textdomain'); ?></label>
        <input type="number" id="product_price" name="product_price"
               value="<?php echo esc_attr($price); ?>" step="0.01" min="0">
    </div>

    <div class="product-meta-field">
        <label for="product_sku"><?php _e('SKU:', 'textdomain'); ?></label>
        <input type="text" id="product_sku" name="product_sku"
               value="<?php echo esc_attr($sku); ?>">
    </div>

    <div class="product-meta-field">
        <label>
            <input type="checkbox" name="product_featured" value="1"
                   <?php checked($featured, '1'); ?>>
            <?php _e('Featured Product', 'textdomain'); ?>
        </label>
    </div>

    <div class="product-meta-field">
        <label for="product_status"><?php _e('Status:', 'textdomain'); ?></label>
        <select id="product_status" name="product_status">
            <option value="in_stock" <?php selected($status, 'in_stock'); ?>>
                <?php _e('In Stock', 'textdomain'); ?>
            </option>
            <option value="out_of_stock" <?php selected($status, 'out_of_stock'); ?>>
                <?php _e('Out of Stock', 'textdomain'); ?>
            </option>
            <option value="preorder" <?php selected($status, 'preorder'); ?>>
                <?php _e('Pre-order', 'textdomain'); ?>
            </option>
        </select>
    </div>
    <?php
}

// Save meta box data
function save_product_details($post_id) {
    // Verify nonce
    if (!isset($_POST['product_details_nonce']) ||
        !wp_verify_nonce($_POST['product_details_nonce'], 'product_details_nonce_action')) {
        return;
    }

    // Check autosave
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    // Check permissions
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    // Save price
    if (isset($_POST['product_price'])) {
        update_post_meta($post_id, '_product_price',
            sanitize_text_field($_POST['product_price']));
    }

    // Save SKU
    if (isset($_POST['product_sku'])) {
        update_post_meta($post_id, '_product_sku',
            sanitize_text_field($_POST['product_sku']));
    }

    // Save featured status
    $featured = isset($_POST['product_featured']) ? '1' : '0';
    update_post_meta($post_id, '_product_featured', $featured);

    // Save status
    if (isset($_POST['product_status'])) {
        $allowed_statuses = array('in_stock', 'out_of_stock', 'preorder');
        $status = sanitize_text_field($_POST['product_status']);

        if (in_array($status, $allowed_statuses)) {
            update_post_meta($post_id, '_product_status', $status);
        }
    }
}
add_action('save_post', 'save_product_details');</code></pre>

      <h2>Different Input Field Types</h2>

      <h3>Text Input</h3>
      <pre><code>$value = get_post_meta($post->ID, '_subtitle', true);
echo '<input type="text" name="subtitle" value="' . esc_attr($value) . '" style="width: 100%;">';</code></pre>

      <h3>Textarea</h3>
      <pre><code>$value = get_post_meta($post->ID, '_custom_excerpt', true);
echo '<textarea name="custom_excerpt" rows="4" style="width: 100%;">' . esc_textarea($value) . '</textarea>';</code></pre>

      <h3>Checkbox</h3>
      <pre><code>$checked = get_post_meta($post->ID, '_hide_sidebar', true);
echo '<label><input type="checkbox" name="hide_sidebar" value="1" ' . checked($checked, '1', false) . '> Hide Sidebar</label>';</code></pre>

      <h3>Radio Buttons</h3>
      <pre><code>$layout = get_post_meta($post->ID, '_layout', true);
$layouts = array('full' => 'Full Width', 'sidebar' => 'With Sidebar', 'narrow' => 'Narrow');

foreach ($layouts as $key => $label) {
    echo '<label><input type="radio" name="layout" value="' . esc_attr($key) . '" ' .
         checked($layout, $key, false) . '> ' . esc_html($label) . '</label><br>';
}</code></pre>

      <h3>Select Dropdown</h3>
      <pre><code>$color = get_post_meta($post->ID, '_color_scheme', true);
$colors = array('blue' => 'Blue', 'red' => 'Red', 'green' => 'Green');

echo '<select name="color_scheme">';
foreach ($colors as $value => $label) {
    echo '<option value="' . esc_attr($value) . '" ' .
         selected($color, $value, false) . '>' . esc_html($label) . '</option>';
}
echo '</select>';</code></pre>

      <h3>WordPress Editor</h3>
      <pre><code>$content = get_post_meta($post->ID, '_custom_content', true);
wp_editor($content, 'custom_content', array(
    'textarea_name' => 'custom_content',
    'textarea_rows' => 10,
    'media_buttons' => true
));</code></pre>

      <h3>Color Picker</h3>
      <pre><code>// Enqueue color picker
function enqueue_color_picker($hook) {
    if ('post.php' === $hook || 'post-new.php' === $hook) {
        wp_enqueue_style('wp-color-picker');
        wp_enqueue_script('wp-color-picker');
    }
}
add_action('admin_enqueue_scripts', 'enqueue_color_picker');

// Display color picker
$color = get_post_meta($post->ID, '_bg_color', true);
echo '<input type="text" name="bg_color" value="' . esc_attr($color) . '" class="color-picker">';

// JavaScript to initialize
echo '<script>
jQuery(document).ready(function($) {
    $(".color-picker").wpColorPicker();
});
</script>';</code></pre>

      <h3>Date Picker</h3>
      <pre><code>// Enqueue date picker
function enqueue_date_picker($hook) {
    if ('post.php' === $hook || 'post-new.php' === $hook) {
        wp_enqueue_script('jquery-ui-datepicker');
        wp_enqueue_style('jquery-ui-css', 'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css');
    }
}
add_action('admin_enqueue_scripts', 'enqueue_date_picker');

// Display date picker
$date = get_post_meta($post->ID, '_event_date', true);
echo '<input type="text" name="event_date" value="' . esc_attr($date) . '" class="datepicker">';

// JavaScript to initialize
echo '<script>
jQuery(document).ready(function($) {
    $(".datepicker").datepicker({ dateFormat: "yy-mm-dd" });
});
</script>';</code></pre>

      <h3>Image Upload</h3>
      <pre><code>// Display image upload field
$image_id = get_post_meta($post->ID, '_custom_image', true);
$image_url = $image_id ? wp_get_attachment_url($image_id) : '';

echo '<div class="custom-image-upload">';
echo '<input type="hidden" name="custom_image" id="custom_image" value="' . esc_attr($image_id) . '">';
echo '<input type="button" class="button upload-image-button" value="Upload Image">';
echo '<input type="button" class="button remove-image-button" value="Remove">';
if ($image_url) {
    echo '<img src="' . esc_url($image_url) . '" style="max-width: 200px; display: block; margin-top: 10px;">';
}
echo '</div>';

// JavaScript for media uploader
echo '<script>
jQuery(document).ready(function($) {
    var mediaUploader;

    $(".upload-image-button").click(function(e) {
        e.preventDefault();

        if (mediaUploader) {
            mediaUploader.open();
            return;
        }

        mediaUploader = wp.media({
            title: "Choose Image",
            button: { text: "Select" },
            multiple: false
        });

        mediaUploader.on("select", function() {
            var attachment = mediaUploader.state().get("selection").first().toJSON();
            $("#custom_image").val(attachment.id);
            $(".custom-image-upload img").remove();
            $(".custom-image-upload").append(\'<img src="\' + attachment.url + \'" style="max-width: 200px; display: block; margin-top: 10px;">\');
        });

        mediaUploader.open();
    });

    $(".remove-image-button").click(function(e) {
        e.preventDefault();
        $("#custom_image").val("");
        $(".custom-image-upload img").remove();
    });
});
</script>';</code></pre>

      <h2>Meta Box for Specific Post Types</h2>
      <pre><code>// Add meta box to multiple post types
function add_meta_box_to_post_types() {
    $post_types = array('post', 'page', 'product', 'event');

    foreach ($post_types as $post_type) {
        add_meta_box(
            'custom_settings',
            'Custom Settings',
            'custom_settings_callback',
            $post_type,
            'side',
            'default'
        );
    }
}
add_action('add_meta_boxes', 'add_meta_box_to_post_types');</code></pre>

      <h2>Conditional Meta Boxes</h2>
      <pre><code>// Show meta box only for specific post types or templates
function conditional_meta_box() {
    global $post;

    // Only for posts with specific category
    if (has_category('products', $post)) {
        add_meta_box(
            'product_info',
            'Product Information',
            'product_info_callback',
            'post',
            'normal',
            'high'
        );
    }

    // Only for specific page template
    $template = get_post_meta($post->ID, '_wp_page_template', true);
    if ($template === 'template-landing.php') {
        add_meta_box(
            'landing_options',
            'Landing Page Options',
            'landing_options_callback',
            'page',
            'side',
            'default'
        );
    }
}
add_action('add_meta_boxes', 'conditional_meta_box');</code></pre>

      <h2>Retrieving Meta Data in Templates</h2>
      <pre><code>// In your theme template files
$price = get_post_meta(get_the_ID(), '_product_price', true);
$sku = get_post_meta(get_the_ID(), '_product_sku', true);
$featured = get_post_meta(get_the_ID(), '_product_featured', true);

if ($price) {
    echo '<span class="price">$' . esc_html($price) . '</span>';
}

if ($featured === '1') {
    echo '<span class="badge">Featured</span>';
}

// Get all meta for a post
$all_meta = get_post_meta(get_the_ID());
print_r($all_meta);</code></pre>

      <h2>Security Best Practices</h2>
      <table>
        <thead>
          <tr>
            <th>Security Measure</th>
            <th>Why It Matters</th>
            <th>Implementation</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Nonce Verification</td>
            <td>Prevents CSRF attacks</td>
            <td>wp_nonce_field() + wp_verify_nonce()</td>
          </tr>
          <tr>
            <td>Check Autosave</td>
            <td>Prevents data loss</td>
            <td>if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)</td>
          </tr>
          <tr>
            <td>Check Permissions</td>
            <td>Ensures user can edit</td>
            <td>current_user_can('edit_post', $post_id)</td>
          </tr>
          <tr>
            <td>Sanitize Input</td>
            <td>Prevents XSS attacks</td>
            <td>sanitize_text_field(), sanitize_email(), etc.</td>
          </tr>
          <tr>
            <td>Escape Output</td>
            <td>Prevents XSS when displaying</td>
            <td>esc_attr(), esc_html(), esc_url()</td>
          </tr>
          <tr>
            <td>Validate Data</td>
            <td>Ensures data integrity</td>
            <td>Check allowed values, data types</td>
          </tr>
        </tbody>
      </table>

      <h2>Common Sanitization Functions</h2>
      <ul>
        <li><strong>sanitize_text_field():</strong> General text input (strips tags, line breaks)</li>
        <li><strong>sanitize_textarea_field():</strong> Textarea (allows line breaks)</li>
        <li><strong>sanitize_email():</strong> Email addresses</li>
        <li><strong>sanitize_url():</strong> URLs</li>
        <li><strong>sanitize_hex_color():</strong> Hex color codes</li>
        <li><strong>absint():</strong> Absolute integer (positive numbers only)</li>
        <li><strong>intval():</strong> Integer conversion</li>
        <li><strong>floatval():</strong> Float conversion</li>
        <li><strong>wp_kses_post():</strong> HTML content (allows safe HTML tags)</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Minimal performance impact.</strong> Post meta is stored efficiently in the database and is indexed for fast retrieval. However, avoid storing large amounts of data in meta fields (use custom tables for extensive data). Each get_post_meta() call queries the database, so cache results if you need to access the same meta multiple times in a template.</p>
    `,
    code: `// Register meta box
function custom_meta_box() {
    add_meta_box(
        'custom_details',
        __('Custom Details', 'textdomain'),
        'custom_meta_box_callback',
        'post',
        'normal',
        'high'
    );
}
add_action('add_meta_boxes', 'custom_meta_box');

// Display meta box
function custom_meta_box_callback($post) {
    wp_nonce_field('custom_meta_nonce_action', 'custom_meta_nonce');

    $value = get_post_meta($post->ID, '_custom_field', true);

    echo '<label>Custom Field:</label>';
    echo '<input type="text" name="custom_field" value="' . esc_attr($value) . '" style="width: 100%;">';
}

// Save meta box data
function save_custom_meta($post_id) {
    if (!isset($_POST['custom_meta_nonce']) ||
        !wp_verify_nonce($_POST['custom_meta_nonce'], 'custom_meta_nonce_action')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    if (isset($_POST['custom_field'])) {
        update_post_meta($post_id, '_custom_field',
            sanitize_text_field($_POST['custom_field']));
    }
}
add_action('save_post', 'save_custom_meta');`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '10 min read',
    category: 'WordPress Theme Development',
    tags: ['Meta Boxes', 'Custom Fields', 'Post Meta', 'Admin', 'Security'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 2.5+',
    seo: {
      metaTitle: 'WordPress Custom Meta Boxes Guide | add_meta_box() Tutorial',
      metaDescription: 'Learn how to create custom meta boxes in WordPress using add_meta_box(). Complete guide to custom fields, post meta, security, and data handling.',
      keywords: ['wordpress meta boxes', 'add_meta_box', 'wordpress custom fields', 'post meta wordpress', 'wordpress admin fields', 'save post meta', 'wordpress nonce'],
      canonical: '/blog/custom-post-meta-fields',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Add Custom Meta Boxes in WordPress",
        "description": "Complete guide to creating custom meta boxes and handling post metadata in WordPress",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between update_post_meta() and add_post_meta()?",
        answer: "update_post_meta() adds the meta if it doesn't exist and updates it if it does - it's a combination of add and update. add_post_meta() only adds new meta and can create multiple entries with the same key (unless you set $unique to true). For single-value fields, always use update_post_meta() as it's simpler and prevents duplicates."
      },
      {
        question: "Why should meta keys start with an underscore?",
        answer: "Meta keys starting with underscore (like '_product_price') are considered 'private' or 'protected' and won't appear in the Custom Fields meta box in the WordPress editor. Use underscore for meta managed by your code only. Public meta (without underscore) can be edited through the default Custom Fields interface, which might cause issues if users modify them manually."
      },
      {
        question: "How do I make meta boxes only appear for specific users or roles?",
        answer: "Check user capabilities in your add_meta_boxes callback: if (!current_user_can('manage_options')) { return; }. You can also use conditional logic based on user roles, post author, or any other criteria before calling add_meta_box(). This allows you to show different meta boxes to different user groups."
      },
      {
        question: "Can I save meta box data using AJAX instead of the save_post hook?",
        answer: "Yes, you can use AJAX by creating a custom AJAX handler with wp_ajax_ actions. This allows for auto-saving, real-time validation, or saving without refreshing the page. However, you still need proper nonce verification, sanitization, and permission checks. The save_post hook is simpler and more reliable for most use cases, but AJAX provides better user experience for complex forms."
      },
      {
        question: "What's the best way to display repeating fields (like multiple phone numbers)?",
        answer: "Store repeating fields as a serialized array using update_post_meta($post_id, '_phone_numbers', array('123-456', '789-012')). Retrieve with get_post_meta($post_id, '_phone_numbers', true). In your meta box, use JavaScript to add/remove field rows dynamically, then collect all values into an array before saving. Alternatively, consider using the Carbon Fields or Advanced Custom Fields library for complex repeating field UIs."
      }
    ]
  },
  {
    id: 29,
    slug: 'breadcrumbs-without-plugin',
    title: 'Add Breadcrumb Navigation',
    excerpt: 'Create SEO-friendly breadcrumb navigation in WordPress without plugins, with Schema.org markup for better search engine visibility.',
    content: `
      <h2>Breadcrumb Navigation Benefits</h2>
      <p>Breadcrumbs show users their current location within your site's hierarchy and provide an easy way to navigate back to parent pages. They're crucial for both user experience and SEO, as search engines use breadcrumbs to understand your site structure.</p>

      <h3>Why Add Breadcrumbs?</h3>
      <ul>
        <li><strong>User Experience:</strong> Shows users where they are in the site hierarchy</li>
        <li><strong>Easy Navigation:</strong> Quick access to parent pages and categories</li>
        <li><strong>SEO Benefits:</strong> Search engines display breadcrumbs in search results</li>
        <li><strong>Lower Bounce Rate:</strong> Encourages users to explore more pages</li>
        <li><strong>Accessibility:</strong> Helps screen readers understand page context</li>
        <li><strong>Mobile-Friendly:</strong> Compact navigation for small screens</li>
      </ul>

      <h2>Basic Breadcrumb Function</h2>
      <pre><code>function custom_breadcrumbs() {
    // Get the global post object
    global $post;

    // Start breadcrumb
    echo '<nav class="breadcrumbs">';
    echo '<a href="' . home_url('/') . '">Home</a>';

    if (is_category() || is_single()) {
        echo ' &raquo; ';
        $categories = get_the_category();
        if ($categories) {
            $category = $categories[0];
            echo '<a href="' . get_category_link($category->term_id) . '">' . $category->name . '</a>';
        }
    }

    if (is_single()) {
        echo ' &raquo; ';
        echo '<span>' . get_the_title() . '</span>';
    }

    if (is_page()) {
        if ($post->post_parent) {
            $parent_id = $post->post_parent;
            $breadcrumbs = array();

            while ($parent_id) {
                $page = get_page($parent_id);
                $breadcrumbs[] = '<a href="' . get_permalink($page->ID) . '">' . get_the_title($page->ID) . '</a>';
                $parent_id = $page->post_parent;
            }

            $breadcrumbs = array_reverse($breadcrumbs);
            foreach ($breadcrumbs as $crumb) {
                echo ' &raquo; ' . $crumb;
            }
        }

        echo ' &raquo; <span>' . get_the_title() . '</span>';
    }

    echo '</nav>';
}

// Usage in your template:
// custom_breadcrumbs();</code></pre>

      <h2>Complete Breadcrumb Function with Schema Markup</h2>
      <p>A production-ready breadcrumb function with Schema.org structured data:</p>
      <pre><code>function advanced_breadcrumbs() {
    // Don't display on homepage
    if (is_front_page()) {
        return;
    }

    global $post;
    $breadcrumbs = array();
    $position = 1;

    // Home link
    $breadcrumbs[] = array(
        'url' => home_url('/'),
        'title' => 'Home',
        'position' => $position++
    );

    // Category archive
    if (is_category()) {
        $category = get_queried_object();

        // Parent categories
        if ($category->parent != 0) {
            $parent_cats = array();
            $parent_id = $category->parent;

            while ($parent_id) {
                $parent_cat = get_category($parent_id);
                $parent_cats[] = array(
                    'url' => get_category_link($parent_cat->term_id),
                    'title' => $parent_cat->name,
                    'position' => 0
                );
                $parent_id = $parent_cat->parent;
            }

            $parent_cats = array_reverse($parent_cats);
            foreach ($parent_cats as $cat) {
                $cat['position'] = $position++;
                $breadcrumbs[] = $cat;
            }
        }

        $breadcrumbs[] = array(
            'url' => '',
            'title' => $category->name,
            'position' => $position++
        );
    }

    // Tag archive
    elseif (is_tag()) {
        $tag = get_queried_object();
        $breadcrumbs[] = array(
            'url' => '',
            'title' => 'Tag: ' . $tag->name,
            'position' => $position++
        );
    }

    // Author archive
    elseif (is_author()) {
        $author = get_queried_object();
        $breadcrumbs[] = array(
            'url' => '',
            'title' => 'Author: ' . $author->display_name,
            'position' => $position++
        );
    }

    // Date archive
    elseif (is_date()) {
        if (is_day()) {
            $breadcrumbs[] = array(
                'url' => get_year_link(get_the_time('Y')),
                'title' => get_the_time('Y'),
                'position' => $position++
            );
            $breadcrumbs[] = array(
                'url' => get_month_link(get_the_time('Y'), get_the_time('m')),
                'title' => get_the_time('F'),
                'position' => $position++
            );
            $breadcrumbs[] = array(
                'url' => '',
                'title' => get_the_time('d'),
                'position' => $position++
            );
        } elseif (is_month()) {
            $breadcrumbs[] = array(
                'url' => get_year_link(get_the_time('Y')),
                'title' => get_the_time('Y'),
                'position' => $position++
            );
            $breadcrumbs[] = array(
                'url' => '',
                'title' => get_the_time('F'),
                'position' => $position++
            );
        } elseif (is_year()) {
            $breadcrumbs[] = array(
                'url' => '',
                'title' => get_the_time('Y'),
                'position' => $position++
            );
        }
    }

    // Search results
    elseif (is_search()) {
        $breadcrumbs[] = array(
            'url' => '',
            'title' => 'Search results for: ' . get_search_query(),
            'position' => $position++
        );
    }

    // 404
    elseif (is_404()) {
        $breadcrumbs[] = array(
            'url' => '',
            'title' => '404 - Page Not Found',
            'position' => $position++
        );
    }

    // Single post
    elseif (is_single() && !is_attachment()) {
        // Get post type
        $post_type = get_post_type_object(get_post_type());

        // For posts, add category
        if (get_post_type() == 'post') {
            $categories = get_the_category();
            if ($categories) {
                $category = $categories[0];

                // Parent categories
                if ($category->parent != 0) {
                    $parent_cats = array();
                    $parent_id = $category->parent;

                    while ($parent_id) {
                        $parent_cat = get_category($parent_id);
                        $parent_cats[] = array(
                            'url' => get_category_link($parent_cat->term_id),
                            'title' => $parent_cat->name,
                            'position' => 0
                        );
                        $parent_id = $parent_cat->parent;
                    }

                    $parent_cats = array_reverse($parent_cats);
                    foreach ($parent_cats as $cat) {
                        $cat['position'] = $position++;
                        $breadcrumbs[] = $cat;
                    }
                }

                $breadcrumbs[] = array(
                    'url' => get_category_link($category->term_id),
                    'title' => $category->name,
                    'position' => $position++
                );
            }
        }
        // For custom post types
        else {
            $breadcrumbs[] = array(
                'url' => get_post_type_archive_link(get_post_type()),
                'title' => $post_type->labels->name,
                'position' => $position++
            );
        }

        // Current post
        $breadcrumbs[] = array(
            'url' => '',
            'title' => get_the_title(),
            'position' => $position++
        );
    }

    // Pages
    elseif (is_page() && !is_front_page()) {
        // Parent pages
        if ($post->post_parent) {
            $parent_pages = array();
            $parent_id = $post->post_parent;

            while ($parent_id) {
                $page = get_page($parent_id);
                $parent_pages[] = array(
                    'url' => get_permalink($page->ID),
                    'title' => get_the_title($page->ID),
                    'position' => 0
                );
                $parent_id = $page->post_parent;
            }

            $parent_pages = array_reverse($parent_pages);
            foreach ($parent_pages as $page) {
                $page['position'] = $position++;
                $breadcrumbs[] = $page;
            }
        }

        // Current page
        $breadcrumbs[] = array(
            'url' => '',
            'title' => get_the_title(),
            'position' => $position++
        );
    }

    // Attachment
    elseif (is_attachment()) {
        $parent = get_post($post->post_parent);
        $breadcrumbs[] = array(
            'url' => get_permalink($parent),
            'title' => $parent->post_title,
            'position' => $position++
        );
        $breadcrumbs[] = array(
            'url' => '',
            'title' => get_the_title(),
            'position' => $position++
        );
    }

    // Output breadcrumbs
    if (!empty($breadcrumbs)) {
        echo '<nav class="breadcrumbs" aria-label="Breadcrumb">';
        echo '<ol itemscope itemtype="https://schema.org/BreadcrumbList">';

        foreach ($breadcrumbs as $crumb) {
            echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';

            if ($crumb['url']) {
                echo '<a itemprop="item" href="' . esc_url($crumb['url']) . '">';
                echo '<span itemprop="name">' . esc_html($crumb['title']) . '</span>';
                echo '</a>';
            } else {
                echo '<span itemprop="name">' . esc_html($crumb['title']) . '</span>';
            }

            echo '<meta itemprop="position" content="' . $crumb['position'] . '" />';
            echo '</li>';
        }

        echo '</ol>';
        echo '</nav>';
    }
}

// Usage in header.php or other templates:
// advanced_breadcrumbs();</code></pre>

      <h2>CSS Styling for Breadcrumbs</h2>
      <pre><code>/* Basic Breadcrumb Styles */
.breadcrumbs {
    padding: 10px 0;
    margin-bottom: 20px;
    font-size: 14px;
    color: #666;
}

.breadcrumbs ol {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
}

.breadcrumbs li {
    display: flex;
    align-items: center;
}

.breadcrumbs li:not(:last-child)::after {
    content: "›";
    margin: 0 8px;
    color: #999;
}

.breadcrumbs a {
    color: #0066cc;
    text-decoration: none;
    transition: color 0.2s;
}

.breadcrumbs a:hover {
    color: #004499;
    text-decoration: underline;
}

.breadcrumbs li:last-child span {
    color: #333;
    font-weight: 500;
}

/* Mobile responsive */
@media (max-width: 768px) {
    .breadcrumbs {
        font-size: 12px;
    }

    .breadcrumbs li:not(:last-child)::after {
        margin: 0 4px;
    }
}</code></pre>

      <h2>Alternative Separators</h2>
      <pre><code>/* Arrow separator */
.breadcrumbs li:not(:last-child)::after {
    content: "→";
}

/* Slash separator */
.breadcrumbs li:not(:last-child)::after {
    content: "/";
}

/* Double angle */
.breadcrumbs li:not(:last-child)::after {
    content: "»";
}

/* Greater than */
.breadcrumbs li:not(:last-child)::after {
    content: ">";
}

/* SVG icon */
.breadcrumbs li:not(:last-child)::after {
    content: "";
    background: url('data:image/svg+xml,...') center/contain no-repeat;
    width: 16px;
    height: 16px;
    margin: 0 8px;
}</code></pre>

      <h2>JSON-LD Schema Markup Alternative</h2>
      <p>Add structured data as JSON-LD instead of microdata:</p>
      <pre><code>function breadcrumb_schema_json_ld() {
    if (is_front_page()) {
        return;
    }

    global $post;
    $breadcrumbs = array();
    $position = 1;

    // Build breadcrumbs array (same as above)
    // ... [breadcrumb building code] ...

    // Generate JSON-LD
    $schema = array(
        '@context' => 'https://schema.org',
        '@type' => 'BreadcrumbList',
        'itemListElement' => array()
    );

    foreach ($breadcrumbs as $crumb) {
        $item = array(
            '@type' => 'ListItem',
            'position' => $crumb['position'],
            'name' => $crumb['title']
        );

        if ($crumb['url']) {
            $item['item'] = $crumb['url'];
        }

        $schema['itemListElement'][] = $item;
    }

    // Output JSON-LD
    echo '<script type="application/ld+json">';
    echo wp_json_encode($schema, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    echo '</script>';
}
add_action('wp_head', 'breadcrumb_schema_json_ld');</code></pre>

      <h2>Breadcrumb Shortcode</h2>
      <pre><code>// Add breadcrumbs via shortcode
function breadcrumb_shortcode($atts) {
    $atts = shortcode_atts(array(
        'separator' => '›',
        'home_text' => 'Home'
    ), $atts);

    ob_start();
    // Call your breadcrumb function here
    advanced_breadcrumbs();
    return ob_get_clean();
}
add_shortcode('breadcrumbs', 'breadcrumb_shortcode');

// Usage in posts/pages: [breadcrumbs]
// With custom separator: [breadcrumbs separator="/"]</code></pre>

      <h2>Yoast SEO Breadcrumbs Integration</h2>
      <pre><code>// If using Yoast SEO, you can use their breadcrumb function
if (function_exists('yoast_breadcrumb')) {
    yoast_breadcrumb('<nav class="breadcrumbs">', '</nav>');
}

// Or check if breadcrumbs are enabled
if (function_exists('yoast_breadcrumb') &&
    WPSEO_Options::get('breadcrumbs-enable') === true) {
    yoast_breadcrumb();
}</code></pre>

      <h2>WooCommerce Breadcrumbs</h2>
      <pre><code>// Customize WooCommerce breadcrumbs
add_filter('woocommerce_breadcrumb_defaults', 'custom_woocommerce_breadcrumbs');
function custom_woocommerce_breadcrumbs() {
    return array(
        'delimiter'   => ' › ',
        'wrap_before' => '<nav class="woocommerce-breadcrumb">',
        'wrap_after'  => '</nav>',
        'before'      => '',
        'after'       => '',
        'home'        => _x('Home', 'breadcrumb', 'woocommerce')
    );
}

// Display WooCommerce breadcrumbs
if (function_exists('woocommerce_breadcrumb')) {
    woocommerce_breadcrumb();
}</code></pre>

      <h2>Best Practices</h2>
      <table>
        <thead>
          <tr>
            <th>Practice</th>
            <th>Why It Matters</th>
            <th>Implementation</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Add Schema markup</td>
            <td>Helps search engines display breadcrumbs in results</td>
            <td>Use microdata or JSON-LD</td>
          </tr>
          <tr>
            <td>Don't show on homepage</td>
            <td>Redundant - user is already home</td>
            <td>if (!is_front_page())</td>
          </tr>
          <tr>
            <td>Make last item non-clickable</td>
            <td>Represents current page</td>
            <td>Use <span> not <a></td>
          </tr>
          <tr>
            <td>Show full hierarchy</td>
            <td>Complete navigation path</td>
            <td>Include all parent pages/categories</td>
          </tr>
          <tr>
            <td>Use semantic HTML</td>
            <td>Better accessibility</td>
            <td><nav> and <ol> elements</td>
          </tr>
          <tr>
            <td>Add ARIA labels</td>
            <td>Screen reader support</td>
            <td>aria-label="Breadcrumb"</td>
          </tr>
          <tr>
            <td>Mobile-friendly</td>
            <td>Works on all devices</td>
            <td>Responsive CSS, truncate if needed</td>
          </tr>
        </tbody>
      </table>

      <h2>Common Breadcrumb Patterns</h2>
      <ul>
        <li><strong>Blog Post:</strong> Home › Category › Post Title</li>
        <li><strong>Page with Parents:</strong> Home › Parent Page › Child Page</li>
        <li><strong>Product:</strong> Home › Shop › Category › Product</li>
        <li><strong>Archive:</strong> Home › Category Archive</li>
        <li><strong>Author:</strong> Home › Author: John Doe</li>
        <li><strong>Search:</strong> Home › Search Results</li>
        <li><strong>Date:</strong> Home › 2025 › January › 15</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Minimal performance impact.</strong> Breadcrumb generation involves a few database queries to fetch parent pages/categories, but these are lightweight. The Schema markup adds a small amount of HTML/JSON but provides significant SEO benefits. Consider caching breadcrumbs for high-traffic sites if performance becomes a concern.</p>
    `,
    code: `function custom_breadcrumbs() {
    if (is_front_page()) {
        return;
    }

    global $post;

    echo '<nav class="breadcrumbs" aria-label="Breadcrumb">';
    echo '<ol itemscope itemtype="https://schema.org/BreadcrumbList">';

    // Home
    echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';
    echo '<a itemprop="item" href="' . home_url('/') . '">';
    echo '<span itemprop="name">Home</span></a>';
    echo '<meta itemprop="position" content="1" /></li>';

    if (is_category()) {
        $category = get_queried_object();
        echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';
        echo '<span itemprop="name">' . $category->name . '</span>';
        echo '<meta itemprop="position" content="2" /></li>';
    }

    if (is_single()) {
        $categories = get_the_category();
        if ($categories) {
            $category = $categories[0];
            echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';
            echo '<a itemprop="item" href="' . get_category_link($category) . '">';
            echo '<span itemprop="name">' . $category->name . '</span></a>';
            echo '<meta itemprop="position" content="2" /></li>';
        }
        echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';
        echo '<span itemprop="name">' . get_the_title() . '</span>';
        echo '<meta itemprop="position" content="3" /></li>';
    }

    if (is_page()) {
        echo '<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">';
        echo '<span itemprop="name">' . get_the_title() . '</span>';
        echo '<meta itemprop="position" content="2" /></li>';
    }

    echo '</ol></nav>';
}`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '9 min read',
    category: 'WordPress Theme Development',
    tags: ['Breadcrumbs', 'Navigation', 'SEO', 'Schema.org', 'Accessibility'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'WordPress Breadcrumb Navigation Tutorial | SEO-Friendly with Schema',
      metaDescription: 'Create custom breadcrumb navigation in WordPress without plugins. Complete guide with Schema.org markup, accessibility, and SEO best practices.',
      keywords: ['wordpress breadcrumbs', 'breadcrumb navigation', 'schema org breadcrumbs', 'wordpress seo navigation', 'custom breadcrumbs wordpress', 'breadcrumb without plugin'],
      canonical: '/blog/breadcrumbs-without-plugin',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Add Breadcrumb Navigation in WordPress",
        "description": "Complete guide to creating SEO-friendly breadcrumb navigation with Schema.org structured data",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Should breadcrumbs be displayed on the homepage?",
        answer: "No, breadcrumbs should not appear on the homepage. The homepage is the starting point of your site hierarchy, so displaying 'Home' breadcrumb would be redundant. Always check if (!is_front_page()) before rendering breadcrumbs. This is a common best practice followed by major websites and recommended by SEO experts."
      },
      {
        question: "What's the difference between microdata and JSON-LD for breadcrumb Schema markup?",
        answer: "Both are valid ways to add Schema.org structured data. Microdata is embedded directly in the HTML (using itemscope, itemprop attributes), while JSON-LD is a separate script block in the page head. Google recommends JSON-LD because it's easier to maintain and doesn't clutter your HTML. However, microdata works perfectly fine and some developers prefer it for keeping markup and data together."
      },
      {
        question: "How do breadcrumbs help with SEO?",
        answer: "Breadcrumbs improve SEO in multiple ways: 1) They help search engines understand your site structure and page hierarchy, 2) Google often displays breadcrumbs in search results instead of the URL, making listings more appealing, 3) They create additional internal links that help distribute page authority, 4) Schema markup helps search engines parse breadcrumbs correctly. Proper breadcrumb implementation can improve click-through rates from search results."
      },
      {
        question: "Should the last breadcrumb item (current page) be a link?",
        answer: "No, the last breadcrumb representing the current page should not be a link. It should be plain text (using <span>) because clicking it would just reload the same page, which is poor UX. This is the standard convention and what users expect. Only intermediate breadcrumb items should be clickable links."
      },
      {
        question: "How can I make breadcrumbs mobile-friendly?",
        answer: "For mobile, consider: 1) Using smaller font sizes (12-14px), 2) Reducing padding/margins, 3) Truncating long breadcrumbs showing only 'Home > ... > Current Page', 4) Using compact separators like '>' instead of arrows, 5) Making breadcrumb links large enough to tap (44x44px minimum), 6) Using horizontal scrolling for very long breadcrumbs. Test on actual devices to ensure breadcrumbs remain usable on small screens."
      }
    ]
  },
  {
    id: 30,
    slug: 'custom-page-templates',
    title: 'Create Custom Page Templates',
    excerpt: 'Design custom page templates in WordPress to create unique layouts for different pages like landing pages, full-width layouts, or contact pages.',
    content: `
      <h2>WordPress Page Templates</h2>
      <p>Page templates allow you to create different layouts for different pages in WordPress. Instead of every page looking the same, you can design specialized templates for landing pages, portfolios, contact pages, and more. This gives you complete control over the structure and appearance of individual pages.</p>

      <h3>Benefits of Custom Page Templates</h3>
      <ul>
        <li><strong>Flexible Layouts:</strong> Different designs for different page types</li>
        <li><strong>Full Width Pages:</strong> Remove sidebars for landing pages</li>
        <li><strong>Custom Functionality:</strong> Add unique features to specific pages</li>
        <li><strong>Better User Experience:</strong> Optimized layouts for specific purposes</li>
        <li><strong>No Plugins Required:</strong> Native WordPress functionality</li>
        <li><strong>Easy Selection:</strong> Admins can choose templates from page editor</li>
      </ul>

      <h2>Basic Page Template Creation</h2>
      <p>Create a new PHP file in your theme directory with a template header:</p>
      <pre><code><?php
/**
 * Template Name: Full Width Page
 * Template Post Type: page
 * Description: A full-width page template without sidebar
 */

get_header();
?>

<div class="full-width-container">
    <main id="main" class="site-main">
        <?php
        while (have_posts()) :
            the_post();
            ?>
            <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                <header class="entry-header">
                    <h1 class="entry-title"><?php the_title(); ?></h1>
                </header>

                <div class="entry-content">
                    <?php the_content(); ?>
                </div>
            </article>
            <?php
        endwhile;
        ?>
    </main>
</div>

<?php
get_footer();</code></pre>

      <h2>Template Header Comments</h2>
      <p>The comment block at the top defines the template:</p>
      <pre><code>/**
 * Template Name: Landing Page
 * Template Post Type: page, post, product
 * Description: Custom landing page with hero section
 */

// Template Name: Required - appears in page editor dropdown
// Template Post Type: Optional - which post types can use this (default: page)
// Description: Optional - shown in template selector</code></pre>

      <h2>Complete Landing Page Template Example</h2>
      <pre><code><?php
/**
 * Template Name: Landing Page
 * Description: Full-width landing page without header/footer navigation
 */

// Custom header for landing page
?>
<!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo('charset'); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <?php wp_head(); ?>
</head>
<body <?php body_class('landing-page'); ?>>

<div class="landing-page-wrapper">
    <?php while (have_posts()) : the_post(); ?>

        <!-- Hero Section -->
        <section class="hero-section">
            <div class="hero-content">
                <h1><?php the_title(); ?></h1>
                <?php if (get_field('hero_subtitle')): ?>
                    <p class="hero-subtitle"><?php the_field('hero_subtitle'); ?></p>
                <?php endif; ?>
                <a href="#contact" class="cta-button">Get Started</a>
            </div>
        </section>

        <!-- Main Content -->
        <section class="main-content">
            <div class="container">
                <?php the_content(); ?>
            </div>
        </section>

        <!-- Features Section -->
        <?php if (have_rows('features')): ?>
            <section class="features-section">
                <div class="container">
                    <div class="features-grid">
                        <?php while (have_rows('features')): the_row(); ?>
                            <div class="feature-item">
                                <h3><?php the_sub_field('feature_title'); ?></h3>
                                <p><?php the_sub_field('feature_description'); ?></p>
                            </div>
                        <?php endwhile; ?>
                    </div>
                </div>
            </section>
        <?php endif; ?>

        <!-- Contact Form Section -->
        <section id="contact" class="contact-section">
            <div class="container">
                <h2>Get In Touch</h2>
                <?php echo do_shortcode('[contact-form-7 id="123"]'); ?>
            </div>
        </section>

    <?php endwhile; ?>
</div>

<?php wp_footer(); ?>
</body>
</html></code></pre>

      <h2>Portfolio Template Example</h2>
      <pre><code><?php
/**
 * Template Name: Portfolio Grid
 * Description: Display portfolio items in a grid layout
 */

get_header();
?>

<div class="portfolio-template">
    <header class="page-header">
        <h1 class="page-title"><?php the_title(); ?></h1>
        <?php the_content(); ?>
    </header>

    <div class="portfolio-grid">
        <?php
        // Query portfolio items
        $portfolio_args = array(
            'post_type'      => 'portfolio',
            'posts_per_page' => 12,
            'orderby'        => 'date',
            'order'          => 'DESC'
        );

        $portfolio_query = new WP_Query($portfolio_args);

        if ($portfolio_query->have_posts()) :
            while ($portfolio_query->have_posts()) : $portfolio_query->the_post();
                ?>
                <article class="portfolio-item">
                    <a href="<?php the_permalink(); ?>">
                        <?php if (has_post_thumbnail()): ?>
                            <?php the_post_thumbnail('portfolio-thumb'); ?>
                        <?php endif; ?>
                        <div class="portfolio-overlay">
                            <h3><?php the_title(); ?></h3>
                            <?php
                            $categories = get_the_terms(get_the_ID(), 'portfolio_category');
                            if ($categories) {
                                echo '<span class="category">' . $categories[0]->name . '</span>';
                            }
                            ?>
                        </div>
                    </a>
                </article>
                <?php
            endwhile;
            wp_reset_postdata();
        else:
            echo '<p>No portfolio items found.</p>';
        endif;
        ?>
    </div>
</div>

<?php
get_footer();</code></pre>

      <h2>Sidebar Options Template</h2>
      <pre><code><?php
/**
 * Template Name: Left Sidebar
 * Description: Page with left sidebar layout
 */

get_header();
?>

<div class="content-sidebar-wrap">
    <?php get_sidebar('left'); ?>

    <main id="main" class="site-main">
        <?php
        while (have_posts()) :
            the_post();
            get_template_part('template-parts/content', 'page');
        endwhile;
        ?>
    </main>
</div>

<?php
get_footer();</code></pre>

      <h2>Template for Multiple Post Types</h2>
      <pre><code><?php
/**
 * Template Name: Testimonials Page
 * Template Post Type: page, post
 * Description: Display testimonials in a carousel
 */

get_header();
?>

<div class="testimonials-template">
    <?php while (have_posts()) : the_post(); ?>
        <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
            <header class="entry-header">
                <h1><?php the_title(); ?></h1>
                <?php the_content(); ?>
            </header>

            <div class="testimonials-carousel">
                <?php
                $testimonials = new WP_Query(array(
                    'post_type'      => 'testimonial',
                    'posts_per_page' => 10,
                    'orderby'        => 'rand'
                ));

                if ($testimonials->have_posts()) :
                    while ($testimonials->have_posts()) : $testimonials->the_post();
                        ?>
                        <div class="testimonial-slide">
                            <blockquote>
                                <?php the_content(); ?>
                                <footer>
                                    <cite>
                                        <?php echo get_post_meta(get_the_ID(), '_client_name', true); ?>
                                        <?php
                                        $company = get_post_meta(get_the_ID(), '_company', true);
                                        if ($company) {
                                            echo ', ' . esc_html($company);
                                        }
                                        ?>
                                    </cite>
                                </footer>
                            </blockquote>
                        </div>
                        <?php
                    endwhile;
                    wp_reset_postdata();
                endif;
                ?>
            </div>
        </article>
    <?php endwhile; ?>
</div>

<?php
get_footer();</code></pre>

      <h2>Blank/Canvas Template</h2>
      <pre><code><?php
/**
 * Template Name: Blank Canvas
 * Description: Blank page without header/footer for page builders
 */
?>
<!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo('charset'); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <?php wp_head(); ?>
</head>
<body <?php body_class('blank-template'); ?>>

<?php
while (have_posts()) :
    the_post();
    the_content();
endwhile;
?>

<?php wp_footer(); ?>
</body>
</html></code></pre>

      <h2>Template with Custom Query</h2>
      <pre><code><?php
/**
 * Template Name: Blog Archive
 * Description: Custom blog archive with filtering
 */

get_header();
?>

<div class="custom-blog-archive">
    <header class="archive-header">
        <h1><?php the_title(); ?></h1>

        <!-- Category Filter -->
        <div class="archive-filters">
            <?php
            $categories = get_categories(array('hide_empty' => true));
            foreach ($categories as $category) {
                echo '<a href="' . get_category_link($category->term_id) . '" class="filter-btn">';
                echo esc_html($category->name) . ' (' . $category->count . ')';
                echo '</a>';
            }
            ?>
        </div>
    </header>

    <div class="archive-posts">
        <?php
        $paged = (get_query_var('paged')) ? get_query_var('paged') : 1;

        $blog_args = array(
            'post_type'      => 'post',
            'posts_per_page' => 10,
            'paged'          => $paged,
            'orderby'        => 'date',
            'order'          => 'DESC'
        );

        $blog_query = new WP_Query($blog_args);

        if ($blog_query->have_posts()) :
            while ($blog_query->have_posts()) : $blog_query->the_post();
                get_template_part('template-parts/content', 'excerpt');
            endwhile;

            // Pagination
            echo '<div class="pagination">';
            echo paginate_links(array(
                'total'   => $blog_query->max_num_pages,
                'current' => $paged
            ));
            echo '</div>';

            wp_reset_postdata();
        else:
            echo '<p>No posts found.</p>';
        endif;
        ?>
    </div>
</div>

<?php
get_footer();</code></pre>

      <h2>Conditional Template Logic</h2>
      <pre><code><?php
/**
 * Template Name: Flexible Layout
 * Description: Template with conditional sections
 */

get_header();

// Check if user is logged in
$is_logged_in = is_user_logged_in();

// Get template options from meta
$show_sidebar = get_post_meta(get_the_ID(), '_show_sidebar', true);
$header_style = get_post_meta(get_the_ID(), '_header_style', true);
?>

<div class="flexible-template <?php echo $show_sidebar ? 'has-sidebar' : 'full-width'; ?>">

    <?php if ($header_style === 'hero'): ?>
        <div class="hero-header" style="background-image: url(<?php echo get_the_post_thumbnail_url(get_the_ID(), 'full'); ?>);">
            <h1><?php the_title(); ?></h1>
        </div>
    <?php else: ?>
        <header class="standard-header">
            <h1><?php the_title(); ?></h1>
        </header>
    <?php endif; ?>

    <div class="content-area">
        <?php if ($show_sidebar): ?>
            <div class="with-sidebar-layout">
                <main class="main-content">
                    <?php
                    while (have_posts()) :
                        the_post();
                        the_content();
                    endwhile;
                    ?>
                </main>
                <?php get_sidebar(); ?>
            </div>
        <?php else: ?>
            <main class="full-width-content">
                <?php
                while (have_posts()) :
                    the_post();
                    the_content();
                endwhile;
                ?>
            </main>
        <?php endif; ?>
    </div>

    <?php if ($is_logged_in): ?>
        <section class="members-only">
            <h2>Exclusive Member Content</h2>
            <?php echo do_shortcode('[members_content]'); ?>
        </section>
    <?php endif; ?>
</div>

<?php
get_footer();</code></pre>

      <h2>Template Parts for Reusability</h2>
      <pre><code>// template-parts/content-page.php
<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
    <header class="entry-header">
        <?php the_title('<h1 class="entry-title">', '</h1>'); ?>
    </header>

    <div class="entry-content">
        <?php the_content(); ?>
        <?php
        wp_link_pages(array(
            'before' => '<div class="page-links">Pages:',
            'after'  => '</div>'
        ));
        ?>
    </div>
</article>

// Use in template:
get_template_part('template-parts/content', 'page');</code></pre>

      <h2>Template Hierarchy Override</h2>
      <pre><code>// WordPress looks for templates in this order:
// 1. Custom template selected in page editor
// 2. page-{slug}.php (e.g., page-about.php)
// 3. page-{id}.php (e.g., page-42.php)
// 4. page.php
// 5. singular.php
// 6. index.php

// Example: page-about.php (for page with slug "about")
<?php get_header(); ?>

<div class="about-page">
    <!-- Custom about page layout -->
</div>

<?php get_footer(); ?></code></pre>

      <h2>Programmatically Set Template</h2>
      <pre><code>// Force a template for specific pages
function assign_custom_template($template) {
    if (is_page('contact')) {
        $new_template = locate_template(array('page-templates/contact.php'));
        if ($new_template) {
            return $new_template;
        }
    }
    return $template;
}
add_filter('template_include', 'assign_custom_template');</code></pre>

      <h2>Best Practices</h2>
      <table>
        <thead>
          <tr>
            <th>Practice</th>
            <th>Why It Matters</th>
            <th>Implementation</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Use template parts</td>
            <td>Keeps code DRY and maintainable</td>
            <td>get_template_part()</td>
          </tr>
          <tr>
            <td>Descriptive template names</td>
            <td>Easy for admins to understand</td>
            <td>"Landing Page" not "Template 1"</td>
          </tr>
          <tr>
            <td>Store in subdirectory</td>
            <td>Organizes theme files</td>
            <td>page-templates/landing.php</td>
          </tr>
          <tr>
            <td>Include get_header/footer</td>
            <td>Maintains site consistency</td>
            <td>Unless building blank template</td>
          </tr>
          <tr>
            <td>Reset query after WP_Query</td>
            <td>Prevents conflicts</td>
            <td>wp_reset_postdata()</td>
          </tr>
          <tr>
            <td>Use body_class()</td>
            <td>Enables template-specific CSS</td>
            <td>body_class('landing-page')</td>
          </tr>
          <tr>
            <td>Add descriptions</td>
            <td>Helps users choose right template</td>
            <td>Template Description comment</td>
          </tr>
        </tbody>
      </table>

      <h2>Common Template Types</h2>
      <ul>
        <li><strong>Full Width:</strong> No sidebar for landing pages or focused content</li>
        <li><strong>Blank/Canvas:</strong> No header/footer for page builders</li>
        <li><strong>Portfolio Grid:</strong> Display work/projects in grid layout</li>
        <li><strong>Contact:</strong> Custom contact page with forms and maps</li>
        <li><strong>Archive:</strong> Custom post type archives with filtering</li>
        <li><strong>Sidebar Variations:</strong> Left sidebar, right sidebar, both</li>
        <li><strong>Coming Soon:</strong> Maintenance mode or launch pages</li>
        <li><strong>Testimonials:</strong> Display customer reviews/testimonials</li>
      </ul>

      <h2>Template File Naming</h2>
      <pre><code>// Option 1: Root directory (simple themes)
your-theme/
  ├── template-landing.php
  ├── template-portfolio.php
  └── template-contact.php

// Option 2: Subdirectory (organized themes)
your-theme/
  ├── page-templates/
  │   ├── landing.php
  │   ├── portfolio.php
  │   └── contact.php

// Both work - WordPress finds them automatically
// Subdirectory is preferred for organization</code></pre>

      <h2>Performance Impact</h2>
      <p><strong>No performance impact.</strong> Page templates are just alternative PHP files - there's no performance difference between using a custom template versus the default page.php. However, be mindful of custom queries (WP_Query) within templates, as complex queries can slow page load. Always use wp_reset_postdata() and consider query caching for heavy queries.</p>
    `,
    code: `<?php
/**
 * Template Name: Full Width Page
 * Template Post Type: page
 * Description: A full-width layout without sidebar
 */

get_header();
?>

<div class="full-width-wrapper">
    <main id="main" class="site-main">
        <?php
        while (have_posts()) :
            the_post();
            ?>
            <article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
                <header class="entry-header">
                    <h1 class="entry-title"><?php the_title(); ?></h1>
                </header>

                <div class="entry-content">
                    <?php
                    the_content();

                    wp_link_pages(array(
                        'before' => '<div class="page-links">' . __('Pages:', 'textdomain'),
                        'after'  => '</div>',
                    ));
                    ?>
                </div>
            </article>
            <?php
        endwhile;
        ?>
    </main>
</div>

<?php
get_footer();`,
    author: 'Shahmir Khan',
    date: '2025-01-29',
    readTime: '9 min read',
    category: 'WordPress Theme Development',
    tags: ['Templates', 'Page Templates', 'Theme Development', 'Layouts', 'Custom Pages'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.7+',
    seo: {
      metaTitle: 'WordPress Custom Page Templates Guide | Create Unique Page Layouts',
      metaDescription: 'Learn how to create custom page templates in WordPress. Complete guide to designing landing pages, portfolios, full-width layouts, and more.',
      keywords: ['wordpress page templates', 'custom page template', 'wordpress template name', 'page template wordpress', 'wordpress landing page template', 'full width template wordpress'],
      canonical: '/blog/custom-page-templates',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Create Custom Page Templates in WordPress",
        "description": "Complete guide to creating custom page templates for unique layouts in WordPress themes",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-29",
        "dateModified": "2025-01-29",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Where should I save custom page template files in my theme?",
        answer: "You can save them either in the theme root directory or in a page-templates/ subdirectory - WordPress will find them in either location. For better organization, especially with multiple templates, use a subdirectory like page-templates/ or templates/. The file must have the Template Name comment at the top to appear in the page editor dropdown."
      },
      {
        question: "Can I create page templates for custom post types?",
        answer: "Yes! Use the 'Template Post Type' comment to specify which post types can use the template. Example: Template Post Type: page, post, product. This makes the template available in the template selector for those post types. Without this line, templates default to only pages."
      },
      {
        question: "What's the difference between page templates and template hierarchy files?",
        answer: "Page templates (with Template Name comment) are manually selected by the user in the page editor. Template hierarchy files like page-about.php or page-42.php are automatically used based on the page slug or ID - no manual selection needed. Page templates offer more flexibility as they can be applied to any page, while hierarchy files are tied to specific pages."
      },
      {
        question: "Do I need to include get_header() and get_footer() in custom templates?",
        answer: "Usually yes, unless you're creating a blank/canvas template for page builders. get_header() and get_footer() ensure your site maintains consistent navigation, branding, and functionality. They also include essential wp_head() and wp_footer() hooks that plugins and WordPress core rely on. Only omit them if you're intentionally creating a standalone page."
      },
      {
        question: "How do I add custom CSS for a specific page template?",
        answer: "WordPress automatically adds body classes including the template filename (e.g., page-template-landing). Target this in your CSS: .page-template-landing { /* styles */ }. You can also add custom body classes using body_class('my-custom-class') in your template, or enqueue template-specific stylesheets conditionally using is_page_template('page-templates/landing.php')."
      }
    ]
  },
  {
    id: 31,
    slug: 'change-excerpt-length',
    title: 'Customize Excerpt Length',
    excerpt: 'Control the length of WordPress post excerpts by modifying word count and ending text using built-in filters.',
    content: `
      <h2>WordPress Excerpt System</h2>
      <p>WordPress automatically generates excerpts from post content when you use the_excerpt(). By default, excerpts are limited to 55 words and end with "[...]". You can customize both the length and the ending text to match your theme's design.</p>

      <h3>Why Customize Excerpts?</h3>
      <ul>
        <li><strong>Better Control:</strong> Match excerpt length to your design</li>
        <li><strong>Consistency:</strong> Uniform content previews across your site</li>
        <li><strong>User Experience:</strong> Appropriate preview length for different layouts</li>
        <li><strong>Call to Action:</strong> Custom "Read More" text</li>
        <li><strong>SEO:</strong> Control meta descriptions derived from excerpts</li>
      </ul>

      <h2>Change Excerpt Length</h2>
      <pre><code>// Change default excerpt length from 55 words
function custom_excerpt_length($length) {
    return 30; // Change to desired word count
}
add_filter('excerpt_length', 'custom_excerpt_length');</code></pre>

      <h2>Change Excerpt Ending ("[...]")</h2>
      <pre><code>// Change the default "[...]" ending
function custom_excerpt_more($more) {
    return '...';
}
add_filter('excerpt_more', 'custom_excerpt_more');

// Or add a "Read More" link
function custom_excerpt_more_link($more) {
    global $post;
    return '... <a class="read-more" href="' . get_permalink($post->ID) . '">Read More &raquo;</a>';
}
add_filter('excerpt_more', 'custom_excerpt_more_link');</code></pre>

      <h2>Complete Excerpt Customization</h2>
      <pre><code>// Customize both length and ending
function mytheme_excerpt_length($length) {
    return 40; // 40 words
}
add_filter('excerpt_length', 'mytheme_excerpt_length');

function mytheme_excerpt_more($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s">%s</a>',
        esc_url(get_permalink()),
        __('Continue Reading', 'textdomain')
    );
}
add_filter('excerpt_more', 'mytheme_excerpt_more');</code></pre>

      <h2>Different Excerpt Lengths for Different Post Types</h2>
      <pre><code>function custom_excerpt_length_by_post_type($length) {
    global $post;

    if ($post->post_type === 'post') {
        return 50;
    } elseif ($post->post_type === 'portfolio') {
        return 20;
    } elseif ($post->post_type === 'product') {
        return 15;
    }

    return $length; // Default
}
add_filter('excerpt_length', 'custom_excerpt_length_by_post_type');</code></pre>

      <h2>Context-Specific Excerpt Length</h2>
      <pre><code>// Different lengths for archive vs single pages
function context_specific_excerpt_length($length) {
    if (is_archive()) {
        return 25; // Shorter on archives
    } elseif (is_search()) {
        return 35; // Medium on search results
    } elseif (is_home()) {
        return 40; // Longer on blog homepage
    }

    return $length;
}
add_filter('excerpt_length', 'context_specific_excerpt_length');</code></pre>

      <h2>Character-Based Excerpt (Instead of Words)</h2>
      <pre><code>// Limit by characters instead of words
function character_based_excerpt($length = 200) {
    $text = get_the_excerpt();

    if (strlen($text) > $length) {
        $text = substr($text, 0, $length);
        // Find last complete word
        $text = substr($text, 0, strrpos($text, ' '));
        $text .= '...';
    }

    return $text;
}

// Usage in template:
// echo character_based_excerpt(150);</code></pre>

      <h2>Custom Excerpt Function with Options</h2>
      <pre><code>function custom_excerpt($length = 40, $more = '...', $strip_tags = true) {
    global $post;

    // If manual excerpt exists, use it
    if (has_excerpt()) {
        $excerpt = get_the_excerpt();
    } else {
        $excerpt = $post->post_content;
    }

    // Strip tags if requested
    if ($strip_tags) {
        $excerpt = strip_tags($excerpt);
        $excerpt = strip_shortcodes($excerpt);
    }

    // Limit to words
    $words = explode(' ', $excerpt, $length + 1);

    if (count($words) > $length) {
        array_pop($words);
        $excerpt = implode(' ', $words) . $more;
    }

    return $excerpt;
}

// Usage in templates:
// echo custom_excerpt(30, '...');
// echo custom_excerpt(50, ' <a href="' . get_permalink() . '">Read more</a>');</code></pre>

      <h2>Preserve HTML in Excerpts</h2>
      <pre><code>// Keep HTML formatting in excerpts
function html_excerpt($text = '', $length = 55, $more = '...') {
    if ($text === '') {
        $text = get_the_content('');
        $text = strip_shortcodes($text);
        $text = apply_filters('the_content', $text);
    }

    // Allowed HTML tags
    $text = strip_tags($text, '<p><br><strong><em><a><ul><li><ol>');

    // Limit to words while preserving HTML
    $words = explode(' ', $text, $length + 1);

    if (count($words) > $length) {
        array_pop($words);
        $text = implode(' ', $words) . $more;
    }

    // Balance HTML tags
    $text = force_balance_tags($text);

    return $text;
}

// Usage:
// echo html_excerpt(get_the_excerpt(), 40, '...');</code></pre>

      <h2>Remove Excerpt More Link</h2>
      <pre><code>// Completely remove the [...] or "more" link
function remove_excerpt_more($more) {
    return '';
}
add_filter('excerpt_more', 'remove_excerpt_more');</code></pre>

      <h2>Add Read More Button</h2>
      <pre><code>function styled_excerpt_more($more) {
    return sprintf(
        '<a class="btn btn-primary read-more" href="%s">%s</a>',
        esc_url(get_permalink()),
        __('Read Full Article', 'textdomain')
    );
}
add_filter('excerpt_more', 'styled_excerpt_more');

// CSS for button styling
/* .read-more {
    display: inline-block;
    padding: 10px 20px;
    background: #0066cc;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    margin-top: 10px;
} */</code></pre>

      <h2>Excerpt with Icon</h2>
      <pre><code>function excerpt_more_with_icon($more) {
    return sprintf(
        ' <a class="more-link" href="%s"><span class="icon">→</span> %s</a>',
        esc_url(get_permalink()),
        __('Continue Reading', 'textdomain')
    );
}
add_filter('excerpt_more', 'excerpt_more_with_icon');</code></pre>

      <h2>Different Excerpts for Different Categories</h2>
      <pre><code>function category_specific_excerpt_length($length) {
    if (has_category('news')) {
        return 30; // Shorter for news
    } elseif (has_category('tutorials')) {
        return 60; // Longer for tutorials
    }

    return $length;
}
add_filter('excerpt_length', 'category_specific_excerpt_length');</code></pre>

      <h2>Smart Excerpt (Ends at Sentence)</h2>
      <pre><code>function smart_excerpt($length = 40) {
    global $post;

    $text = $post->post_content;
    $text = strip_tags($text);
    $text = strip_shortcodes($text);

    $words = explode(' ', $text, $length + 1);

    if (count($words) > $length) {
        array_pop($words);
        $text = implode(' ', $words);

        // Find last sentence end
        $last_period = strrpos($text, '.');
        $last_exclaim = strrpos($text, '!');
        $last_question = strrpos($text, '?');

        $last_sentence = max($last_period, $last_exclaim, $last_question);

        if ($last_sentence !== false && $last_sentence > strlen($text) / 2) {
            $text = substr($text, 0, $last_sentence + 1);
        } else {
            $text .= '...';
        }
    }

    return $text;
}

// Usage:
// echo smart_excerpt(50);</code></pre>

      <h2>Display in Templates</h2>
      <pre><code><!-- Default WordPress excerpt -->
<?php the_excerpt(); ?>

<!-- Manual excerpt with custom function -->
<?php echo custom_excerpt(30, '...'); ?>

<!-- Check if excerpt exists before displaying -->
<?php if (has_excerpt()): ?>
    <div class="excerpt">
        <?php the_excerpt(); ?>
    </div>
<?php else: ?>
    <div class="excerpt">
        <?php echo custom_excerpt(40, '...'); ?>
    </div>
<?php endif; ?>

<!-- Get excerpt without echoing -->
<?php
$excerpt = get_the_excerpt();
echo '<p>' . $excerpt . '</p>';
?></code></pre>

      <h2>Excerpt vs Content</h2>
      <table>
        <thead>
          <tr>
            <th>Function</th>
            <th>Purpose</th>
            <th>When to Use</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>the_excerpt()</td>
            <td>Short summary (auto-generated or manual)</td>
            <td>Blog archives, search results, related posts</td>
          </tr>
          <tr>
            <td>the_content()</td>
            <td>Full post content</td>
            <td>Single post pages, full article display</td>
          </tr>
          <tr>
            <td>the_content('Read More')</td>
            <td>Content with <!--more--> tag</td>
            <td>Partial content with manual break point</td>
          </tr>
          <tr>
            <td>get_the_excerpt()</td>
            <td>Returns excerpt without displaying</td>
            <td>Custom excerpt manipulation</td>
          </tr>
        </tbody>
      </table>

      <h2>Best Practices</h2>
      <ul>
        <li><strong>Consistent Length:</strong> Use same excerpt length across similar contexts</li>
        <li><strong>Manual Excerpts:</strong> Write custom excerpts for important posts</li>
        <li><strong>Escape Output:</strong> Use esc_html() or wp_kses_post() when displaying excerpts</li>
        <li><strong>Responsive Design:</strong> Consider mobile-friendly excerpt lengths</li>
        <li><strong>Don't Strip All HTML:</strong> Preserve formatting tags if needed</li>
        <li><strong>Test Different Lengths:</strong> Find optimal length for your design</li>
        <li><strong>Include CTA:</strong> Add "Read More" link for better engagement</li>
      </ul>

      <h2>Performance Impact</h2>
      <p><strong>Negligible performance impact.</strong> Excerpt generation is a simple text manipulation operation that happens during template rendering. The filters add minimal overhead. However, avoid complex operations inside excerpt filters (like database queries) as they run for every post in archives.</p>
    `,
    code: `// Customize excerpt length
function custom_excerpt_length($length) {
    return 30; // Change to your desired word count
}
add_filter('excerpt_length', 'custom_excerpt_length');

// Customize excerpt ending and add "Read More" link
function custom_excerpt_more($more) {
    return sprintf(
        ' <a class="read-more" href="%s">%s</a>',
        esc_url(get_permalink()),
        __('Read More', 'textdomain')
    );
}
add_filter('excerpt_more', 'custom_excerpt_more');

// Usage in templates:
// <?php the_excerpt(); ?>`,
    author: 'Shahmir Khan',
    date: '2025-01-30',
    readTime: '7 min read',
    category: 'WordPress Content',
    tags: ['Excerpts', 'Content', 'Filters', 'Customization'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.9+',
    seo: {
      metaTitle: 'How to Customize WordPress Excerpt Length | Change Word Count & More Text',
      metaDescription: 'Learn how to customize WordPress excerpt length and "Read More" text using excerpt_length and excerpt_more filters. Includes code examples and best practices.',
      keywords: ['wordpress excerpt length', 'customize excerpt', 'excerpt_length filter', 'excerpt_more', 'wordpress read more', 'change excerpt length'],
      canonical: '/blog/change-excerpt-length',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Customize WordPress Excerpt Length",
        "description": "Complete guide to customizing WordPress excerpt length and more text",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-30",
        "dateModified": "2025-01-30",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the default WordPress excerpt length?",
        answer: "By default, WordPress limits excerpts to 55 words and ends them with '[...]'. You can change both the word count using the excerpt_length filter and the ending text using the excerpt_more filter. These filters give you complete control over how excerpts appear throughout your site."
      },
      {
        question: "Can I have different excerpt lengths for different post types?",
        answer: "Yes! Check the global $post variable inside your excerpt_length filter function and return different lengths based on $post->post_type. For example, return 50 for posts, 20 for products, and 30 for portfolio items. This allows you to tailor excerpt length to each content type's needs."
      },
      {
        question: "How do I create character-based excerpts instead of word-based?",
        answer: "Use get_the_excerpt() or get_the_content(), then use substr() to limit characters. Remember to find the last complete word using strrpos() to avoid cutting words in half. Example: $text = substr($text, 0, strrpos(substr($text, 0, 200), ' ')) . '...'; This creates a 200-character excerpt that ends at a word boundary."
      },
      {
        question: "Should I use the_excerpt() or the_content('Read More') in archives?",
        answer: "Use the_excerpt() in archives for consistent, controlled content previews. Use the_content('Read More') only when you want to respect manual <!--more--> tags placed by authors. the_excerpt() is better for archives because it provides uniform length across all posts, while the_content() with <!--more--> tag can vary significantly."
      },
      {
        question: "How do I keep HTML formatting in excerpts?",
        answer: "By default, the_excerpt() strips all HTML. To preserve formatting, use strip_tags() with allowed tags parameter: strip_tags($text, '<p><strong><em><a>'). Then use force_balance_tags() to ensure proper HTML structure. Alternatively, use wp_trim_words() which preserves some HTML while limiting word count."
      }
    ]
  },
  {
    id: 32,
    slug: 'custom-read-more-text',
    title: 'Change Read More Link Text',
    excerpt: 'Customize the "Read More" link text and styling in WordPress using excerpt_more and the_content_more_link filters.',
    content: `
      <h2>WordPress Read More Links</h2>
      <p>WordPress displays "Read More" links in two contexts: in excerpts (the_excerpt) and when using the <!--more--> tag in post content (the_content). You can customize both the text and appearance of these links to match your site's design and improve user engagement.</p>

      <h3>Benefits of Custom Read More Links</h3>
      <ul>
        <li><strong>Better CTR:</strong> Custom text can increase click-through rates</li>
        <li><strong>Brand Voice:</strong> Match your site's tone and personality</li>
        <li><strong>User Clarity:</strong> Clear calls-to-action improve navigation</li>
        <li><strong>Accessibility:</strong> Descriptive text helps screen readers</li>
        <li><strong>Styling Control:</strong> Custom classes for design flexibility</li>
      </ul>

      <h2>Change Excerpt Read More Text</h2>
      <pre><code>// Change "Read More" text in excerpts
function custom_excerpt_more($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s">%s</a>',
        esc_url(get_permalink()),
        __('Continue Reading', 'textdomain')
    );
}
add_filter('excerpt_more', 'custom_excerpt_more');</code></pre>

      <h2>Change Content More Link Text</h2>
      <pre><code>// Change <!--more--> link text
function custom_content_more_link($more_link, $more_link_text) {
    return sprintf(
        '<a href="%s" class="more-link">%s</a>',
        esc_url(get_permalink() . '#more-' . get_the_ID()),
        __('Read Full Article', 'textdomain')
    );
}
add_filter('the_content_more_link', 'custom_content_more_link', 10, 2);</code></pre>

      <h2>Read More with Icon</h2>
      <pre><code>function read_more_with_icon($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s"><span class="icon">→</span> %s</a>',
        esc_url(get_permalink()),
        __('Keep Reading', 'textdomain')
    );
}
add_filter('excerpt_more', 'read_more_with_icon');

// CSS for icon styling
/* .read-more-link .icon {
    display: inline-block;
    margin-right: 5px;
    transition: transform 0.2s;
}
.read-more-link:hover .icon {
    transform: translateX(5px);
} */</code></pre>

      <h2>Button-Styled Read More</h2>
      <pre><code>function button_styled_read_more($more) {
    return sprintf(
        '<p class="read-more-wrapper"><a class="btn btn-primary read-more-btn" href="%s">%s</a></p>',
        esc_url(get_permalink()),
        __('Read the Full Story', 'textdomain')
    );
}
add_filter('excerpt_more', 'button_styled_read_more');

// CSS for button
/* .read-more-wrapper {
    margin-top: 15px;
}
.read-more-btn {
    display: inline-block;
    padding: 10px 20px;
    background: #0066cc;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 600;
    transition: background 0.3s;
}
.read-more-btn:hover {
    background: #0052a3;
} */</code></pre>

      <h2>Read More with Post Title</h2>
      <pre><code>function read_more_with_title($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s">%s "%s"</a>',
        esc_url(get_permalink()),
        __('Continue reading', 'textdomain'),
        get_the_title()
    );
}
add_filter('excerpt_more', 'read_more_with_title');</code></pre>

      <h2>Different Text for Different Post Types</h2>
      <pre><code>function post_type_specific_read_more($more) {
    global $post;

    $read_more_text = array(
        'post'      => __('Read Article', 'textdomain'),
        'portfolio' => __('View Project', 'textdomain'),
        'product'   => __('View Product', 'textdomain'),
        'page'      => __('Learn More', 'textdomain')
    );

    $text = isset($read_more_text[$post->post_type])
        ? $read_more_text[$post->post_type]
        : __('Read More', 'textdomain');

    return sprintf(
        ' <a class="read-more-link" href="%s">%s</a>',
        esc_url(get_permalink()),
        $text
    );
}
add_filter('excerpt_more', 'post_type_specific_read_more');</code></pre>

      <h2>Read More with Reading Time</h2>
      <pre><code>function read_more_with_time($more) {
    // Calculate reading time (average 200 words per minute)
    $content = get_post_field('post_content', get_the_ID());
    $word_count = str_word_count(strip_tags($content));
    $reading_time = ceil($word_count / 200);

    return sprintf(
        ' <a class="read-more-link" href="%s">%s <span class="reading-time">(%d min read)</span></a>',
        esc_url(get_permalink()),
        __('Continue Reading', 'textdomain'),
        $reading_time
    );
}
add_filter('excerpt_more', 'read_more_with_time');</code></pre>

      <h2>Remove Read More Link Completely</h2>
      <pre><code>// Remove excerpt more link
function remove_excerpt_more($more) {
    return '';
}
add_filter('excerpt_more', 'remove_excerpt_more');

// Remove content more link
function remove_content_more_link($more_link) {
    return '';
}
add_filter('the_content_more_link', 'remove_content_more_link');</code></pre>

      <h2>Read More with Category-Specific Text</h2>
      <pre><code>function category_specific_read_more($more) {
    if (has_category('tutorials')) {
        $text = __('View Tutorial', 'textdomain');
    } elseif (has_category('news')) {
        $text = __('Read News', 'textdomain');
    } elseif (has_category('reviews')) {
        $text = __('Read Review', 'textdomain');
    } else {
        $text = __('Read More', 'textdomain');
    }

    return sprintf(
        ' <a class="read-more-link" href="%s">%s</a>',
        esc_url(get_permalink()),
        $text
    );
}
add_filter('excerpt_more', 'category_specific_read_more');</code></pre>

      <h2>Read More with Smooth Scroll</h2>
      <pre><code>function read_more_smooth_scroll($more_link) {
    global $post;

    return sprintf(
        '<a href="%s" class="more-link smooth-scroll">%s</a>',
        esc_url(get_permalink() . '#more-' . $post->ID),
        __('Continue Reading', 'textdomain')
    );
}
add_filter('the_content_more_link', 'read_more_smooth_scroll');

// JavaScript for smooth scrolling
/* <script>
document.querySelectorAll('.smooth-scroll').forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href').split('#')[1];
        const target = document.getElementById(targetId);
        if (target) {
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    });
});
</script> */</code></pre>

      <h2>Read More with SVG Icon</h2>
      <pre><code>function read_more_with_svg($more) {
    $svg_arrow = '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
        <path d="M8 0L6.59 1.41L12.17 7H0v2h12.17l-5.58 5.59L8 16l8-8z"/>
    </svg>';

    return sprintf(
        ' <a class="read-more-link" href="%s">%s %s</a>',
        esc_url(get_permalink()),
        __('Read More', 'textdomain'),
        $svg_arrow
    );
}
add_filter('excerpt_more', 'read_more_with_svg');</code></pre>

      <h2>Read More in New Tab</h2>
      <pre><code>function read_more_new_tab($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s" target="_blank" rel="noopener noreferrer">%s</a>',
        esc_url(get_permalink()),
        __('Read More', 'textdomain')
    );
}
add_filter('excerpt_more', 'read_more_new_tab');</code></pre>

      <h2>Advanced: Read More with Data Attributes</h2>
      <pre><code>function read_more_with_data_attrs($more) {
    global $post;

    return sprintf(
        ' <a class="read-more-link" href="%s" data-post-id="%d" data-post-type="%s">%s</a>',
        esc_url(get_permalink()),
        $post->ID,
        $post->post_type,
        __('Read More', 'textdomain')
    );
}
add_filter('excerpt_more', 'read_more_with_data_attrs');</code></pre>

      <h2>Template Tag for Manual Read More</h2>
      <pre><code>// Create a reusable template tag
function custom_read_more_link($text = null, $class = 'read-more') {
    if ($text === null) {
        $text = __('Read More', 'textdomain');
    }

    return sprintf(
        '<a class="%s" href="%s">%s</a>',
        esc_attr($class),
        esc_url(get_permalink()),
        esc_html($text)
    );
}

// Usage in templates:
// echo custom_read_more_link();
// echo custom_read_more_link('Continue Reading', 'btn btn-primary');</code></pre>

      <h2>Complete Example with Multiple Styles</h2>
      <pre><code>// Main read more customization function
function mytheme_read_more_link($more) {
    global $post;

    // Different styles for different contexts
    if (is_home() || is_archive()) {
        // Simple link for archives
        return sprintf(
            ' <a class="read-more-link" href="%s">%s &rarr;</a>',
            esc_url(get_permalink()),
            __('Continue Reading', 'textdomain')
        );
    } elseif (is_search()) {
        // Include post title in search results
        return sprintf(
            ' <a class="read-more-link" href="%s">%s "%s"</a>',
            esc_url(get_permalink()),
            __('Read', 'textdomain'),
            get_the_title()
        );
    } else {
        // Button style for other contexts
        return sprintf(
            '<p class="read-more-wrapper"><a class="btn-read-more" href="%s">%s</a></p>',
            esc_url(get_permalink()),
            __('Read Full Article', 'textdomain')
        );
    }
}
add_filter('excerpt_more', 'mytheme_read_more_link');</code></pre>

      <h2>CSS Styling Examples</h2>
      <pre><code>/* Basic Link Style */
.read-more-link {
    color: #0066cc;
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s;
}
.read-more-link:hover {
    color: #004499;
    text-decoration: underline;
}

/* Button Style */
.btn-read-more {
    display: inline-block;
    padding: 8px 16px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 600;
    transition: transform 0.2s, box-shadow 0.2s;
}
.btn-read-more:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

/* Link with Arrow */
.read-more-link::after {
    content: "→";
    display: inline-block;
    margin-left: 5px;
    transition: transform 0.2s;
}
.read-more-link:hover::after {
    transform: translateX(5px);
}

/* Underline Effect */
.read-more-link {
    position: relative;
    padding-bottom: 2px;
}
.read-more-link::before {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: #0066cc;
    transition: width 0.3s;
}
.read-more-link:hover::before {
    width: 100%;
}</code></pre>

      <h2>Accessibility Considerations</h2>
      <pre><code>// Accessible read more link with screen reader text
function accessible_read_more($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s"><span class="screen-reader-text">%s</span>%s</a>',
        esc_url(get_permalink()),
        sprintf(__('Continue reading %s', 'textdomain'), get_the_title()),
        __('Read More', 'textdomain')
    );
}
add_filter('excerpt_more', 'accessible_read_more');

// CSS for screen reader text
/* .screen-reader-text {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    border: 0;
} */</code></pre>

      <h2>Best Practices</h2>
      <table>
        <thead>
          <tr>
            <th>Practice</th>
            <th>Why It Matters</th>
            <th>Example</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Descriptive Text</td>
            <td>Better accessibility and SEO</td>
            <td>"Continue Reading Article Title" vs "Click Here"</td>
          </tr>
          <tr>
            <td>Consistent Styling</td>
            <td>Professional appearance</td>
            <td>Use same class across all read more links</td>
          </tr>
          <tr>
            <td>Clear CTA</td>
            <td>Higher click-through rates</td>
            <td>"Read Full Article" vs "More"</td>
          </tr>
          <tr>
            <td>Escape Output</td>
            <td>Security</td>
            <td>Use esc_url(), esc_html()</td>
          </tr>
          <tr>
            <td>Mobile-Friendly</td>
            <td>Touch targets</td>
            <td>Minimum 44x44px clickable area</td>
          </tr>
          <tr>
            <td>Visual Feedback</td>
            <td>Better UX</td>
            <td>Hover states, transitions</td>
          </tr>
        </tbody>
      </table>

      <h2>Performance Impact</h2>
      <p><strong>Zero performance impact.</strong> Customizing read more links is purely cosmetic and doesn't affect page load time or database queries. The filters execute during template rendering with negligible overhead.</p>
    `,
    code: `// Change excerpt "Read More" text
function custom_excerpt_more($more) {
    return sprintf(
        ' <a class="read-more-link" href="%s">%s</a>',
        esc_url(get_permalink()),
        __('Continue Reading', 'textdomain')
    );
}
add_filter('excerpt_more', 'custom_excerpt_more');

// Change content <!--more--> link text
function custom_content_more_link($more_link) {
    return sprintf(
        '<a href="%s" class="more-link">%s</a>',
        esc_url(get_permalink() . '#more-' . get_the_ID()),
        __('Read Full Article', 'textdomain')
    );
}
add_filter('the_content_more_link', 'custom_content_more_link');`,
    author: 'Shahmir Khan',
    date: '2025-01-30',
    readTime: '6 min read',
    category: 'WordPress Content',
    tags: ['Excerpts', 'Read More', 'Content', 'Filters', 'User Experience'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.9+',
    seo: {
      metaTitle: 'Change WordPress Read More Link Text | Customize Continue Reading Button',
      metaDescription: 'Learn how to customize WordPress "Read More" link text and styling using excerpt_more and the_content_more_link filters. Includes button styles and accessibility tips.',
      keywords: ['wordpress read more', 'customize read more link', 'excerpt_more', 'wordpress continue reading', 'change read more text', 'wordpress more link'],
      canonical: '/blog/custom-read-more-text',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "How to Customize WordPress Read More Link Text",
        "description": "Complete guide to customizing read more links in WordPress excerpts and content",
        "author": {
          "@type": "Person",
          "name": "Shahmir Khan"
        },
        "datePublished": "2025-01-30",
        "dateModified": "2025-01-30",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the difference between excerpt_more and the_content_more_link filters?",
        answer: "excerpt_more changes the read more link in auto-generated excerpts (when using the_excerpt()). the_content_more_link changes the read more link when using <!--more--> tag in post content with the_content(). Use excerpt_more for archive pages and the_content_more_link for posts with manual break points."
      },
      {
        question: "How can I make read more links more accessible?",
        answer: "Include the post title in screen reader text so users know what they're reading more about. Use: <span class='screen-reader-text'>Continue reading [Post Title]</span>Read More. This helps screen reader users understand the link context without seeing surrounding content. Also ensure links have proper contrast ratios and are keyboard accessible."
      },
      {
        question: "Can I style read more links as buttons?",
        answer: "Yes! Return HTML with button classes in your filter function. Example: '<a class=\"btn btn-primary\" href=\"...'>Read More</a>'. Then style with CSS using padding, background colors, border-radius, and hover effects. Make sure button-styled links meet minimum 44x44px touch target size for mobile usability."
      },
      {
        question: "How do I add an icon to read more links?",
        answer: "Include the icon HTML in your filter return value. For font icons: 'Read More <i class=\"fa fa-arrow-right\"></i>'. For SVG: 'Read More <svg>...</svg>'. For CSS pseudo-elements, add a class and use ::after { content: '→'; }. SVG icons offer best performance and scalability."
      },
      {
        question: "Should read more links open in new tabs?",
        answer: "Generally no. Opening in new tabs is unexpected behavior for internal links and can confuse users, especially on mobile. Only use target='_blank' if the link goes to external content. For internal read more links, let users navigate normally and use browser back button if needed."
      }
    ]
  },
  {
    id: 33,
    slug: 'add-featured-image-rss',
    title: 'Add Featured Images to RSS Feed',
    excerpt: 'Learn how to automatically include featured images in your WordPress RSS feed for better content syndication and social media sharing.',
    content: `
      <div class="snippet-content">
        <p>By default, WordPress RSS feeds don't include featured images, which can make your syndicated content less engaging and reduce social media visibility. Adding featured images to RSS feeds improves content presentation in feed readers, email subscriptions, and social media platforms that parse RSS feeds.</p>

        <h2>Why Add Featured Images to RSS Feeds?</h2>
        <ul>
          <li><strong>Better Content Syndication:</strong> Images make your content more recognizable and engaging in feed readers</li>
          <li><strong>Improved Social Sharing:</strong> Platforms like Facebook, LinkedIn, and Twitter better parse feeds with images</li>
          <li><strong>Email Marketing:</strong> Email services using RSS-to-email benefit from featured images</li>
          <li><strong>Content Aggregators:</strong> Sites pulling your RSS feed display more attractive content</li>
          <li><strong>Brand Recognition:</strong> Visual content helps maintain brand identity across platforms</li>
        </ul>

        <h2>Basic Implementation</h2>
        <p>Add this code to your theme's <code>functions.php</code> file to include featured images in RSS feeds:</p>

        <pre><code>/**
 * Add featured image to RSS feed
 */
function add_featured_image_to_rss($content) {
    global $post;

    // Check if post has a featured image
    if (has_post_thumbnail($post->ID)) {
        $content = '<div>' . get_the_post_thumbnail($post->ID, 'medium', array('style' => 'margin-bottom: 15px;')) . '</div>' . $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'add_featured_image_to_rss');
add_filter('the_content_feed', 'add_featured_image_to_rss');</code></pre>

        <h2>Advanced RSS Feed Image Implementation</h2>
        <p>For more control over image size, styling, and placement, use this enhanced version:</p>

        <pre><code>/**
 * Add featured image to RSS feed with custom styling
 */
function custom_rss_post_thumbnail($content) {
    global $post;

    // Only process posts with featured images
    if (!has_post_thumbnail($post->ID)) {
        return $content;
    }

    // Get the featured image
    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'large');

    if (!$thumbnail) {
        return $content;
    }

    // Get image metadata
    $image_url = esc_url($thumbnail[0]);
    $image_width = $thumbnail[1];
    $image_height = $thumbnail[2];
    $image_alt = get_post_meta($thumbnail_id, '_wp_attachment_image_alt', true);
    $post_title = get_the_title($post->ID);

    // Build HTML with proper styling for feed readers
    $image_html = sprintf(
        '<div style="margin: 0 0 20px 0; text-align: center;">
            <img src="%s" alt="%s" width="%s" height="%s" style="max-width: 100%%; height: auto; display: block; margin: 0 auto;" />
        </div>',
        $image_url,
        esc_attr($image_alt ? $image_alt : $post_title),
        $image_width,
        $image_height
    );

    return $image_html . $content;
}
add_filter('the_excerpt_rss', 'custom_rss_post_thumbnail');
add_filter('the_content_feed', 'custom_rss_post_thumbnail');</code></pre>

        <h2>Adding RSS Enclosure Tag</h2>
        <p>The enclosure tag helps podcasting apps and some feed readers recognize media attachments:</p>

        <pre><code>/**
 * Add featured image as RSS enclosure
 */
function add_featured_image_as_enclosure() {
    global $post;

    if (!has_post_thumbnail($post->ID)) {
        return;
    }

    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'full');

    if (!$thumbnail) {
        return;
    }

    $image_url = $thumbnail[0];
    $image_size = filesize(get_attached_file($thumbnail_id));
    $image_type = get_post_mime_type($thumbnail_id);

    echo sprintf(
        '<enclosure url="%s" length="%s" type="%s" />' . "\\n",
        esc_url($image_url),
        $image_size,
        esc_attr($image_type)
    );
}
add_action('rss2_item', 'add_featured_image_as_enclosure');</code></pre>

        <h2>Post Type Specific RSS Images</h2>
        <p>Control which post types show featured images in RSS feeds:</p>

        <pre><code>/**
 * Add featured images to RSS for specific post types
 */
function custom_post_type_rss_image($content) {
    global $post;

    // Define post types that should show featured images
    $allowed_post_types = array('post', 'portfolio', 'news');

    // Check if current post type is allowed
    if (!in_array(get_post_type($post->ID), $allowed_post_types)) {
        return $content;
    }

    if (!has_post_thumbnail($post->ID)) {
        return $content;
    }

    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'medium_large');

    if ($thumbnail) {
        $image_html = sprintf(
            '<figure style="margin: 0 0 1.5em 0;">
                <img src="%s" alt="%s" style="max-width: 100%%; height: auto; border-radius: 8px;" />
            </figure>',
            esc_url($thumbnail[0]),
            esc_attr(get_the_title($post->ID))
        );

        $content = $image_html . $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'custom_post_type_rss_image');
add_filter('the_content_feed', 'custom_post_type_rss_image');</code></pre>

        <h2>RSS Feed with Fallback Images</h2>
        <p>Provide a default image when posts don't have featured images:</p>

        <pre><code>/**
 * Add featured or fallback image to RSS feed
 */
function rss_image_with_fallback($content) {
    global $post;

    $image_url = '';
    $image_alt = get_the_title($post->ID);

    // Try to get featured image first
    if (has_post_thumbnail($post->ID)) {
        $thumbnail_id = get_post_thumbnail_id($post->ID);
        $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'large');

        if ($thumbnail) {
            $image_url = $thumbnail[0];
            $image_alt = get_post_meta($thumbnail_id, '_wp_attachment_image_alt', true);
            if (!$image_alt) {
                $image_alt = get_the_title($post->ID);
            }
        }
    }

    // Use fallback image if no featured image
    if (!$image_url) {
        $image_url = get_template_directory_uri() . '/images/default-rss-image.jpg';
        $image_alt = get_bloginfo('name') . ' - ' . get_the_title($post->ID);
    }

    // Build responsive image HTML
    $image_html = sprintf(
        '<div style="margin-bottom: 20px;">
            <img src="%s" alt="%s" style="max-width: 100%%; height: auto; display: block;" />
        </div>',
        esc_url($image_url),
        esc_attr($image_alt)
    );

    return $image_html . $content;
}
add_filter('the_excerpt_rss', 'rss_image_with_fallback');
add_filter('the_content_feed', 'rss_image_with_fallback');</code></pre>

        <h2>Media RSS Namespace Implementation</h2>
        <p>Add Media RSS (MRSS) namespace for enhanced feed compatibility with media platforms:</p>

        <pre><code>/**
 * Add Media RSS namespace to feed
 */
function add_media_rss_namespace() {
    echo 'xmlns:media="http://search.yahoo.com/mrss/"';
}
add_action('rss2_ns', 'add_media_rss_namespace');

/**
 * Add featured image as media:content tag
 */
function add_media_content_to_feed() {
    global $post;

    if (!has_post_thumbnail($post->ID)) {
        return;
    }

    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail = wp_get_attachment_image_src($thumbnail_id, 'full');

    if (!$thumbnail) {
        return;
    }

    $image_url = $thumbnail[0];
    $image_width = $thumbnail[1];
    $image_height = $thumbnail[2];
    $image_type = get_post_mime_type($thumbnail_id);
    $image_title = get_the_title($thumbnail_id);
    $image_alt = get_post_meta($thumbnail_id, '_wp_attachment_image_alt', true);

    printf(
        '<media:content url="%s" width="%s" height="%s" type="%s" medium="image">
            <media:title type="plain"><![CDATA[%s]]></media:title>
            <media:description type="plain"><![CDATA[%s]]></media:description>
        </media:content>' . "\\n",
        esc_url($image_url),
        $image_width,
        $image_height,
        esc_attr($image_type),
        $image_title ? $image_title : get_the_title($post->ID),
        $image_alt ? $image_alt : get_the_title($post->ID)
    );
}
add_action('rss2_item', 'add_media_content_to_feed');</code></pre>

        <h2>Category-Specific RSS Images</h2>
        <p>Show different image sizes or styles based on post categories:</p>

        <pre><code>/**
 * Category-specific RSS feed images
 */
function category_specific_rss_images($content) {
    global $post;

    if (!has_post_thumbnail($post->ID)) {
        return $content;
    }

    // Define image sizes per category
    $image_size = 'medium';

    if (has_category('featured', $post->ID)) {
        $image_size = 'large';
    } elseif (has_category('news', $post->ID)) {
        $image_size = 'medium_large';
    }

    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail = wp_get_attachment_image_src($thumbnail_id, $image_size);

    if ($thumbnail) {
        $style = 'max-width: 100%; height: auto; border-radius: 4px;';

        // Add special styling for featured category
        if (has_category('featured', $post->ID)) {
            $style .= ' border: 3px solid #0073aa;';
        }

        $image_html = sprintf(
            '<div style="margin-bottom: 1.5em;">
                <img src="%s" alt="%s" style="%s" />
            </div>',
            esc_url($thumbnail[0]),
            esc_attr(get_the_title($post->ID)),
            $style
        );

        $content = $image_html . $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'category_specific_rss_images');
add_filter('the_content_feed', 'category_specific_rss_images');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use Inline Styles</td>
              <td>Many feed readers strip external CSS; inline styles ensure consistent appearance</td>
            </tr>
            <tr>
              <td>Optimize Image Size</td>
              <td>Use 'medium' or 'large' sizes (not 'full') to reduce feed size and load times</td>
            </tr>
            <tr>
              <td>Include Alt Text</td>
              <td>Improves accessibility and provides context when images don't load</td>
            </tr>
            <tr>
              <td>Test Feed Validity</td>
              <td>Use W3C Feed Validator to ensure proper RSS formatting</td>
            </tr>
            <tr>
              <td>Set Max Width 100%</td>
              <td>Ensures responsive images that work on mobile feed readers</td>
            </tr>
            <tr>
              <td>Use HTTPS Images</td>
              <td>Prevents mixed content warnings in secure contexts</td>
            </tr>
            <tr>
              <td>Add Enclosure Tags</td>
              <td>Better compatibility with podcasting apps and media aggregators</td>
            </tr>
            <tr>
              <td>Consider Feed Size</td>
              <td>Balance image quality with feed download size for better performance</td>
            </tr>
          </tbody>
        </table>

        <h2>Testing Your RSS Feed</h2>
        <p>After implementing featured images in RSS:</p>
        <ol>
          <li>Visit your RSS feed URL (usually <code>yoursite.com/feed/</code>)</li>
          <li>Validate using <a href="https://validator.w3.org/feed/" target="_blank" rel="noopener">W3C Feed Validator</a></li>
          <li>Test in popular feed readers (Feedly, Inoreader, NewsBlur)</li>
          <li>Check RSS-to-email services (Mailchimp, FeedBurner)</li>
          <li>Verify images load properly and are responsive</li>
          <li>Test social media platforms that parse RSS</li>
        </ol>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Minimal impact on site performance (0.001-0.002s per feed request). Featured images are already loaded in WordPress; RSS filters add negligible processing time. Main consideration is feed file size - use optimized image sizes (medium/large) rather than full-size images to keep feeds under 100KB when possible.</p>

        <h2>Troubleshooting Common Issues</h2>
        <ul>
          <li><strong>Images not showing:</strong> Clear site cache and RSS feed cache; check if featured images exist</li>
          <li><strong>Broken images:</strong> Verify image URLs are absolute (not relative) and use HTTPS</li>
          <li><strong>Feed validation errors:</strong> Ensure proper escaping with esc_url() and esc_attr()</li>
          <li><strong>Layout issues:</strong> Use inline styles only; avoid external CSS that feed readers strip</li>
          <li><strong>Slow feed loading:</strong> Reduce image sizes; avoid 'full' size images in feeds</li>
        </ul>
      </div>
    `,
    code: `/**
 * Add featured image to RSS feed
 */
function add_featured_image_to_rss($content) {
    global $post;

    if (has_post_thumbnail($post->ID)) {
        $content = '<div>' . get_the_post_thumbnail($post->ID, 'medium', array('style' => 'margin-bottom: 15px;')) . '</div>' . $content;
    }

    return $content;
}
add_filter('the_excerpt_rss', 'add_featured_image_to_rss');
add_filter('the_content_feed', 'add_featured_image_to_rss');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '7 min',
    category: 'WordPress Content',
    tags: ['RSS', 'Featured Images', 'Feed'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Featured Images to WordPress RSS Feed - Complete Guide 2025',
      metaDescription: 'Learn how to automatically include featured images in WordPress RSS feeds. Improve content syndication, social sharing, and email marketing with complete code examples.',
      keywords: ['WordPress RSS feed', 'featured images RSS', 'RSS feed images', 'WordPress feed customization', 'RSS enclosure', 'Media RSS', 'content syndication', 'RSS-to-email', 'feed reader images'],
      canonical: 'https://shahmir.dev/blog/add-featured-image-rss',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Featured Images to WordPress RSS Feed',
        description: 'Complete guide to adding featured images to WordPress RSS feeds for better content syndication and social media sharing.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "Why don't featured images show in my RSS feed by default?",
        answer: "WordPress RSS feeds only include post content and excerpt by default. Featured images are separate post metadata, not part of the content. You need to use filters like the_excerpt_rss or the_content_feed to manually add featured images to your RSS feed output. This gives you control over image size, placement, and styling."
      },
      {
        question: "Which image size should I use for RSS feeds?",
        answer: "Use 'medium' (300x300) or 'large' (1024x1024) sizes for RSS feeds. Avoid 'full' size images as they significantly increase feed file size, causing slow loading in feed readers and email services. Medium size offers a good balance between quality and performance, while large is better for high-resolution displays. Consider your audience - if they're mainly on mobile, use medium."
      },
      {
        question: "What's the difference between adding images to feed content vs using enclosure tags?",
        answer: "Adding images to feed content (using the_content_feed filter) displays images inline within the post content in feed readers. Enclosure tags are separate XML elements that mark images as attachments - they're mainly used by podcasting apps and some feed aggregators. Use both approaches for maximum compatibility: inline images for visual presentation and enclosures for media-aware applications."
      },
      {
        question: "How can I test if featured images are working in my RSS feed?",
        answer: "Visit yoursite.com/feed/ to view your RSS XML. Look for image tags or enclosure elements in post items. Use the W3C Feed Validator to check for errors. Test in feed readers like Feedly, Inoreader, or The Old Reader. Also test RSS-to-email services like Mailchimp RSS campaigns. Clear all caching (browser, WordPress, CDN) before testing, as feeds are heavily cached."
      },
      {
        question: "Can I add different images to RSS than the featured image?",
        answer: "Yes, instead of using get_the_post_thumbnail(), use custom logic to select images. You could use a custom field for RSS-specific images, extract the first image from post content with DOMDocument, use category-based default images, or dynamically generate social media optimized images. Just ensure you return proper HTML with inline styles for feed reader compatibility."
      }
    ]
  },
  {
    id: 34,
    slug: 'auto-featured-image',
    title: 'Automatically Set Featured Image',
    excerpt: 'Automatically set featured images from post content, attachments, or external sources to save time and ensure all posts have visual content.',
    content: `
      <div class="snippet-content">
        <p>Manually setting featured images for every post can be time-consuming and easy to forget. Automating this process ensures every post has a featured image, improving SEO, social sharing, and visual consistency across your site.</p>

        <h2>Why Automate Featured Image Setting?</h2>
        <ul>
          <li><strong>Time Efficiency:</strong> Save hours of manual work, especially for content-heavy sites</li>
          <li><strong>Consistency:</strong> Ensure every post has a featured image for uniform appearance</li>
          <li><strong>SEO Benefits:</strong> Featured images improve search result appearance and CTR</li>
          <li><strong>Social Media:</strong> Automatic images ensure proper Open Graph and Twitter Card display</li>
          <li><strong>Content Migration:</strong> Automatically set images when importing content from other platforms</li>
          <li><strong>User Experience:</strong> Non-technical users don't need to remember to set featured images</li>
        </ul>

        <h2>Automatically Set First Image as Featured</h2>
        <p>This code automatically uses the first image in post content as the featured image:</p>

        <pre><code>/**
 * Automatically set featured image from first image in content
 */
function auto_set_featured_image_from_content($post_id) {
    // Skip if not a post or if running autosave
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    // Skip if featured image already set
    if (has_post_thumbnail($post_id)) {
        return;
    }

    // Get post content
    $post = get_post($post_id);
    $content = $post->post_content;

    // Find first image in content
    preg_match_all('/<img[^>]+src=["\']([^"\']+)["\'][^>]*>/i', $content, $matches);

    if (empty($matches[1][0])) {
        return;
    }

    $image_url = $matches[1][0];

    // Get image ID from URL
    $attachment_id = attachment_url_to_postid($image_url);

    if ($attachment_id) {
        set_post_thumbnail($post_id, $attachment_id);
    }
}
add_action('save_post', 'auto_set_featured_image_from_content');
add_action('publish_post', 'auto_set_featured_image_from_content');</code></pre>

        <h2>Set Featured Image from First Upload</h2>
        <p>Automatically set the first image uploaded to a post as its featured image:</p>

        <pre><code>/**
 * Auto set first uploaded image as featured
 */
function auto_set_first_uploaded_image($post_id) {
    // Only for posts without featured images
    if (has_post_thumbnail($post_id)) {
        return;
    }

    // Get all attachments for this post
    $attached_images = get_posts(array(
        'post_type'      => 'attachment',
        'posts_per_page' => 1,
        'post_status'    => 'any',
        'post_parent'    => $post_id,
        'post_mime_type' => 'image',
        'orderby'        => 'date',
        'order'          => 'ASC'
    ));

    if (!empty($attached_images)) {
        $attachment_id = $attached_images[0]->ID;
        set_post_thumbnail($post_id, $attachment_id);
    }
}
add_action('save_post', 'auto_set_first_uploaded_image');
add_action('publish_post', 'auto_set_first_uploaded_image');</code></pre>

        <h2>Upload External Image and Set as Featured</h2>
        <p>Extract external images from content, upload to media library, and set as featured:</p>

        <pre><code>/**
 * Download external image and set as featured
 */
function auto_featured_image_external($post_id) {
    // Security checks
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    if (has_post_thumbnail($post_id)) {
        return;
    }

    $post = get_post($post_id);
    $content = $post->post_content;

    // Find first image
    preg_match_all('/<img[^>]+src=["\']([^"\']+)["\'][^>]*>/i', $content, $matches);

    if (empty($matches[1][0])) {
        return;
    }

    $image_url = $matches[1][0];

    // Check if it's an external URL
    if (strpos($image_url, home_url()) === false) {
        // Upload to media library
        $attachment_id = upload_external_image($image_url, $post_id);

        if ($attachment_id) {
            set_post_thumbnail($post_id, $attachment_id);
        }
    } else {
        // Internal image - just set it
        $attachment_id = attachment_url_to_postid($image_url);
        if ($attachment_id) {
            set_post_thumbnail($post_id, $attachment_id);
        }
    }
}
add_action('save_post', 'auto_featured_image_external');

/**
 * Helper function to upload external image
 */
function upload_external_image($image_url, $post_id) {
    require_once(ABSPATH . 'wp-admin/includes/file.php');
    require_once(ABSPATH . 'wp-admin/includes/media.php');
    require_once(ABSPATH . 'wp-admin/includes/image.php');

    // Download image to temp location
    $temp_file = download_url($image_url);

    if (is_wp_error($temp_file)) {
        return false;
    }

    // Get the filename
    $filename = basename($image_url);

    // Prepare file array
    $file_array = array(
        'name'     => $filename,
        'tmp_name' => $temp_file
    );

    // Upload to media library
    $attachment_id = media_handle_sideload($file_array, $post_id);

    // Clean up temp file
    @unlink($temp_file);

    if (is_wp_error($attachment_id)) {
        return false;
    }

    return $attachment_id;
}</code></pre>

        <h2>Post Type Specific Auto Featured Images</h2>
        <p>Set featured images only for specific post types:</p>

        <pre><code>/**
 * Auto set featured image for specific post types
 */
function auto_featured_image_by_post_type($post_id) {
    // Define post types for auto featured images
    $allowed_post_types = array('post', 'news', 'portfolio');

    $post_type = get_post_type($post_id);

    // Check if current post type is in allowed list
    if (!in_array($post_type, $allowed_post_types)) {
        return;
    }

    // Skip if already has featured image
    if (has_post_thumbnail($post_id)) {
        return;
    }

    // Security checks
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    // Get first attached image
    $images = get_attached_media('image', $post_id);

    if (!empty($images)) {
        $first_image = array_shift($images);
        set_post_thumbnail($post_id, $first_image->ID);
    } else {
        // Try to get from content
        $post = get_post($post_id);
        preg_match_all('/<img[^>]+src=["\']([^"\']+)["\'][^>]*>/i', $post->post_content, $matches);

        if (!empty($matches[1][0])) {
            $attachment_id = attachment_url_to_postid($matches[1][0]);
            if ($attachment_id) {
                set_post_thumbnail($post_id, $attachment_id);
            }
        }
    }
}
add_action('save_post', 'auto_featured_image_by_post_type');</code></pre>

        <h2>Generate Placeholder Featured Image</h2>
        <p>Generate a placeholder image with post title when no image is available:</p>

        <pre><code>/**
 * Generate placeholder featured image with post title
 */
function generate_placeholder_featured_image($post_id) {
    // Skip if already has featured image
    if (has_post_thumbnail($post_id)) {
        return;
    }

    // Security checks
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    // Check if GD library is available
    if (!function_exists('imagecreatetruecolor')) {
        return;
    }

    $post = get_post($post_id);
    $title = $post->post_title;

    // Create image (1200x630 for social media)
    $width = 1200;
    $height = 630;
    $image = imagecreatetruecolor($width, $height);

    // Set background color (blue)
    $bg_color = imagecolorallocate($image, 41, 128, 185);
    imagefill($image, 0, 0, $bg_color);

    // Set text color (white)
    $text_color = imagecolorallocate($image, 255, 255, 255);

    // Word wrap title
    $wrapped_title = wordwrap($title, 30, "\\n");

    // Calculate text position for centering
    $font_size = 5; // Built-in font size
    $lines = explode("\\n", $wrapped_title);
    $line_height = 20;
    $total_height = count($lines) * $line_height;
    $start_y = ($height - $total_height) / 2;

    // Draw each line centered
    foreach ($lines as $i => $line) {
        $text_width = imagefontwidth($font_size) * strlen($line);
        $x = ($width - $text_width) / 2;
        $y = $start_y + ($i * $line_height);
        imagestring($image, $font_size, $x, $y, $line, $text_color);
    }

    // Save to uploads directory
    $upload_dir = wp_upload_dir();
    $filename = 'placeholder-' . $post_id . '.png';
    $filepath = $upload_dir['path'] . '/' . $filename;

    imagepng($image, $filepath);
    imagedestroy($image);

    // Add to media library
    $attachment = array(
        'post_mime_type' => 'image/png',
        'post_title'     => 'Featured Image - ' . $title,
        'post_content'   => '',
        'post_status'    => 'inherit'
    );

    $attachment_id = wp_insert_attachment($attachment, $filepath, $post_id);

    // Generate metadata
    $attach_data = wp_generate_attachment_metadata($attachment_id, $filepath);
    wp_update_attachment_metadata($attachment_id, $attach_data);

    // Set as featured image
    set_post_thumbnail($post_id, $attachment_id);
}
add_action('save_post', 'generate_placeholder_featured_image');</code></pre>

        <h2>Category-Based Default Featured Images</h2>
        <p>Assign default featured images based on post category:</p>

        <pre><code>/**
 * Set category-specific default featured images
 */
function category_default_featured_image($post_id) {
    // Skip if already has featured image
    if (has_post_thumbnail($post_id)) {
        return;
    }

    // Security checks
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    // Get post categories
    $categories = get_the_category($post_id);

    if (empty($categories)) {
        return;
    }

    // Map category slugs to default image IDs
    // Replace these IDs with your actual attachment IDs
    $default_images = array(
        'technology' => 123,
        'lifestyle'  => 124,
        'business'   => 125,
        'health'     => 126,
        'travel'     => 127,
        'food'       => 128
    );

    // Get first category
    $category_slug = $categories[0]->slug;

    // Set default image if category matches
    if (isset($default_images[$category_slug])) {
        set_post_thumbnail($post_id, $default_images[$category_slug]);
    } else {
        // Use generic default image (attachment ID 100)
        set_post_thumbnail($post_id, 100);
    }
}
add_action('save_post', 'category_default_featured_image');</code></pre>

        <h2>AI-Powered Featured Image Selection</h2>
        <p>Use advanced logic to select the most relevant image from post content:</p>

        <pre><code>/**
 * Intelligently select best image from content
 */
function smart_auto_featured_image($post_id) {
    // Security and duplicate checks
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id) || has_post_thumbnail($post_id)) {
        return;
    }

    $post = get_post($post_id);
    $content = $post->post_content;

    // Find all images with their attributes
    preg_match_all('/<img[^>]+>/i', $content, $img_tags);

    if (empty($img_tags[0])) {
        return;
    }

    $best_image = null;
    $best_score = 0;

    foreach ($img_tags[0] as $img_tag) {
        $score = 0;

        // Extract src
        preg_match('/src=["\']([^"\']+)["\']/', $img_tag, $src_match);
        if (empty($src_match[1])) {
            continue;
        }

        $image_url = $src_match[1];
        $attachment_id = attachment_url_to_postid($image_url);

        if (!$attachment_id) {
            continue;
        }

        // Get image metadata
        $metadata = wp_get_attachment_metadata($attachment_id);

        if (!$metadata) {
            continue;
        }

        // Scoring criteria
        // 1. Image size (prefer larger images, optimal 1200x630)
        if (isset($metadata['width']) && isset($metadata['height'])) {
            $width = $metadata['width'];
            $height = $metadata['height'];

            // Prefer images close to 1200x630 (social media size)
            $ideal_ratio = 1200 / 630;
            $actual_ratio = $width / $height;
            $ratio_diff = abs($ideal_ratio - $actual_ratio);

            if ($width >= 800 && $height >= 400) {
                $score += 50;
            }

            if ($ratio_diff < 0.3) {
                $score += 30;
            }
        }

        // 2. Position in content (prefer early images)
        $position = strpos($content, $img_tag);
        if ($position < strlen($content) / 3) {
            $score += 20; // In first third
        }

        // 3. Has alt text (better for SEO)
        if (preg_match('/alt=["\']([^"\']+)["\']/', $img_tag, $alt_match)) {
            if (!empty($alt_match[1])) {
                $score += 10;
            }
        }

        // 4. File type (prefer jpg/png over gif)
        $file_type = $metadata['file'] ?? '';
        if (strpos($file_type, '.jpg') !== false || strpos($file_type, '.jpeg') !== false || strpos($file_type, '.png') !== false) {
            $score += 10;
        }

        // Update best image if this scores higher
        if ($score > $best_score) {
            $best_score = $score;
            $best_image = $attachment_id;
        }
    }

    // Set the best image as featured
    if ($best_image) {
        set_post_thumbnail($post_id, $best_image);
    }
}
add_action('save_post', 'smart_auto_featured_image');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Check for Existing Featured Image</td>
              <td>Prevents overwriting manually set featured images</td>
            </tr>
            <tr>
              <td>Validate Image Existence</td>
              <td>Ensures images exist in media library before setting as featured</td>
            </tr>
            <tr>
              <td>Skip Autosave and Revisions</td>
              <td>Prevents unnecessary processing and database queries</td>
            </tr>
            <tr>
              <td>Use Appropriate Hooks</td>
              <td>save_post for drafts, publish_post for published content only</td>
            </tr>
            <tr>
              <td>Optimize Image Selection</td>
              <td>Choose images with proper dimensions for social sharing (1200x630)</td>
            </tr>
            <tr>
              <td>Handle External Images Properly</td>
              <td>Download and import external images to prevent broken links</td>
            </tr>
            <tr>
              <td>Provide Fallback Options</td>
              <td>Use default images or placeholders when no suitable image found</td>
            </tr>
            <tr>
              <td>Test with Different Post Types</td>
              <td>Ensure automation works correctly across all content types</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Low to moderate impact (0.01-0.1s per post save). Image extraction and selection add minimal overhead. External image downloads can take 1-2 seconds depending on image size and network speed. Use conditional logic to skip processing when not needed (e.g., when featured image already exists). Consider running intensive operations (like external downloads) asynchronously using wp_schedule_single_event() for better user experience.</p>

        <h2>Common Use Cases</h2>
        <ul>
          <li><strong>Content Migration:</strong> Automatically set featured images when importing from WordPress.com, Medium, or other platforms</li>
          <li><strong>User-Generated Content:</strong> Ensure front-end submissions always have featured images</li>
          <li><strong>RSS Feed Imports:</strong> Automatically pull and set images from syndicated content</li>
          <li><strong>News Sites:</strong> Use first image from wire service articles</li>
          <li><strong>Portfolio Sites:</strong> Set first gallery image as featured automatically</li>
          <li><strong>E-commerce:</strong> Use first product image as featured for better catalog display</li>
        </ul>
      </div>
    `,
    code: `/**
 * Automatically set featured image from first image in content
 */
function auto_set_featured_image_from_content($post_id) {
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }

    if (has_post_thumbnail($post_id)) {
        return;
    }

    $post = get_post($post_id);
    $content = $post->post_content;

    preg_match_all('/<img[^>]+src=["\']([^"\']+)["\'][^>]*>/i', $content, $matches);

    if (empty($matches[1][0])) {
        return;
    }

    $image_url = $matches[1][0];
    $attachment_id = attachment_url_to_postid($image_url);

    if ($attachment_id) {
        set_post_thumbnail($post_id, $attachment_id);
    }
}
add_action('save_post', 'auto_set_featured_image_from_content');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '8 min',
    category: 'WordPress Content',
    tags: ['Featured Images', 'Automation', 'Media'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Automatically Set Featured Images in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to automatically set featured images from post content, uploads, or external sources. Save time and ensure every WordPress post has visual content.',
      keywords: ['WordPress featured image', 'auto featured image', 'automatic featured image WordPress', 'set featured image automatically', 'WordPress automation', 'featured image from content', 'WordPress media automation', 'auto set thumbnail'],
      canonical: 'https://shahmir.dev/blog/auto-featured-image',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Automatically Set Featured Image in WordPress',
        description: 'Complete guide to automatically setting featured images from post content, attachments, or external sources in WordPress.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "Will automatic featured images overwrite manually set ones?",
        answer: "No, if you use the has_post_thumbnail() check in your code. This function returns true if a featured image already exists, allowing your automation to skip those posts. This is best practice and prevents accidentally overwriting images that users or editors have carefully selected. Always include this check at the beginning of your automation function."
      },
      {
        question: "How do I automatically set featured images for existing posts?",
        answer: "The save_post hook only triggers when posts are saved. For existing posts, create a one-time script using WP-CLI or a custom admin page that loops through posts without featured images using get_posts() with a meta_query checking for _thumbnail_id. Then apply your featured image logic to each post. Run this as a bulk operation during off-peak hours to avoid performance issues."
      },
      {
        question: "Can I download and use the first Google Images result as featured image?",
        answer: "Technically yes, but legally no. Automatically downloading images from Google Images or other sources violates copyright laws and Terms of Service. Instead, use images from your own content, licensed stock photo APIs (like Unsplash API with proper attribution), or create placeholder images. Always respect copyright and only automate with images you have rights to use."
      },
      {
        question: "What's the best image size for auto-generated featured images?",
        answer: "Create images at 1200x630 pixels, the optimal size for social media sharing (Facebook, LinkedIn, Twitter). This ensures good display quality across platforms. WordPress will automatically generate smaller sizes. For placeholder images, use this dimension with a 16:9 or 1.91:1 aspect ratio. Avoid square images (they get cropped poorly on social platforms)."
      },
      {
        question: "How can I set different default images for different categories?",
        answer: "Create a mapping array that associates category slugs with attachment IDs: $default_images = array('tech' => 123, 'lifestyle' => 456). Get the post's category using get_the_category(), match the slug to your array, and use set_post_thumbnail() with the corresponding ID. Upload your default images to the media library first and note their attachment IDs. This works well for news sites and multi-topic blogs."
      }
    ]
  },
  {
    id: 35,
    slug: 'custom-content-before-after-posts',
    title: 'Add Content Before/After Posts',
    excerpt: 'Insert custom content, ads, CTAs, or social sharing buttons automatically before or after post content using WordPress filters.',
    content: `
      <div class="snippet-content">
        <p>Adding content before or after posts is a common need for CTAs, advertisements, social sharing buttons, author bios, related posts, and disclaimer text. Using WordPress filters, you can inject this content automatically without modifying templates or editing individual posts.</p>

        <h2>Why Add Content Before/After Posts?</h2>
        <ul>
          <li><strong>Call-to-Actions:</strong> Add newsletter signups, product promotions, or download buttons after content</li>
          <li><strong>Monetization:</strong> Insert ads strategically before or after engaging content</li>
          <li><strong>Social Engagement:</strong> Add sharing buttons to encourage content distribution</li>
          <li><strong>Legal Compliance:</strong> Display disclaimers, disclosures, or copyright notices</li>
          <li><strong>User Navigation:</strong> Show related posts, author bios, or next/previous navigation</li>
          <li><strong>Consistency:</strong> Ensure uniform content across all posts without manual editing</li>
        </ul>

        <h2>Add Content After Posts</h2>
        <p>This basic example adds custom content after every post:</p>

        <pre><code>/**
 * Add custom content after post content
 */
function add_content_after_post($content) {
    // Only on single posts, not pages
    if (is_single() && is_main_query()) {
        $custom_content = '<div class="after-post-content">';
        $custom_content .= '<h3>Enjoyed this article?</h3>';
        $custom_content .= '<p>Subscribe to our newsletter for more great content!</p>';
        $custom_content .= '<a href="/newsletter" class="btn">Subscribe Now</a>';
        $custom_content .= '</div>';

        $content .= $custom_content;
    }

    return $content;
}
add_filter('the_content', 'add_content_after_post');</code></pre>

        <h2>Add Content Before Posts</h2>
        <p>Insert content at the beginning of post content:</p>

        <pre><code>/**
 * Add custom content before post content
 */
function add_content_before_post($content) {
    // Only on single posts
    if (is_single() && is_main_query()) {
        $custom_content = '<div class="before-post-content">';
        $custom_content .= '<p class="post-notice">';
        $custom_content .= '<strong>Note:</strong> This article was last updated on ' . get_the_modified_date() . '.';
        $custom_content .= '</p>';
        $custom_content .= '</div>';

        $content = $custom_content . $content;
    }

    return $content;
}
add_filter('the_content', 'add_content_before_post');</code></pre>

        <h2>Add Content Before AND After Posts</h2>
        <p>Combine both approaches in a single function:</p>

        <pre><code>/**
 * Add content before and after posts
 */
function add_content_before_and_after_post($content) {
    // Only on single posts, not in feeds or admin
    if (!is_single() || !is_main_query() || is_feed()) {
        return $content;
    }

    // Content to add before
    $before_content = '<div class="alert alert-info">';
    $before_content .= '<strong>Reading Time:</strong> ' . estimate_reading_time() . ' minutes';
    $before_content .= '</div>';

    // Content to add after
    $after_content = '<div class="post-footer">';
    $after_content .= '<div class="share-buttons">';
    $after_content .= '<h4>Share this article:</h4>';
    $after_content .= '<a href="https://twitter.com/intent/tweet?url=' . urlencode(get_permalink()) . '&text=' . urlencode(get_the_title()) . '" target="_blank">Twitter</a> | ';
    $after_content .= '<a href="https://www.facebook.com/sharer/sharer.php?u=' . urlencode(get_permalink()) . '" target="_blank">Facebook</a> | ';
    $after_content .= '<a href="https://www.linkedin.com/sharing/share-offsite/?url=' . urlencode(get_permalink()) . '" target="_blank">LinkedIn</a>';
    $after_content .= '</div>';
    $after_content .= '</div>';

    return $before_content . $content . $after_content;
}
add_filter('the_content', 'add_content_before_and_after_post');

/**
 * Helper function to estimate reading time
 */
function estimate_reading_time() {
    $content = get_post_field('post_content', get_the_ID());
    $word_count = str_word_count(strip_tags($content));
    $reading_time = ceil($word_count / 200); // Average reading speed: 200 words/min

    return $reading_time;
}</code></pre>

        <h2>Category-Specific Content</h2>
        <p>Add different content based on post category:</p>

        <pre><code>/**
 * Add category-specific content after posts
 */
function category_specific_content_after_post($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    $custom_content = '';

    if (has_category('tutorials')) {
        $custom_content = '<div class="tutorial-footer">';
        $custom_content .= '<h4>Need help with this tutorial?</h4>';
        $custom_content .= '<p>Join our community forum for support!</p>';
        $custom_content .= '<a href="/forum" class="btn">Visit Forum</a>';
        $custom_content .= '</div>';
    } elseif (has_category('products')) {
        $custom_content = '<div class="product-cta">';
        $custom_content .= '<h4>Ready to purchase?</h4>';
        $custom_content .= '<p>Get 10% off with code: BLOG10</p>';
        $custom_content .= '<a href="/shop" class="btn btn-primary">Shop Now</a>';
        $custom_content .= '</div>';
    } elseif (has_category('news')) {
        $custom_content = '<div class="news-footer">';
        $custom_content .= '<p><em>Stay updated with our latest news by following us on social media.</em></p>';
        $custom_content .= '</div>';
    }

    return $content . $custom_content;
}
add_filter('the_content', 'category_specific_content_after_post');</code></pre>

        <h2>Add Author Bio After Posts</h2>
        <p>Display author information at the end of posts:</p>

        <pre><code>/**
 * Add author bio after post content
 */
function add_author_bio_after_post($content) {
    // Only on single posts
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;
    $author_id = $post->post_author;

    // Get author information
    $author_name = get_the_author_meta('display_name', $author_id);
    $author_bio = get_the_author_meta('description', $author_id);
    $author_url = get_author_posts_url($author_id);
    $author_avatar = get_avatar($author_id, 80);

    // Skip if author has no bio
    if (empty($author_bio)) {
        return $content;
    }

    // Build author box HTML
    $author_box = '<div class="author-bio-box">';
    $author_box .= '<div class="author-avatar">' . $author_avatar . '</div>';
    $author_box .= '<div class="author-info">';
    $author_box .= '<h4>About ' . esc_html($author_name) . '</h4>';
    $author_box .= '<p>' . esc_html($author_bio) . '</p>';
    $author_box .= '<a href="' . esc_url($author_url) . '" class="author-link">View all posts by ' . esc_html($author_name) . '</a>';
    $author_box .= '</div>';
    $author_box .= '</div>';

    return $content . $author_box;
}
add_filter('the_content', 'add_author_bio_after_post');</code></pre>

        <h2>Add Related Posts After Content</h2>
        <p>Show related posts from the same category:</p>

        <pre><code>/**
 * Add related posts after post content
 */
function add_related_posts_after_content($content) {
    // Only on single posts
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;

    // Get categories of current post
    $categories = get_the_category($post->ID);

    if (empty($categories)) {
        return $content;
    }

    $category_ids = array();
    foreach ($categories as $category) {
        $category_ids[] = $category->term_id;
    }

    // Query for related posts
    $related_posts = get_posts(array(
        'category__in'   => $category_ids,
        'post__not_in'   => array($post->ID),
        'posts_per_page' => 3,
        'orderby'        => 'rand'
    ));

    if (empty($related_posts)) {
        return $content;
    }

    // Build related posts HTML
    $related_html = '<div class="related-posts">';
    $related_html .= '<h3>You Might Also Like:</h3>';
    $related_html .= '<ul>';

    foreach ($related_posts as $related_post) {
        $related_html .= '<li>';
        $related_html .= '<a href="' . get_permalink($related_post->ID) . '">';
        $related_html .= esc_html($related_post->post_title);
        $related_html .= '</a>';
        $related_html .= '</li>';
    }

    $related_html .= '</ul>';
    $related_html .= '</div>';

    wp_reset_postdata();

    return $content . $related_html;
}
add_filter('the_content', 'add_related_posts_after_content');</code></pre>

        <h2>Add Ads or Banners</h2>
        <p>Insert advertisement blocks strategically:</p>

        <pre><code>/**
 * Add advertisement after post content
 */
function add_ad_after_post_content($content) {
    // Only on single posts, not in feeds
    if (!is_single() || !is_main_query() || is_feed()) {
        return $content;
    }

    $ad_content = '<div class="post-ad-container">';
    $ad_content .= '<!-- Advertisement -->';
    $ad_content .= '<div class="ad-label">Advertisement</div>';

    // Option 1: Direct ad code
    $ad_content .= '<div class="ad-block">';
    $ad_content .= '<!-- Insert your ad code here -->';
    $ad_content .= '<a href="https://example.com/product" target="_blank" rel="noopener">';
    $ad_content .= '<img src="/images/ad-banner.jpg" alt="Advertisement" />';
    $ad_content .= '</a>';
    $ad_content .= '</div>';

    // Option 2: AdSense code (replace with your publisher ID)
    // $ad_content .= '<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>';
    // $ad_content .= '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-XXXXXXXXXXXXXXXX" data-ad-slot="XXXXXXXXXX" data-ad-format="auto"></ins>';
    // $ad_content .= '<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';

    $ad_content .= '</div>';

    return $content . $ad_content;
}
add_filter('the_content', 'add_ad_after_post_content');</code></pre>

        <h2>Conditional Content Based on User Status</h2>
        <p>Show different content for logged-in vs logged-out users:</p>

        <pre><code>/**
 * Add content based on user login status
 */
function add_conditional_content_after_post($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    $custom_content = '<div class="user-specific-content">';

    if (is_user_logged_in()) {
        // Content for logged-in users
        $current_user = wp_get_current_user();
        $custom_content .= '<p>Thanks for reading, ' . esc_html($current_user->display_name) . '!</p>';
        $custom_content .= '<a href="/dashboard" class="btn">Go to Dashboard</a>';
    } else {
        // Content for logged-out users
        $custom_content .= '<h4>Want access to premium content?</h4>';
        $custom_content .= '<p>Create a free account to unlock exclusive articles and features.</p>';
        $custom_content .= '<a href="/register" class="btn btn-primary">Sign Up Free</a> ';
        $custom_content .= '<a href="/login" class="btn btn-secondary">Login</a>';
    }

    $custom_content .= '</div>';

    return $content . $custom_content;
}
add_filter('the_content', 'add_conditional_content_after_post');</code></pre>

        <h2>Add Disclaimer or Legal Notice</h2>
        <p>Automatically add disclaimers to specific post types or categories:</p>

        <pre><code>/**
 * Add disclaimer before post content
 */
function add_disclaimer_before_post($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    // Only add to specific categories
    if (has_category(array('medical', 'legal', 'financial'))) {
        $disclaimer = '<div class="post-disclaimer">';
        $disclaimer .= '<p><strong>Disclaimer:</strong> The information provided in this article is for educational and informational purposes only. It should not be considered professional advice. Please consult with a qualified professional before making any decisions based on this content.</p>';
        $disclaimer .= '</div>';

        $content = $disclaimer . $content;
    }

    return $content;
}
add_filter('the_content', 'add_disclaimer_before_post');</code></pre>

        <h2>Post Type Specific Content</h2>
        <p>Add different content for different post types:</p>

        <pre><code>/**
 * Add content after posts based on post type
 */
function add_content_by_post_type($content) {
    if (!is_singular() || !is_main_query()) {
        return $content;
    }

    $post_type = get_post_type();
    $custom_content = '';

    switch ($post_type) {
        case 'post':
            $custom_content = '<div class="blog-post-footer">';
            $custom_content .= '<p>Browse more <a href="/blog">blog articles</a>.</p>';
            $custom_content .= '</div>';
            break;

        case 'portfolio':
            $custom_content = '<div class="portfolio-footer">';
            $custom_content .= '<p>Interested in working together? <a href="/contact">Get in touch</a>!</p>';
            $custom_content .= '</div>';
            break;

        case 'product':
            $custom_content = '<div class="product-footer">';
            $custom_content .= '<p>Questions about this product? <a href="/support">Contact support</a>.</p>';
            $custom_content .= '</div>';
            break;

        default:
            // No custom content for other post types
            break;
    }

    return $content . $custom_content;
}
add_filter('the_content', 'add_content_by_post_type');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use is_single() Check</td>
              <td>Prevents content from appearing on archive pages, search results, or excerpts</td>
            </tr>
            <tr>
              <td>Use is_main_query() Check</td>
              <td>Ensures content only appears in main post content, not widgets or sidebars</td>
            </tr>
            <tr>
              <td>Escape Output</td>
              <td>Use esc_html(), esc_url(), esc_attr() for security and XSS prevention</td>
            </tr>
            <tr>
              <td>Exclude from Feeds</td>
              <td>Use !is_feed() to prevent extra content in RSS feeds if not needed</td>
            </tr>
            <tr>
              <td>Use Semantic HTML</td>
              <td>Wrap content in divs with descriptive classes for easy styling</td>
            </tr>
            <tr>
              <td>Test on Mobile</td>
              <td>Ensure added content displays properly on small screens</td>
            </tr>
            <tr>
              <td>Consider Performance</td>
              <td>Avoid complex queries or external API calls in the_content filter</td>
            </tr>
            <tr>
              <td>Provide Opt-Out Option</td>
              <td>Consider adding custom field to disable injected content per-post</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Minimal impact (0.001-0.005s) for simple content injection. String concatenation is very fast in PHP. Complex additions with database queries (like related posts) can add 0.01-0.05s. Cache related posts queries with transients for better performance. Avoid external API calls or complex computations. For ads, use async loading scripts to prevent blocking page render.</p>

        <h2>Styling Your Injected Content</h2>
        <p>Add CSS to style your before/after content. Add this to your theme's style.css or custom CSS:</p>

        <pre><code>/* After post content styling */
.after-post-content {
    background: #f8f9fa;
    padding: 20px;
    margin: 30px 0;
    border-left: 4px solid #0073aa;
}

.after-post-content h3 {
    margin-top: 0;
}

/* Author bio box */
.author-bio-box {
    display: flex;
    gap: 20px;
    background: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    margin: 30px 0;
}

.author-avatar {
    flex-shrink: 0;
}

/* Related posts */
.related-posts {
    background: #f0f0f0;
    padding: 20px;
    margin: 30px 0;
}

.related-posts ul {
    list-style: none;
    padding: 0;
}

.related-posts li {
    margin: 10px 0;
}

/* Advertisement label */
.ad-label {
    font-size: 12px;
    color: #666;
    text-align: center;
    margin-bottom: 10px;
}</code></pre>
      </div>
    `,
    code: `/**
 * Add custom content after post content
 */
function add_content_after_post($content) {
    if (is_single() && is_main_query()) {
        $custom_content = '<div class="after-post-content">';
        $custom_content .= '<h3>Enjoyed this article?</h3>';
        $custom_content .= '<p>Subscribe to our newsletter for more great content!</p>';
        $custom_content .= '<a href="/newsletter" class="btn">Subscribe Now</a>';
        $custom_content .= '</div>';

        $content .= $custom_content;
    }

    return $content;
}
add_filter('the_content', 'add_content_after_post');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '7 min',
    category: 'WordPress Content',
    tags: ['Content', 'Hooks', 'Filters'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Add Content Before or After Posts in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to automatically insert custom content, CTAs, ads, social buttons, author bios, and more before or after WordPress post content using filters.',
      keywords: ['WordPress add content after post', 'WordPress the_content filter', 'insert content WordPress', 'WordPress post hooks', 'add CTA after post', 'WordPress content injection', 'author bio WordPress', 'related posts WordPress'],
      canonical: 'https://shahmir.dev/blog/custom-content-before-after-posts',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Content Before/After Posts in WordPress',
        description: 'Complete guide to inserting custom content, CTAs, ads, social sharing buttons, and more before or after WordPress posts.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Why is my injected content appearing in excerpts and archive pages?",
        answer: "You need to add conditional checks to your function. Use is_single() to restrict to single post pages only, and is_main_query() to ensure it only affects the main content loop. Without these checks, the_content filter applies everywhere WordPress displays content, including excerpts, archives, and widgets. Always wrap your code in: if (is_single() && is_main_query()) { ... }"
      },
      {
        question: "How do I add content in the middle of a post, not just before or after?",
        answer: "You'll need to split the content string at your desired position. You can use strpos() to find a specific HTML tag or string, substr() to split the content, or count paragraphs with preg_match_all() and insert after a specific paragraph number. For example, to insert after the 3rd paragraph: Find all </p> tags, split after the 3rd occurrence, insert your content, then concatenate everything back together."
      },
      {
        question: "Will this content appear in my RSS feed?",
        answer: "Yes, by default it will. To exclude from RSS feeds, add !is_feed() to your conditional check: if (is_single() && is_main_query() && !is_feed()). This prevents newsletter signups, ads, or other web-only content from appearing in feed readers. However, you might want some content (like author bios) in feeds - adjust based on your needs."
      },
      {
        question: "Can I disable the injected content for specific posts?",
        answer: "Yes, add a custom field check. Use get_post_meta() to check for a custom field like 'disable_injected_content'. If it exists and is true, return the content without modification. In your function: if (get_post_meta(get_the_ID(), 'disable_injected_content', true)) { return $content; }. Then add this custom field to posts where you want to disable the feature."
      },
      {
        question: "How do I add different content for mobile vs desktop users?",
        answer: "Use wp_is_mobile() to detect mobile devices, though note it's basic user-agent detection. Better approach: use CSS media queries to hide/show different content blocks. Add both mobile and desktop versions to your injected content with different classes, then use CSS @media queries to display only the appropriate version. This is more reliable than server-side detection."
      }
    ]
  },
  {
    id: 36,
    slug: 'remove-p-tags-images',
    title: 'Remove P Tags Around Images',
    excerpt: 'Eliminate unwanted paragraph tags that WordPress automatically wraps around images for cleaner HTML and better styling control.',
    content: `
      <div class="snippet-content">
        <p>WordPress's wpautop() function automatically wraps images in paragraph tags, which can cause unwanted spacing, layout issues, and CSS styling challenges. Removing these tags gives you cleaner HTML and better control over image presentation.</p>

        <h2>Why Remove P Tags Around Images?</h2>
        <ul>
          <li><strong>Better Layouts:</strong> Prevent unwanted margins and spacing around images</li>
          <li><strong>Styling Control:</strong> Apply CSS directly to images without paragraph interference</li>
          <li><strong>Grid Layouts:</strong> Essential for creating image galleries and grid-based designs</li>
          <li><strong>Flexbox/CSS Grid:</strong> Paragraph wrappers break modern CSS layout systems</li>
          <li><strong>Responsive Design:</strong> Easier to implement responsive image techniques</li>
          <li><strong>Validation:</strong> Prevents invalid HTML when using figure tags or other image containers</li>
        </ul>

        <h2>Basic: Remove All P Tags from Images</h2>
        <p>This code strips paragraph tags from around all images in post content:</p>

        <pre><code>/**
 * Remove p tags around images
 */
function remove_p_tags_around_images($content) {
    // Remove p tags that only contain an img tag
    $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);

    return $content;
}
add_filter('the_content', 'remove_p_tags_around_images');</code></pre>

        <h2>Advanced: Remove P Tags with Better Pattern Matching</h2>
        <p>More comprehensive approach handling various image scenarios:</p>

        <pre><code>/**
 * Remove p tags around images (comprehensive version)
 */
function advanced_remove_p_tags_images($content) {
    // Pattern 1: Remove p tags around images
    $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);

    // Pattern 2: Remove p tags that only contain whitespace and an image
    $content = preg_replace('/<p>([\\s]*)?(<img[^>]*>)([\\s]*)?<\\/p>/i', '\\2', $content);

    // Pattern 3: Remove p tags from images with captions
    $content = preg_replace('/<p>\\s*(<a[^>]+>\\s*)?(<img[^>]+>)(\\s*<\\/a>)?([^<]*)<\\/p>/i', '\\1\\2\\3\\4', $content);

    return $content;
}
add_filter('the_content', 'advanced_remove_p_tags_images');</code></pre>

        <h2>Remove P Tags and Add Custom Wrapper</h2>
        <p>Strip paragraph tags and wrap images in figure elements instead:</p>

        <pre><code>/**
 * Remove p tags and wrap images in figure elements
 */
function replace_p_with_figure($content) {
    // Remove p tags from images
    $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);

    // Wrap standalone images in figure tags
    $content = preg_replace(
        '/(<img[^>]+class="[^"]*)(wp-image-[0-9]+)([^"]*"[^>]*>)/i',
        '<figure class="wp-figure">\\1\\2\\3</figure>',
        $content
    );

    return $content;
}
add_filter('the_content', 'replace_p_with_figure');</code></pre>

        <h2>Conditional: Only Remove for Aligned Images</h2>
        <p>Remove paragraph tags only from images with alignment classes:</p>

        <pre><code>/**
 * Remove p tags only from aligned images
 */
function remove_p_from_aligned_images($content) {
    // Remove p tags only from images with alignleft, alignright, aligncenter
    $patterns = array(
        '/<p>\\s*(<a[^>]+>)?\\s*(<img[^>]+class="[^"]*alignleft[^"]*"[^>]*>)\\s*(<\\/a>)?\\s*<\\/p>/i',
        '/<p>\\s*(<a[^>]+>)?\\s*(<img[^>]+class="[^"]*alignright[^"]*"[^>]*>)\\s*(<\\/a>)?\\s*<\\/p>/i',
        '/<p>\\s*(<a[^>]+>)?\\s*(<img[^>]+class="[^"]*aligncenter[^"]*"[^>]*>)\\s*(<\\/a>)?\\s*<\\/p>/i',
        '/<p>\\s*(<a[^>]+>)?\\s*(<img[^>]+class="[^"]*alignnone[^"]*"[^>]*>)\\s*(<\\/a>)?\\s*<\\/p>/i'
    );

    foreach ($patterns as $pattern) {
        $content = preg_replace($pattern, '\\1\\2\\3', $content);
    }

    return $content;
}
add_filter('the_content', 'remove_p_from_aligned_images');</code></pre>

        <h2>Remove P Tags from WordPress Galleries</h2>
        <p>Clean up paragraph tags around WordPress gallery shortcodes:</p>

        <pre><code>/**
 * Remove p tags from gallery shortcodes
 */
function remove_p_from_galleries($content) {
    // Remove p tags from gallery shortcode
    $content = preg_replace('/<p>\\s*\\[gallery([^\\]]*)\\]\\s*<\\/p>/i', '[gallery\\1]', $content);

    // Remove p tags from other common shortcodes with media
    $shortcodes = array('gallery', 'caption', 'embed', 'video', 'audio');

    foreach ($shortcodes as $shortcode) {
        $content = preg_replace(
            '/<p>\\s*\\[' . $shortcode . '([^\\]]*)\\]\\s*<\\/p>/i',
            '[' . $shortcode . '\\1]',
            $content
        );
    }

    return $content;
}
add_filter('the_content', 'remove_p_from_galleries');</code></pre>

        <h2>Gutenberg Block Editor Compatible</h2>
        <p>Handle both classic editor and Gutenberg block content:</p>

        <pre><code>/**
 * Remove p tags around images (Gutenberg compatible)
 */
function remove_p_tags_gutenberg_compatible($content) {
    // Check if block editor is being used
    $is_gutenberg = has_blocks($content);

    if ($is_gutenberg) {
        // For Gutenberg, only clean specific scenarios
        // Most block content is already properly structured
        $content = preg_replace('/<p>\\s*(<figure[^>]*>.*?<\\/figure>)\\s*<\\/p>/is', '\\1', $content);
    } else {
        // For classic editor, use full cleanup
        $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);
    }

    return $content;
}
add_filter('the_content', 'remove_p_tags_gutenberg_compatible', 20);</code></pre>

        <h2>Completely Disable wpautop for Images</h2>
        <p>Prevent WordPress from adding paragraph tags to images in the first place:</p>

        <pre><code>/**
 * Disable wpautop entirely
 */
function disable_wpautop_completely() {
    remove_filter('the_content', 'wpautop');
    remove_filter('the_excerpt', 'wpautop');
}
add_action('after_setup_theme', 'disable_wpautop_completely');

/**
 * Alternative: Disable wpautop only for specific post types
 */
function disable_wpautop_for_post_types() {
    global $post;

    // Disable for pages and custom post types
    if (is_page() || get_post_type($post) == 'portfolio') {
        remove_filter('the_content', 'wpautop');
    }
}
add_action('wp', 'disable_wpautop_for_post_types');</code></pre>

        <h2>Remove Empty P Tags</h2>
        <p>Clean up empty paragraph tags that can appear after removing image paragraphs:</p>

        <pre><code>/**
 * Remove empty p tags and p tags with only whitespace
 */
function remove_empty_p_tags($content) {
    // Remove p tags around images
    $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);

    // Remove completely empty p tags
    $content = preg_replace('/<p>\\s*<\\/p>/i', '', $content);

    // Remove p tags that only contain &nbsp;
    $content = preg_replace('/<p>\\s*&nbsp;\\s*<\\/p>/i', '', $content);

    // Remove p tags with only whitespace
    $content = preg_replace('/<p>\\s+<\\/p>/i', '', $content);

    return $content;
}
add_filter('the_content', 'remove_empty_p_tags', 20);</code></pre>

        <h2>Custom: Keep P Tags, Remove Margins</h2>
        <p>Alternative approach: keep paragraph tags but add a class for CSS targeting:</p>

        <pre><code>/**
 * Add class to p tags containing images
 */
function add_class_to_image_paragraphs($content) {
    // Add custom class to p tags that contain images
    $content = preg_replace(
        '/<p>(\\s*<a[^>]*>)?\\s*<img/i',
        '<p class="image-paragraph">\\1<img',
        $content
    );

    return $content;
}
add_filter('the_content', 'add_class_to_image_paragraphs');

/* Add to your CSS */
/*
.image-paragraph {
    margin: 0;
    padding: 0;
}
*/</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Test with Different Scenarios</td>
              <td>Verify regex works with linked images, aligned images, and captions</td>
            </tr>
            <tr>
              <td>Use Higher Filter Priority</td>
              <td>Add priority 20+ to ensure it runs after wpautop (which runs at 10)</td>
            </tr>
            <tr>
              <td>Preserve Accessibility</td>
              <td>Ensure alt text and captions remain intact after processing</td>
            </tr>
            <tr>
              <td>Consider Gutenberg</td>
              <td>Block editor has better image handling; adjust logic accordingly</td>
            </tr>
            <tr>
              <td>Don't Remove All wpautop</td>
              <td>Completely disabling wpautop affects paragraph formatting site-wide</td>
            </tr>
            <tr>
              <td>Cache Bust After Changes</td>
              <td>Clear all caching after implementing to see changes immediately</td>
            </tr>
            <tr>
              <td>Test RSS Feeds</td>
              <td>Ensure images still display properly in feed readers</td>
            </tr>
            <tr>
              <td>Validate HTML</td>
              <td>Use W3C validator to ensure output is valid HTML5</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Negligible impact (0.001-0.003s per post). Regex operations are fast and execute during the_content filter which already processes content. More complex patterns with multiple replacements may add 0.002-0.005s. Consider using simpler patterns if you have very long posts with many images. No database queries involved, making this very lightweight.</p>

        <h2>Troubleshooting</h2>
        <ul>
          <li><strong>P tags still appearing:</strong> Increase filter priority to 20 or higher: add_filter('the_content', 'function_name', 20)</li>
          <li><strong>Images disappearing:</strong> Check regex pattern isn't too aggressive; test with simple pattern first</li>
          <li><strong>Gutenberg blocks affected:</strong> Add has_blocks() check to only process classic editor content</li>
          <li><strong>Captions broken:</strong> Use more specific regex that preserves caption shortcode structure</li>
          <li><strong>RSS feed issues:</strong> Test in feed reader; may need to exclude from is_feed() contexts</li>
        </ul>

        <h2>CSS Alternative Solution</h2>
        <p>If you prefer not to modify HTML, use CSS to neutralize paragraph tag effects:</p>

        <pre><code>/* Remove margins from paragraphs containing only images */
.entry-content p > img:only-child {
    display: block;
}

.entry-content p:has(> img:only-child) {
    margin: 0;
    padding: 0;
    line-height: 0;
}

/* For linked images */
.entry-content p:has(> a:only-child > img) {
    margin: 0;
    padding: 0;
}

/* Aligned images */
.entry-content p img.alignleft,
.entry-content p img.alignright,
.entry-content p img.aligncenter {
    display: block;
}

/* Note: :has() selector has limited browser support */</code></pre>
      </div>
    `,
    code: `/**
 * Remove p tags around images
 */
function remove_p_tags_around_images($content) {
    // Remove p tags that only contain an img tag
    $content = preg_replace('/<p>\\s*(<a .*>)?\\s*(<img .*>)\\s*(<\\/a>)?\\s*<\\/p>/iU', '\\1\\2\\3', $content);

    return $content;
}
add_filter('the_content', 'remove_p_tags_around_images');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '6 min',
    category: 'WordPress Content',
    tags: ['Images', 'Formatting', 'Content'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Remove P Tags Around Images in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to remove unwanted paragraph tags that WordPress wraps around images for cleaner HTML, better layouts, and improved styling control.',
      keywords: ['WordPress remove p tags images', 'WordPress wpautop', 'remove paragraph tags WordPress', 'WordPress image formatting', 'clean WordPress HTML', 'WordPress image paragraphs', 'wpautop filter', 'WordPress image spacing'],
      canonical: 'https://shahmir.dev/blog/remove-p-tags-images',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Remove P Tags Around Images in WordPress',
        description: 'Complete guide to removing unwanted paragraph tags around images in WordPress for better layout control and cleaner HTML.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Why does WordPress wrap images in paragraph tags?",
        answer: "WordPress uses the wpautop() function to automatically format plain text into properly formatted HTML paragraphs. This function treats images as inline content and wraps them in <p> tags, similar to how it handles text. This behavior dates back to WordPress's blogging origins where most images were embedded within text paragraphs. While helpful for basic formatting, it causes layout issues with modern CSS techniques."
      },
      {
        question: "Will removing paragraph tags break my site's layout?",
        answer: "Generally no, but test first. Removing p tags typically improves layouts by eliminating unwanted margins and spacing. However, if your CSS specifically targets 'p img' selectors, you may need to update your styles. Check your theme's CSS for image-related paragraph styles before implementing. Always test on a staging site first, especially if using older themes that may depend on these paragraph wrappers."
      },
      {
        question: "Should I completely disable wpautop or just remove p tags from images?",
        answer: "Only remove p tags from images, don't disable wpautop entirely. Completely removing wpautop affects all content formatting - your paragraphs won't have proper spacing, line breaks will disappear, and content will become unformatted text. Use targeted regex patterns that only affect image-containing paragraphs while preserving wpautop's benefits for text content."
      },
      {
        question: "Does this work with Gutenberg block editor?",
        answer: "Partially. Gutenberg generally produces cleaner HTML and doesn't wrap block-level images in paragraph tags like the classic editor does. However, if you paste images into paragraph blocks or use classic editor content, you may still encounter wrapped images. Use has_blocks() to detect Gutenberg content and apply different rules. For pure Gutenberg sites, you may not need this fix at all."
      },
      {
        question: "Why isn't my code working even with priority set?",
        answer: "Several reasons: 1) Caching - clear all caches (browser, WordPress, CDN) to see changes. 2) Theme override - some themes manually apply wpautop or strip filters. 3) Plugin conflict - page builders or formatting plugins may interfere. 4) Gutenberg blocks - block content may already be properly structured. 5) Regex pattern issue - test with simpler patterns first. Check with var_dump($content) to see actual content structure."
      }
    ]
  },
  {
    id: 37,
    slug: 'add-table-of-contents',
    title: 'Generate Table of Contents',
    excerpt: 'Automatically create a dynamic table of contents from post headings to improve navigation and user experience on long-form content.',
    content: `
      <div class="snippet-content">
        <p>A table of contents (TOC) dramatically improves readability of long articles by providing quick navigation to specific sections. This code automatically generates a TOC by parsing heading tags (H2, H3, etc.) from your post content and creating jump links with smooth scroll navigation.</p>

        <h2>Why Add a Table of Contents?</h2>
        <ul>
          <li><strong>Better UX:</strong> Users can jump directly to sections they're interested in</li>
          <li><strong>Longer Session Duration:</strong> Readers stay engaged with scannable content structure</li>
          <li><strong>SEO Benefits:</strong> Google may display TOC as sitelinks in search results</li>
          <li><strong>Accessibility:</strong> Screen readers can navigate content more easily</li>
          <li><strong>Mobile Friendly:</strong> Quick navigation is especially valuable on small screens</li>
          <li><strong>Lower Bounce Rate:</strong> Visitors find relevant content faster</li>
        </ul>

        <h2>Basic Table of Contents</h2>
        <p>This function automatically generates a TOC from H2 and H3 headings:</p>

        <pre><code>/**
 * Generate table of contents from post headings
 */
function generate_table_of_contents($content) {
    // Only on single posts with more than 3 headings
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    // Find all H2 and H3 headings
    preg_match_all('/<h([2-3])([^>]*)>(.*?)<\\/h[2-3]>/i', $content, $matches, PREG_SET_ORDER);

    // Need at least 3 headings for TOC
    if (count($matches) < 3) {
        return $content;
    }

    $toc = '<div class="table-of-contents">';
    $toc .= '<h2>Table of Contents</h2>';
    $toc .= '<ul>';

    foreach ($matches as $heading) {
        $level = $heading[1];
        $text = strip_tags($heading[3]);
        $slug = sanitize_title($text);

        // Add ID to heading in content
        $content = str_replace(
            $heading[0],
            '<h' . $level . ' id="' . $slug . '">' . $heading[3] . '</h' . $level . '>',
            $content
        );

        // Add to TOC
        $class = ($level == 2) ? 'toc-h2' : 'toc-h3';
        $toc .= '<li class="' . $class . '">';
        $toc .= '<a href="#' . $slug . '">' . esc_html($text) . '</a>';
        $toc .= '</li>';
    }

    $toc .= '</ul>';
    $toc .= '</div>';

    // Insert TOC after first paragraph
    $content = preg_replace('/<\\/p>/', '</p>' . $toc, $content, 1);

    return $content;
}
add_filter('the_content', 'generate_table_of_contents', 10);</code></pre>

        <h2>Advanced TOC with Hierarchy</h2>
        <p>Create nested lists that respect heading hierarchy (H2 > H3 > H4):</p>

        <pre><code>/**
 * Generate hierarchical table of contents
 */
function advanced_table_of_contents($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    // Extract all headings H2-H4
    preg_match_all('/<h([2-4])([^>]*)>(.*?)<\\/h[2-4]>/i', $content, $matches, PREG_SET_ORDER);

    if (count($matches) < 3) {
        return $content;
    }

    $toc = '<div class="advanced-toc">';
    $toc .= '<div class="toc-header">';
    $toc .= '<h2>Contents</h2>';
    $toc .= '<button class="toc-toggle" aria-label="Toggle Table of Contents">[show]</button>';
    $toc .= '</div>';
    $toc .= '<nav class="toc-nav" role="navigation">';
    $toc .= '<ul class="toc-list">';

    $prev_level = 2;
    $counter = 0;

    foreach ($matches as $heading) {
        $level = (int)$heading[1];
        $text = strip_tags($heading[3]);
        $slug = 'heading-' . ++$counter;

        // Add ID to heading in content
        if (strpos($heading[0], 'id=') === false) {
            $new_heading = '<h' . $level . ' id="' . $slug . '"' . $heading[2] . '>' . $heading[3] . '</h' . $level . '>';
            $content = str_replace($heading[0], $new_heading, $content);
        }

        // Handle nesting
        if ($level > $prev_level) {
            $toc .= '<ul class="toc-sublist">';
        } elseif ($level < $prev_level) {
            $toc .= str_repeat('</ul></li>', $prev_level - $level);
        } else {
            if ($counter > 1) {
                $toc .= '</li>';
            }
        }

        $toc .= '<li class="toc-item toc-level-' . $level . '">';
        $toc .= '<a href="#' . $slug . '" class="toc-link">' . esc_html($text) . '</a>';

        $prev_level = $level;
    }

    // Close remaining tags
    $toc .= '</li>';
    $toc .= str_repeat('</ul>', $prev_level - 1);
    $toc .= '</nav>';
    $toc .= '</div>';

    // Insert after first paragraph
    $content = preg_replace('/<\\/p>/', '</p>' . $toc, $content, 1);

    return $content;
}
add_filter('the_content', 'advanced_table_of_contents', 10);</code></pre>

        <h2>Sticky/Fixed Table of Contents</h2>
        <p>Create a sidebar TOC that stays visible while scrolling:</p>

        <pre><code>/**
 * Generate sticky sidebar table of contents
 */
function sticky_sidebar_toc($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;

    preg_match_all('/<h([2-3])([^>]*)>(.*?)<\\/h[2-3]>/i', $content, $matches, PREG_SET_ORDER);

    if (count($matches) < 3) {
        return $content;
    }

    $toc_html = '<aside class="sticky-toc" role="complementary">';
    $toc_html .= '<div class="sticky-toc-inner">';
    $toc_html .= '<h3>Jump to Section</h3>';
    $toc_html .= '<ul class="toc-menu">';

    $heading_count = 0;

    foreach ($matches as $heading) {
        $level = $heading[1];
        $text = strip_tags($heading[3]);
        $slug = 'toc-' . sanitize_title($text) . '-' . ++$heading_count;

        // Add ID to headings
        if (strpos($heading[0], 'id=') === false) {
            $new_heading = '<h' . $level . ' id="' . $slug . '"' . $heading[2] . '>' . $heading[3] . '</h' . $level . '>';
            $content = str_replace($heading[0], $new_heading, $content);
        }

        $indent_class = ($level == 3) ? 'toc-indent' : '';

        $toc_html .= '<li class="toc-item ' . $indent_class . '">';
        $toc_html .= '<a href="#' . $slug . '" class="toc-link" data-target="' . $slug . '">';
        $toc_html .= esc_html($text);
        $toc_html .= '</a>';
        $toc_html .= '</li>';
    }

    $toc_html .= '</ul>';
    $toc_html .= '<div class="toc-progress">';
    $toc_html .= '<div class="toc-progress-bar"></div>';
    $toc_html .= '</div>';
    $toc_html .= '</div>';
    $toc_html .= '</aside>';

    // Store TOC in post meta for template use
    update_post_meta($post->ID, '_toc_sidebar', $toc_html);

    return $content;
}
add_filter('the_content', 'sticky_sidebar_toc', 10);</code></pre>

        <h2>Collapsible Table of Contents</h2>
        <p>Add expand/collapse functionality with smooth animations:</p>

        <pre><code>/**
 * Generate collapsible table of contents
 */
function collapsible_toc($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    preg_match_all('/<h([2-4])([^>]*)>(.*?)<\\/h[2-4]>/i', $content, $matches, PREG_SET_ORDER);

    if (count($matches) < 3) {
        return $content;
    }

    $toc = '<div class="collapsible-toc" data-state="expanded">';
    $toc .= '<div class="toc-header-bar">';
    $toc .= '<h3 class="toc-title">📋 Table of Contents</h3>';
    $toc .= '<button class="toc-toggle-btn" aria-expanded="true" aria-label="Toggle Table of Contents">';
    $toc .= '<span class="toc-toggle-icon">▼</span>';
    $toc .= '</button>';
    $toc .= '</div>';
    $toc .= '<div class="toc-content">';
    $toc .= '<ol class="toc-ordered-list">';

    $index = 0;

    foreach ($matches as $heading) {
        $level = (int)$heading[1];
        $text = strip_tags($heading[3]);
        $slug = 'section-' . ++$index;

        // Update content with IDs
        if (strpos($heading[0], 'id=') === false) {
            $replacement = '<h' . $level . ' id="' . $slug . '"' . $heading[2] . '>' . $heading[3] . '</h' . $level . '>';
            $content = str_replace($heading[0], $replacement, $content);
        }

        $depth_class = 'toc-depth-' . ($level - 1);

        $toc .= '<li class="toc-entry ' . $depth_class . '">';
        $toc .= '<a href="#' . $slug . '" class="toc-anchor">';
        $toc .= '<span class="toc-number">' . $index . '.</span> ';
        $toc .= '<span class="toc-text">' . esc_html($text) . '</span>';
        $toc .= '</a>';
        $toc .= '</li>';
    }

    $toc .= '</ol>';
    $toc .= '</div>';
    $toc .= '</div>';

    // JavaScript for toggle functionality
    $toc .= '<script>
    document.addEventListener("DOMContentLoaded", function() {
        const tocToggle = document.querySelector(".toc-toggle-btn");
        const tocContent = document.querySelector(".toc-content");
        const tocContainer = document.querySelector(".collapsible-toc");

        if (tocToggle) {
            tocToggle.addEventListener("click", function() {
                const isExpanded = tocContainer.getAttribute("data-state") === "expanded";
                tocContainer.setAttribute("data-state", isExpanded ? "collapsed" : "expanded");
                this.setAttribute("aria-expanded", !isExpanded);
                tocContent.style.display = isExpanded ? "none" : "block";
            });
        }

        // Smooth scroll
        document.querySelectorAll(".toc-anchor").forEach(link => {
            link.addEventListener("click", function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute("href"));
                if (target) {
                    target.scrollIntoView({ behavior: "smooth", block: "start" });
                    // Update URL without jumping
                    history.pushState(null, null, this.getAttribute("href"));
                }
            });
        });
    });
    </script>';

    // Insert after first paragraph
    $content = preg_replace('/<\\/p>/', '</p>' . $toc, $content, 1);

    return $content;
}
add_filter('the_content', 'collapsible_toc', 10);</code></pre>

        <h2>Shortcode-Based TOC</h2>
        <p>Give users control over TOC placement with a [toc] shortcode:</p>

        <pre><code>/**
 * Table of contents shortcode
 */
function toc_shortcode($atts) {
    $atts = shortcode_atts(array(
        'title'    => 'Table of Contents',
        'depth'    => 3,  // Include H2, H3
        'toggle'   => 'yes',
        'numbered' => 'no'
    ), $atts);

    global $post;

    if (!$post) {
        return '';
    }

    $content = $post->post_content;

    // Extract headings based on depth
    $max_depth = (int)$atts['depth'];
    $pattern = '/<h([2-' . $max_depth . '])([^>]*)>(.*?)<\\/h[2-' . $max_depth . ']>/i';
    preg_match_all($pattern, $content, $matches, PREG_SET_ORDER);

    if (empty($matches)) {
        return '';
    }

    $list_type = ($atts['numbered'] === 'yes') ? 'ol' : 'ul';
    $toggle_btn = '';

    if ($atts['toggle'] === 'yes') {
        $toggle_btn = '<button class="toc-toggle" onclick="this.nextElementSibling.classList.toggle(\'hidden\')">[show/hide]</button>';
    }

    $toc = '<div class="shortcode-toc">';
    $toc .= '<div class="toc-head">';
    $toc .= '<h3>' . esc_html($atts['title']) . '</h3>';
    $toc .= $toggle_btn;
    $toc .= '</div>';
    $toc .= '<' . $list_type . ' class="toc-list">';

    $counter = 0;

    foreach ($matches as $heading) {
        $text = strip_tags($heading[3]);
        $slug = 'toc-heading-' . ++$counter;
        $level = (int)$heading[1];

        $toc .= '<li class="toc-level-' . $level . '">';
        $toc .= '<a href="#' . $slug . '">' . esc_html($text) . '</a>';
        $toc .= '</li>';
    }

    $toc .= '</' . $list_type . '>';
    $toc .= '</div>';

    return $toc;
}
add_shortcode('toc', 'toc_shortcode');

/**
 * Usage in posts:
 * [toc]
 * [toc title="Contents" depth="4" toggle="yes" numbered="yes"]
 */</code></pre>

        <h2>Conditional TOC by Category or Word Count</h2>
        <p>Show TOC only for long posts or specific categories:</p>

        <pre><code>/**
 * Conditional table of contents
 */
function conditional_toc($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;

    // Only show on posts with 1500+ words
    $word_count = str_word_count(strip_tags($post->post_content));

    if ($word_count < 1500) {
        return $content;
    }

    // Only show for specific categories
    $show_categories = array('tutorials', 'guides', 'reviews');
    $post_categories = wp_get_post_categories($post->ID, array('fields' => 'slugs'));

    if (!array_intersect($show_categories, $post_categories)) {
        return $content;
    }

    // Generate TOC
    preg_match_all('/<h([2-3])([^>]*)>(.*?)<\\/h[2-3]>/i', $content, $matches, PREG_SET_ORDER);

    if (count($matches) < 4) {
        return $content;
    }

    $toc = '<div class="conditional-toc">';
    $toc .= '<h2>Article Overview</h2>';
    $toc .= '<p class="toc-meta">Reading time: ' . ceil($word_count / 200) . ' minutes</p>';
    $toc .= '<ul>';

    $idx = 0;

    foreach ($matches as $heading) {
        $text = strip_tags($heading[3]);
        $slug = 'section-' . ++$idx;

        // Add anchors
        if (strpos($heading[0], 'id=') === false) {
            $content = str_replace(
                $heading[0],
                '<h' . $heading[1] . ' id="' . $slug . '">' . $heading[3] . '</h' . $heading[1] . '>',
                $content
            );
        }

        $toc .= '<li><a href="#' . $slug . '">' . esc_html($text) . '</a></li>';
    }

    $toc .= '</ul>';
    $toc .= '</div>';

    // Insert after first paragraph
    $content = preg_replace('/<\\/p>/', '</p>' . $toc, $content, 1);

    return $content;
}
add_filter('the_content', 'conditional_toc', 10);</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use Unique IDs</td>
              <td>Prevent duplicate IDs by adding counters or post-specific prefixes</td>
            </tr>
            <tr>
              <td>Sanitize Heading Text</td>
              <td>Use sanitize_title() to create URL-safe slugs for anchor links</td>
            </tr>
            <tr>
              <td>Check Heading Count</td>
              <td>Only show TOC if there are 3+ headings; otherwise it's unnecessary</td>
            </tr>
            <tr>
              <td>Implement Smooth Scroll</td>
              <td>Enhance UX with CSS scroll-behavior: smooth or JavaScript scrollIntoView()</td>
            </tr>
            <tr>
              <td>Make It Accessible</td>
              <td>Use semantic HTML (nav, aria-labels) for screen reader compatibility</td>
            </tr>
            <tr>
              <td>Add Active State</td>
              <td>Highlight current section in TOC as user scrolls through content</td>
            </tr>
            <tr>
              <td>Mobile Optimization</td>
              <td>Consider collapsible TOC or floating button for small screens</td>
            </tr>
            <tr>
              <td>Cache TOC Output</td>
              <td>Store generated TOC in transients for better performance on high-traffic posts</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Low impact (0.005-0.01s per post). Regex pattern matching and string replacement are relatively fast operations. For very long posts (5000+ words with 50+ headings), impact can reach 0.02-0.05s. Consider caching the generated TOC in post meta or transients for frequently accessed posts. JavaScript-based TOC generation (client-side) can eliminate server impact entirely but reduces SEO benefits.</p>

        <h2>Styling Your Table of Contents</h2>
        <p>Add CSS to make your TOC visually appealing:</p>

        <pre><code>/* Basic TOC Styling */
.table-of-contents {
    background: #f9f9f9;
    border: 1px solid #ddd;
    border-left: 4px solid #0073aa;
    padding: 20px;
    margin: 30px 0;
}

.table-of-contents h2 {
    margin-top: 0;
    font-size: 1.2em;
}

.table-of-contents ul {
    list-style: none;
    padding-left: 0;
}

.table-of-contents li {
    margin: 8px 0;
}

.toc-h3 {
    padding-left: 20px;
}

/* Smooth scrolling */
html {
    scroll-behavior: smooth;
}

/* Active link highlighting */
.toc-link.active {
    font-weight: bold;
    color: #0073aa;
}

/* Sticky TOC */
.sticky-toc {
    position: sticky;
    top: 20px;
    max-height: calc(100vh - 40px);
    overflow-y: auto;
}

/* Collapsible TOC */
.collapsible-toc[data-state="collapsed"] .toc-content {
    display: none;
}

.toc-toggle-btn {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1em;
}</code></pre>
      </div>
    `,
    code: `/**
 * Generate table of contents from post headings
 */
function generate_table_of_contents($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    preg_match_all('/<h([2-3])([^>]*)>(.*?)<\\/h[2-3]>/i', $content, $matches, PREG_SET_ORDER);

    if (count($matches) < 3) {
        return $content;
    }

    $toc = '<div class="table-of-contents">';
    $toc .= '<h2>Table of Contents</h2>';
    $toc .= '<ul>';

    foreach ($matches as $heading) {
        $level = $heading[1];
        $text = strip_tags($heading[3]);
        $slug = sanitize_title($text);

        $content = str_replace(
            $heading[0],
            '<h' . $level . ' id="' . $slug . '">' . $heading[3] . '</h' . $level . '>',
            $content
        );

        $class = ($level == 2) ? 'toc-h2' : 'toc-h3';
        $toc .= '<li class="' . $class . '"><a href="#' . $slug . '">' . esc_html($text) . '</a></li>';
    }

    $toc .= '</ul></div>';

    $content = preg_replace('/<\\/p>/', '</p>' . $toc, $content, 1);

    return $content;
}
add_filter('the_content', 'generate_table_of_contents', 10);`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '9 min',
    category: 'WordPress Content',
    tags: ['TOC', 'Content', 'Navigation'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Generate Table of Contents in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to automatically create dynamic table of contents from post headings in WordPress. Improve navigation, SEO, and user experience with comprehensive code examples.',
      keywords: ['WordPress table of contents', 'TOC WordPress', 'automatic TOC', 'WordPress navigation', 'heading anchors WordPress', 'WordPress jump links', 'sticky TOC', 'collapsible table of contents'],
      canonical: 'https://shahmir.dev/blog/add-table-of-contents',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Generate Table of Contents in WordPress',
        description: 'Complete guide to automatically generating table of contents from post headings for better navigation and SEO.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "How do I prevent the TOC from appearing on certain posts?",
        answer: "Add a custom field check at the beginning of your function: if (get_post_meta(get_the_ID(), 'disable_toc', true)) { return $content; }. Then add a custom field 'disable_toc' with value '1' to posts where you don't want TOC. Alternatively, check post categories or tags to exclude specific content types. You can also set a minimum word count requirement so short posts don't get a TOC."
      },
      {
        question: "Why aren't my heading anchors working after clicking?",
        answer: "Several reasons: 1) IDs might not be added to headings (check HTML source). 2) JavaScript might be preventing default link behavior. 3) Fixed headers can cause offset issues - add scroll-padding-top: 100px; to your CSS. 4) The ID replacement in str_replace() might fail if headings already have IDs. Use strpos() to check for existing IDs before adding. 5) URL encoding issues - ensure slugs are properly sanitized."
      },
      {
        question: "Can I make the TOC highlight the current section as I scroll?",
        answer: "Yes, use Intersection Observer API in JavaScript. Observe all heading elements, and when they enter viewport, add an 'active' class to the corresponding TOC link. Example: const observer = new IntersectionObserver(entries => { entries.forEach(entry => { if(entry.isIntersecting) { document.querySelector('[href=\"#' + entry.target.id + '\"]').classList.add('active'); } }); }); Then observe all headings with IDs."
      },
      {
        question: "How do I place the TOC in the sidebar instead of inline?",
        answer: "Store the TOC HTML in a post meta field or global variable instead of inserting it into content. Then create a widget or use get_post_meta() in your sidebar template to display it. Example: In filter function, use update_post_meta($post->ID, '_sidebar_toc', $toc); instead of adding to content. In sidebar.php: echo get_post_meta(get_the_ID(), '_sidebar_toc', true); Add position: sticky; top: 20px; to CSS for fixed sidebar behavior."
      },
      {
        question: "Will this work with Gutenberg blocks?",
        answer: "Yes, it works with both classic and Gutenberg content since it processes the final rendered HTML output, not the editor content. However, Gutenberg's heading blocks already include anchor options. You can access these with the block's 'anchor' setting. For consistency, your code should check if headings already have IDs before adding new ones: if (strpos($heading[0], 'id=') === false) { /* add ID */ }. This prevents duplicate or conflicting anchors."
      }
    ]
  },
  {
    id: 38,
    slug: 'estimated-reading-time',
    title: 'Calculate Reading Time',
    excerpt: 'Display estimated reading time for posts to help readers gauge time commitment and improve content engagement metrics.',
    content: `
      <div class="snippet-content">
        <p>Adding estimated reading time to posts improves user experience by setting expectations about time commitment. Studies show that displaying reading time increases engagement by 10-15% as readers are more likely to start articles when they know the time investment required.</p>

        <h2>Why Add Reading Time?</h2>
        <ul>
          <li><strong>User Experience:</strong> Readers can decide if they have time to read now or bookmark for later</li>
          <li><strong>Increased Engagement:</strong> Transparency about content length builds trust</li>
          <li><strong>Lower Bounce Rate:</strong> Visitors know what to expect and are less likely to leave immediately</li>
          <li><strong>Content Planning:</strong> Helps you maintain consistent post lengths</li>
          <li><strong>Accessibility:</strong> Benefits readers with time constraints or attention differences</li>
          <li><strong>Mobile Users:</strong> Particularly valuable for on-the-go readers</li>
        </ul>

        <h2>Basic Reading Time Calculator</h2>
        <p>Calculate reading time based on average reading speed (200 words per minute):</p>

        <pre><code>/**
 * Calculate estimated reading time
 */
function calculate_reading_time($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $post = get_post($post_id);

    if (!$post) {
        return 0;
    }

    // Get post content and strip HTML tags
    $content = strip_tags($post->post_content);

    // Count words
    $word_count = str_word_count($content);

    // Calculate reading time (average 200 words per minute)
    $reading_time = ceil($word_count / 200);

    return $reading_time;
}

/**
 * Display reading time
 */
function display_reading_time() {
    $reading_time = calculate_reading_time();

    if ($reading_time < 1) {
        return '< 1 min read';
    }

    return $reading_time . ' min read';
}

// Usage in template:
// echo display_reading_time();</code></pre>

        <h2>Advanced: Automatic Display Before Content</h2>
        <p>Automatically insert reading time at the beginning of post content:</p>

        <pre><code>/**
 * Add reading time before post content
 */
function add_reading_time_to_content($content) {
    // Only on single posts
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;

    // Calculate reading time
    $word_count = str_word_count(strip_tags($post->post_content));
    $reading_time = ceil($word_count / 200);

    // Build reading time HTML
    $reading_time_html = '<div class="reading-time-container">';
    $reading_time_html .= '<span class="reading-time-icon">📖</span> ';
    $reading_time_html .= '<span class="reading-time-text">';

    if ($reading_time < 1) {
        $reading_time_html .= 'Less than 1 minute read';
    } elseif ($reading_time == 1) {
        $reading_time_html .= '1 minute read';
    } else {
        $reading_time_html .= $reading_time . ' minutes read';
    }

    $reading_time_html .= ' • ' . number_format($word_count) . ' words';
    $reading_time_html .= '</span>';
    $reading_time_html .= '</div>';

    // Prepend to content
    return $reading_time_html . $content;
}
add_filter('the_content', 'add_reading_time_to_content', 1);</code></pre>

        <h2>Reading Time with Progress Bar</h2>
        <p>Display reading time with a visual progress indicator as readers scroll:</p>

        <pre><code>/**
 * Add reading time with progress tracking
 */
function reading_time_with_progress($content) {
    if (!is_single() || !is_main_query()) {
        return $content;
    }

    global $post;

    $word_count = str_word_count(strip_tags($post->post_content));
    $reading_time = ceil($word_count / 200);

    // Reading time display
    $html = '<div class="reading-time-progress-wrapper">';
    $html .= '<div class="reading-meta">';
    $html .= '<span class="reading-time">' . $reading_time . ' min read</span>';
    $html .= '<span class="word-count">' . number_format($word_count) . ' words</span>';
    $html .= '</div>';
    $html .= '<div class="reading-progress-bar">';
    $html .= '<div class="reading-progress-fill" id="reading-progress"></div>';
    $html .= '</div>';
    $html .= '</div>';

    // JavaScript for scroll progress
    $html .= '<script>
    window.addEventListener("scroll", function() {
        const article = document.querySelector(".entry-content");
        if (!article) return;

        const articleTop = article.offsetTop;
        const articleHeight = article.offsetHeight;
        const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
        const windowHeight = window.innerHeight;

        const progress = ((scrollPosition - articleTop + windowHeight) / articleHeight) * 100;
        const progressBar = document.getElementById("reading-progress");

        if (progressBar) {
            progressBar.style.width = Math.min(Math.max(progress, 0), 100) + "%";
        }
    });
    </script>';

    return $html . $content;
}
add_filter('the_content', 'reading_time_with_progress', 1);</code></pre>

        <h2>Shortcode for Reading Time</h2>
        <p>Create a [reading_time] shortcode for flexible placement:</p>

        <pre><code>/**
 * Reading time shortcode
 */
function reading_time_shortcode($atts) {
    $atts = shortcode_atts(array(
        'post_id' => get_the_ID(),
        'icon'    => 'yes',
        'words'   => 'no',
        'format'  => 'long'  // long or short
    ), $atts);

    $post = get_post($atts['post_id']);

    if (!$post) {
        return '';
    }

    $content = strip_tags($post->post_content);
    $word_count = str_word_count($content);
    $reading_time = ceil($word_count / 200);

    $output = '';

    // Add icon
    if ($atts['icon'] === 'yes') {
        $output .= '<span class="reading-icon">⏱</span> ';
    }

    // Format reading time
    if ($atts['format'] === 'short') {
        $output .= $reading_time . ' min';
    } else {
        if ($reading_time < 1) {
            $output .= 'Less than a minute';
        } elseif ($reading_time == 1) {
            $output .= '1 minute read';
        } else {
            $output .= $reading_time . ' minute read';
        }
    }

    // Add word count
    if ($atts['words'] === 'yes') {
        $output .= ' (' . number_format($word_count) . ' words)';
    }

    return '<span class="reading-time-shortcode">' . $output . '</span>';
}
add_shortcode('reading_time', 'reading_time_shortcode');

/**
 * Usage:
 * [reading_time]
 * [reading_time icon="no" words="yes"]
 * [reading_time format="short"]
 */</code></pre>

        <h2>Reading Time in Post Meta</h2>
        <p>Store reading time as post meta for efficient retrieval:</p>

        <pre><code>/**
 * Calculate and save reading time on post save
 */
function save_reading_time_meta($post_id) {
    // Avoid autosave
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    // Check user permissions
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }

    // Only for posts
    if (get_post_type($post_id) !== 'post') {
        return;
    }

    $post = get_post($post_id);

    if (!$post) {
        return;
    }

    // Calculate reading time
    $content = strip_tags($post->post_content);
    $word_count = str_word_count($content);
    $reading_time = ceil($word_count / 200);

    // Save as post meta
    update_post_meta($post_id, '_reading_time_minutes', $reading_time);
    update_post_meta($post_id, '_word_count', $word_count);
}
add_action('save_post', 'save_reading_time_meta');

/**
 * Retrieve saved reading time
 */
function get_stored_reading_time($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $reading_time = get_post_meta($post_id, '_reading_time_minutes', true);

    if (!$reading_time) {
        // Calculate if not stored
        $reading_time = calculate_reading_time($post_id);
        update_post_meta($post_id, '_reading_time_minutes', $reading_time);
    }

    return (int)$reading_time;
}</code></pre>

        <h2>Reading Speed Customization</h2>
        <p>Let users adjust reading speed based on their preferences:</p>

        <pre><code>/**
 * Calculate reading time with custom reading speed
 */
function custom_speed_reading_time($post_id = null, $words_per_minute = 200) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $post = get_post($post_id);

    if (!$post) {
        return 0;
    }

    // Strip shortcodes and HTML
    $content = strip_shortcodes($post->post_content);
    $content = strip_tags($content);

    // Count words
    $word_count = str_word_count($content);

    // Calculate with custom speed
    $reading_time = ceil($word_count / $words_per_minute);

    return $reading_time;
}

/**
 * Display reading time for different reading speeds
 */
function display_multi_speed_reading_time() {
    $word_count = str_word_count(strip_tags(get_post_field('post_content')));

    $speeds = array(
        'slow'    => 150,  // Slow reader
        'average' => 200,  // Average reader
        'fast'    => 300   // Fast reader
    );

    $html = '<div class="reading-time-options">';
    $html .= '<p>Estimated reading time:</p>';
    $html .= '<ul class="reading-speeds">';

    foreach ($speeds as $speed_name => $wpm) {
        $time = ceil($word_count / $wpm);
        $html .= '<li><strong>' . ucfirst($speed_name) . ':</strong> ' . $time . ' min</li>';
    }

    $html .= '</ul>';
    $html .= '</div>';

    return $html;
}</code></pre>

        <h2>Multilingual Reading Time</h2>
        <p>Support different languages with translation-ready output:</p>

        <pre><code>/**
 * Multilingual reading time
 */
function multilingual_reading_time($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $post = get_post($post_id);

    if (!$post) {
        return '';
    }

    $content = strip_tags($post->post_content);
    $word_count = str_word_count($content);

    // Adjust WPM for different languages
    $locale = get_locale();
    $wpm = 200; // Default English

    switch ($locale) {
        case 'zh_CN': // Chinese
        case 'ja': // Japanese
            $wpm = 300; // Characters per minute
            break;
        case 'ar': // Arabic
            $wpm = 180;
            break;
        case 'es_ES': // Spanish
        case 'fr_FR': // French
            $wpm = 220;
            break;
    }

    $reading_time = ceil($word_count / $wpm);

    // Translatable strings
    if ($reading_time < 1) {
        return __('Less than a minute', 'textdomain');
    } elseif ($reading_time == 1) {
        return sprintf(__('%d minute read', 'textdomain'), 1);
    } else {
        return sprintf(__('%d minutes read', 'textdomain'), $reading_time);
    }
}</code></pre>

        <h2>Schema.org Markup for Reading Time</h2>
        <p>Add structured data for search engines:</p>

        <pre><code>/**
 * Add reading time schema markup
 */
function add_reading_time_schema() {
    if (!is_single()) {
        return;
    }

    global $post;

    $word_count = str_word_count(strip_tags($post->post_content));
    $reading_time = ceil($word_count / 200);

    // Convert to ISO 8601 duration format
    $duration = 'PT' . $reading_time . 'M';

    ?>
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "<?php echo esc_js(get_the_title()); ?>",
        "timeRequired": "<?php echo esc_js($duration); ?>",
        "wordCount": <?php echo $word_count; ?>
    }
    </script>
    <?php
}
add_action('wp_head', 'add_reading_time_schema');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use 200 WPM Default</td>
              <td>Average reading speed for adults; provides accurate estimates</td>
            </tr>
            <tr>
              <td>Round Up, Not Down</td>
              <td>Better to overestimate slightly than underestimate time commitment</td>
            </tr>
            <tr>
              <td>Strip HTML & Shortcodes</td>
              <td>Ensures accurate word count by removing non-content elements</td>
            </tr>
            <tr>
              <td>Cache in Post Meta</td>
              <td>Reduces computation on every page load; update on post save</td>
            </tr>
            <tr>
              <td>Display Prominently</td>
              <td>Place near title or before content so readers see it immediately</td>
            </tr>
            <tr>
              <td>Use Clear Language</td>
              <td>"5 min read" is clearer than "5 minute reading time"</td>
            </tr>
            <tr>
              <td>Consider Images/Videos</td>
              <td>For media-heavy posts, add extra time for viewing</td>
            </tr>
            <tr>
              <td>Translate for Multilingual</td>
              <td>Use translation functions for international audiences</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Minimal impact (0.001-0.002s) when calculated on-the-fly. For best performance, calculate and store reading time in post meta on save_post hook. This eliminates runtime calculation entirely. str_word_count() is very fast even on 5000+ word articles. For sites with multilingual content or complex calculations, caching in transients or post meta is recommended.</p>

        <h2>Styling Reading Time Display</h2>
        <p>CSS examples for attractive reading time presentation:</p>

        <pre><code>/* Basic reading time badge */
.reading-time-container {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: #f0f0f0;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    color: #666;
    margin-bottom: 20px;
}

.reading-time-icon {
    font-size: 18px;
}

/* Progress bar */
.reading-progress-bar {
    width: 100%;
    height: 4px;
    background: #e0e0e0;
    margin: 10px 0;
    border-radius: 2px;
    overflow: hidden;
}

.reading-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #0073aa, #00a0d2);
    width: 0%;
    transition: width 0.1s ease-out;
}

/* Reading meta info */
.reading-meta {
    display: flex;
    justify-content: space-between;
    font-size: 13px;
    color: #888;
    margin-bottom: 5px;
}

/* Minimal style */
.reading-time-shortcode {
    font-size: 13px;
    color: #999;
    font-weight: 500;
}

/* With icon */
.reading-time-shortcode .reading-icon {
    margin-right: 4px;
    opacity: 0.7;
}</code></pre>

        <h2>Enhancing Reading Time Calculations</h2>
        <p>Advanced considerations for more accurate estimates:</p>

        <ul>
          <li><strong>Code Blocks:</strong> Add 30 seconds per code snippet (readers study code longer)</li>
          <li><strong>Images:</strong> Add 12 seconds per image (based on eye-tracking studies)</li>
          <li><strong>Videos:</strong> Add actual video duration to reading time</li>
          <li><strong>Lists:</strong> Multiply bullet points by 1.2x (faster to scan)</li>
          <li><strong>Technical Content:</strong> Reduce WPM to 150 for highly technical posts</li>
          <li><strong>Tables:</strong> Add 15 seconds per table row</li>
        </ul>
      </div>
    `,
    code: `/**
 * Calculate estimated reading time
 */
function calculate_reading_time($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $post = get_post($post_id);

    if (!$post) {
        return 0;
    }

    $content = strip_tags($post->post_content);
    $word_count = str_word_count($content);
    $reading_time = ceil($word_count / 200);

    return $reading_time;
}

/**
 * Display reading time
 */
function display_reading_time() {
    $reading_time = calculate_reading_time();

    if ($reading_time < 1) {
        return '< 1 min read';
    }

    return $reading_time . ' min read';
}`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '7 min',
    category: 'WordPress Content',
    tags: ['Reading Time', 'Content', 'UX'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Calculate Reading Time in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to calculate and display estimated reading time for WordPress posts. Improve UX and engagement with comprehensive code examples and best practices.',
      keywords: ['WordPress reading time', 'estimated reading time', 'WordPress word count', 'reading time calculator', 'WordPress UX', 'post meta reading time', 'reading time shortcode', 'WordPress engagement'],
      canonical: 'https://shahmir.dev/blog/estimated-reading-time',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Calculate Reading Time in WordPress',
        description: 'Complete guide to calculating and displaying estimated reading time for posts to improve user experience.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "What's the average reading speed I should use?",
        answer: "Use 200 words per minute (WPM) as the standard for English content. This is the average reading speed for adults reading typical online content. For technical or academic content, consider 150 WPM. For simple content or listicles, 250 WPM works better. Different languages have different speeds: Chinese/Japanese ~300 characters/min, Arabic ~180 WPM, Spanish/French ~220 WPM."
      },
      {
        question: "Should I include images and videos in reading time calculation?",
        answer: "Yes, for more accurate estimates. Add approximately 12 seconds per image (based on eye-tracking studies showing people pause to view images). For videos, add the actual video duration. For code blocks, add 30 seconds each as readers study code more carefully. You can detect these with preg_match_all() to count <img>, <video>, and <code> tags in content."
      },
      {
        question: "How can I store reading time to avoid calculating it every time?",
        answer: "Use the save_post hook to calculate and store reading time in post meta when posts are saved. Use update_post_meta($post_id, '_reading_time', $reading_time); to save it, and get_post_meta($post_id, '_reading_time', true); to retrieve. This eliminates runtime calculation entirely. Remember to recalculate when posts are updated. This is much more efficient for high-traffic sites."
      },
      {
        question: "Why is my reading time showing 0 or incorrect values?",
        answer: "Common issues: 1) Content contains only HTML without text - strip_tags() returns empty string. 2) str_word_count() doesn't work well with non-Latin scripts - use mb_strlen() for character count instead. 3) Post content includes shortcodes - use strip_shortcodes() before counting. 4) Using wrong post ID - ensure get_the_ID() returns correct value in your context. Test with var_dump($word_count) to debug."
      },
      {
        question: "Can I add reading time to the REST API response?",
        answer: "Yes, use register_rest_field() to add reading time to post endpoints. Example: register_rest_field('post', 'reading_time', array('get_callback' => function($post) { return calculate_reading_time($post['id']); })); This makes reading time available at /wp-json/wp/v2/posts endpoint in 'reading_time' field. Useful for headless WordPress setups or custom frontends."
      }
    ]
  },
  {
    id: 39,
    slug: 'custom-archive-title',
    title: 'Customize Archive Page Titles',
    excerpt: 'Remove default prefixes like "Category:", "Tag:", and "Author:" from archive page titles for cleaner, more professional-looking archive pages.',
    content: `
      <div class="snippet-content">
        <p>By default, WordPress adds prefixes like "Category:", "Tag:", "Author:", and "Archives:" to archive page titles. While this is informative, it often looks redundant and cluttered. Customizing these titles provides a cleaner, more professional appearance and better SEO.</p>

        <h2>Why Customize Archive Titles?</h2>
        <ul>
          <li><strong>Cleaner Design:</strong> Remove unnecessary prefixes for a more polished look</li>
          <li><strong>Better SEO:</strong> Custom titles can include keywords without redundant words</li>
          <li><strong>Branding:</strong> Add custom text that matches your site's voice</li>
          <li><strong>User Experience:</strong> Clearer, more concise titles are easier to understand</li>
          <li><strong>Social Sharing:</strong> Better-looking titles when pages are shared on social media</li>
          <li><strong>Consistency:</strong> Match title formatting across all archive types</li>
        </ul>

        <h2>Remove All Archive Prefixes</h2>
        <p>Strip all default prefixes (Category:, Tag:, Author:, etc.) from archive titles:</p>

        <pre><code>/**
 * Remove archive title prefixes
 */
function remove_archive_title_prefix($title) {
    // Remove "Category:", "Tag:", "Author:", etc.
    if (is_category()) {
        $title = single_cat_title('', false);
    } elseif (is_tag()) {
        $title = single_tag_title('', false);
    } elseif (is_author()) {
        $title = get_the_author();
    } elseif (is_post_type_archive()) {
        $title = post_type_archive_title('', false);
    } elseif (is_tax()) {
        $title = single_term_title('', false);
    } elseif (is_year()) {
        $title = get_the_date('Y');
    } elseif (is_month()) {
        $title = get_the_date('F Y');
    } elseif (is_day()) {
        $title = get_the_date('F j, Y');
    }

    return $title;
}
add_filter('get_the_archive_title', 'remove_archive_title_prefix');</code></pre>

        <h2>Remove Prefix with Regex</h2>
        <p>Quick solution using regex to remove common archive prefixes:</p>

        <pre><code>/**
 * Remove archive prefixes using regex
 */
function remove_archive_prefix_regex($title) {
    // Remove "Category:", "Tag:", "Author:", "Archives:", etc.
    $title = preg_replace('/^\\w+:\\s/', '', $title);

    return $title;
}
add_filter('get_the_archive_title', 'remove_archive_prefix_regex');</code></pre>

        <h2>Custom Archive Titles by Type</h2>
        <p>Add custom formatting for different archive types:</p>

        <pre><code>/**
 * Customize archive titles by type
 */
function custom_archive_titles($title) {
    if (is_category()) {
        $title = 'Browse: ' . single_cat_title('', false);
    } elseif (is_tag()) {
        $title = 'Tagged with: ' . single_tag_title('', false);
    } elseif (is_author()) {
        $title = 'Posts by ' . get_the_author();
    } elseif (is_post_type_archive()) {
        $title = post_type_archive_title('', false) . ' Archive';
    } elseif (is_tax()) {
        $title = 'Topic: ' . single_term_title('', false);
    } elseif (is_year()) {
        $title = 'Year: ' . get_the_date('Y');
    } elseif (is_month()) {
        $title = get_the_date('F Y') . ' Archives';
    } elseif (is_day()) {
        $title = 'Daily Archives: ' . get_the_date('F j, Y');
    } elseif (is_search()) {
        $title = 'Search Results for: ' . get_search_query();
    }

    return $title;
}
add_filter('get_the_archive_title', 'custom_archive_titles');</code></pre>

        <h2>Add Icons to Archive Titles</h2>
        <p>Enhance archive titles with relevant icons:</p>

        <pre><code>/**
 * Add icons to archive titles
 */
function archive_titles_with_icons($title) {
    if (is_category()) {
        $title = '<span class="archive-icon">📁</span> ' . single_cat_title('', false);
    } elseif (is_tag()) {
        $title = '<span class="archive-icon">🏷️</span> ' . single_tag_title('', false);
    } elseif (is_author()) {
        $title = '<span class="archive-icon">👤</span> ' . get_the_author();
    } elseif (is_date()) {
        $title = '<span class="archive-icon">📅</span> ' . preg_replace('/^\\w+:\\s/', '', $title);
    } elseif (is_search()) {
        $title = '<span class="archive-icon">🔍</span> Search: ' . get_search_query();
    } else {
        // Remove default prefix for other archives
        $title = preg_replace('/^\\w+:\\s/', '', $title);
    }

    return $title;
}
add_filter('get_the_archive_title', 'archive_titles_with_icons');</code></pre>

        <h2>SEO-Optimized Archive Titles</h2>
        <p>Create SEO-friendly titles with keyword placement:</p>

        <pre><code>/**
 * SEO-optimized archive titles
 */
function seo_archive_titles($title) {
    $site_name = get_bloginfo('name');

    if (is_category()) {
        $cat_name = single_cat_title('', false);
        $title = $cat_name . ' Articles | ' . $site_name;
    } elseif (is_tag()) {
        $tag_name = single_tag_title('', false);
        $title = $tag_name . ' Posts | ' . $site_name;
    } elseif (is_author()) {
        $author = get_the_author();
        $title = 'Articles by ' . $author . ' | ' . $site_name;
    } elseif (is_year()) {
        $year = get_the_date('Y');
        $title = $year . ' Archives | ' . $site_name;
    } elseif (is_month()) {
        $month_year = get_the_date('F Y');
        $title = $month_year . ' Archives | ' . $site_name;
    } elseif (is_post_type_archive()) {
        $post_type = post_type_archive_title('', false);
        $title = $post_type . ' | ' . $site_name;
    }

    return $title;
}
add_filter('get_the_archive_title', 'seo_archive_titles');</code></pre>

        <h2>Archive Titles with Post Count</h2>
        <p>Show the number of posts in the archive:</p>

        <pre><code>/**
 * Add post count to archive titles
 */
function archive_titles_with_count($title) {
    global $wp_query;

    $post_count = $wp_query->found_posts;

    if (is_category()) {
        $cat = single_cat_title('', false);
        $title = $cat . ' <span class="post-count">(' . $post_count . ' posts)</span>';
    } elseif (is_tag()) {
        $tag = single_tag_title('', false);
        $title = $tag . ' <span class="post-count">(' . $post_count . ')</span>';
    } elseif (is_author()) {
        $author = get_the_author();
        $title = $author . ' <span class="post-count">(' . $post_count . ' articles)</span>';
    } elseif (is_year() || is_month() || is_day()) {
        // Remove default prefix
        $title = preg_replace('/^\\w+:\\s/', '', $title);
        $title .= ' <span class="post-count">(' . $post_count . ')</span>';
    } else {
        // Remove prefix for other types
        $title = preg_replace('/^\\w+:\\s/', '', $title);
    }

    return $title;
}
add_filter('get_the_archive_title', 'archive_titles_with_count');</code></pre>

        <h2>Multilingual Archive Titles</h2>
        <p>Translation-ready archive titles for multilingual sites:</p>

        <pre><code>/**
 * Multilingual archive titles
 */
function multilingual_archive_titles($title) {
    if (is_category()) {
        $cat = single_cat_title('', false);
        $title = sprintf(__('Category: %s', 'textdomain'), $cat);
    } elseif (is_tag()) {
        $tag = single_tag_title('', false);
        $title = sprintf(__('Tag: %s', 'textdomain'), $tag);
    } elseif (is_author()) {
        $author = get_the_author();
        $title = sprintf(__('Author: %s', 'textdomain'), $author);
    } elseif (is_year()) {
        $year = get_the_date('Y');
        $title = sprintf(__('Year: %s', 'textdomain'), $year);
    } elseif (is_month()) {
        $month = get_the_date('F Y');
        $title = sprintf(__('Month: %s', 'textdomain'), $month);
    } elseif (is_day()) {
        $date = get_the_date('F j, Y');
        $title = sprintf(__('Daily Archives: %s', 'textdomain'), $date);
    } elseif (is_post_type_archive()) {
        $post_type = post_type_archive_title('', false);
        $title = $post_type;
    }

    return $title;
}
add_filter('get_the_archive_title', 'multilingual_archive_titles');</code></pre>

        <h2>Conditional Archive Title Formatting</h2>
        <p>Different styles for specific categories or taxonomies:</p>

        <pre><code>/**
 * Conditional archive title formatting
 */
function conditional_archive_formatting($title) {
    if (is_category()) {
        $cat_id = get_queried_object_id();
        $cat_name = single_cat_title('', false);

        // Special formatting for specific categories
        if (in_array($cat_id, array(5, 12, 23))) {
            // Featured categories get different format
            $title = '⭐ ' . $cat_name . ' (Featured)';
        } else {
            $title = $cat_name;
        }
    } elseif (is_tax('portfolio_category')) {
        // Custom taxonomy - different format
        $term = single_term_title('', false);
        $title = 'Portfolio: ' . $term;
    } elseif (is_author()) {
        $author_id = get_queried_object_id();
        $author_name = get_the_author_meta('display_name', $author_id);
        $author_role = get_the_author_meta('role', $author_id);

        // Show author role if available
        if ($author_role && $author_role !== 'subscriber') {
            $title = $author_name . ' <span class="author-role">(' . ucfirst($author_role) . ')</span>';
        } else {
            $title = $author_name;
        }
    } else {
        // Remove default prefix
        $title = preg_replace('/^\\w+:\\s/', '', $title);
    }

    return $title;
}
add_filter('get_the_archive_title', 'conditional_archive_formatting');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Keep It Concise</td>
              <td>Short, clear titles are better for UX and mobile displays</td>
            </tr>
            <tr>
              <td>Be Consistent</td>
              <td>Use similar formatting across all archive types</td>
            </tr>
            <tr>
              <td>Include Keywords</td>
              <td>SEO benefit from descriptive titles with relevant terms</td>
            </tr>
            <tr>
              <td>Avoid Redundancy</td>
              <td>If heading says "Category", don't repeat it in title</td>
            </tr>
            <tr>
              <td>Use Translation Functions</td>
              <td>Make titles translatable for multilingual sites</td>
            </tr>
            <tr>
              <td>Test All Archive Types</td>
              <td>Verify titles work for categories, tags, authors, dates, custom taxonomies</td>
            </tr>
            <tr>
              <td>Consider Breadcrumbs</td>
              <td>Ensure custom titles work well with breadcrumb navigation</td>
            </tr>
            <tr>
              <td>Escape Output</td>
              <td>Use esc_html() when adding HTML to prevent XSS</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Zero to negligible impact (< 0.001s). The get_the_archive_title filter executes once per archive page load. Simple string operations and WordPress helper functions are extremely fast. Even complex conditional logic with multiple checks adds virtually no measurable overhead. This is one of the safest and most efficient customizations you can make.</p>

        <h2>Archive Title Styling</h2>
        <p>CSS to enhance your custom archive titles:</p>

        <pre><code>/* Archive page title */
.archive-title {
    font-size: 2.5em;
    font-weight: 700;
    color: #333;
    margin-bottom: 20px;
}

/* Archive icon */
.archive-icon {
    font-size: 1.1em;
    margin-right: 8px;
    vertical-align: middle;
}

/* Post count badge */
.post-count {
    font-size: 0.6em;
    font-weight: 400;
    color: #666;
    opacity: 0.8;
}

/* Author role */
.author-role {
    font-size: 0.7em;
    font-weight: 400;
    color: #0073aa;
    font-style: italic;
}</code></pre>

        <h2>Customizing Archive Description</h2>
        <p>Also customize the archive description that appears below the title:</p>

        <pre><code>/**
 * Customize archive description
 */
function custom_archive_description($description) {
    if (is_category()) {
        $cat_id = get_queried_object_id();
        $cat_desc = category_description($cat_id);

        if ($cat_desc) {
            $description = $cat_desc;
        } else {
            $post_count = get_queried_object()->count;
            $description = 'Browse ' . $post_count . ' articles in this category.';
        }
    } elseif (is_author()) {
        $author_bio = get_the_author_meta('description');

        if ($author_bio) {
            $description = $author_bio;
        } else {
            $description = 'All articles by ' . get_the_author() . '.';
        }
    } elseif (is_tag()) {
        $tag = single_tag_title('', false);
        $description = 'Articles tagged with "' . $tag . '".';
    }

    return $description;
}
add_filter('get_the_archive_description', 'custom_archive_description');</code></pre>
      </div>
    `,
    code: `/**
 * Remove archive title prefixes
 */
function remove_archive_title_prefix($title) {
    if (is_category()) {
        $title = single_cat_title('', false);
    } elseif (is_tag()) {
        $title = single_tag_title('', false);
    } elseif (is_author()) {
        $title = get_the_author();
    } elseif (is_post_type_archive()) {
        $title = post_type_archive_title('', false);
    } elseif (is_tax()) {
        $title = single_term_title('', false);
    }

    return $title;
}
add_filter('get_the_archive_title', 'remove_archive_title_prefix');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '6 min',
    category: 'WordPress Content',
    tags: ['Archives', 'Titles', 'Templates'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.1+',
    seo: {
      metaTitle: 'Customize Archive Page Titles in WordPress - Remove Prefixes Guide 2025',
      metaDescription: 'Learn how to remove default prefixes like "Category:" and "Tag:" from WordPress archive titles. Clean, professional archive pages with custom formatting.',
      keywords: ['WordPress archive title', 'remove category prefix', 'customize archive titles', 'WordPress get_the_archive_title', 'archive page customization', 'WordPress taxonomy titles', 'remove tag prefix'],
      canonical: 'https://shahmir.dev/blog/custom-archive-title',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Customize Archive Page Titles in WordPress',
        description: 'Complete guide to customizing archive page titles and removing default prefixes in WordPress.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 4.1+'
      }
    },
    faqs: [
      {
        question: "Why does WordPress add 'Category:' and other prefixes to archive titles?",
        answer: "WordPress adds these prefixes (Category:, Tag:, Author:, Archives:) to clearly identify the archive type for users. This is especially helpful when using the default theme or generic templates. The get_the_archive_title() function automatically adds these prefixes based on the archive type. While informative, many developers remove them for cleaner designs and better SEO, since the context is usually clear from the page layout."
      },
      {
        question: "Will removing prefixes affect my SEO?",
        answer: "No, removing prefixes generally improves SEO. Cleaner titles without redundant words like 'Category:' tend to perform better in search results. Search engines understand the context from URL structure, breadcrumbs, and page content. Shorter, more focused titles often have higher click-through rates. Just ensure your custom titles still clearly describe the page content and include relevant keywords."
      },
      {
        question: "How do I remove prefixes for custom post type archives?",
        answer: "Use is_post_type_archive() in your filter: if (is_post_type_archive()) { $title = post_type_archive_title('', false); }. The second parameter 'false' tells WordPress not to echo the title. For custom taxonomies, use is_tax() with single_term_title('', false). You can also check specific post types: if (is_post_type_archive('portfolio')) { $title = 'Our Work'; }."
      },
      {
        question: "Can I use different titles for specific categories?",
        answer: "Yes, use get_queried_object_id() to get the current category ID, then add conditional logic: $cat_id = get_queried_object_id(); if ($cat_id == 5) { $title = 'Special Category Title'; } else { $title = single_cat_title('', false); }. This works for tags, authors, and custom taxonomies too. You can also check by slug using get_queried_object()->slug."
      },
      {
        question: "Why is my archive title filter not working?",
        answer: "Common issues: 1) Theme doesn't use the_archive_title() - check template files and add it if missing. 2) Another plugin or theme overrides your filter with higher priority - increase your filter priority: add_filter('get_the_archive_title', 'your_function', 20). 3) Archive title is hardcoded in template - modify template directly. 4) Caching - clear all caches after making changes. Check archive.php, category.php, or taxonomy.php in your theme."
      }
    ]
  },
  {
    id: 40,
    slug: 'add-view-counter',
    title: 'Add Post View Counter',
    excerpt: 'Track and display post views without plugins using post meta. Monitor popular content and show view counts to visitors.',
    content: `
      <div class="snippet-content">
        <p>Tracking post views helps you understand which content resonates with your audience. This data is valuable for content strategy, identifying popular topics, and displaying social proof. This solution uses WordPress post meta to store view counts efficiently without external services or plugins.</p>

        <h2>Why Track Post Views?</h2>
        <ul>
          <li><strong>Content Strategy:</strong> Identify popular topics to create more relevant content</li>
          <li><strong>Social Proof:</strong> Display view counts to encourage engagement</li>
          <li><strong>Popular Posts Widget:</strong> Show most-viewed content automatically</li>
          <li><strong>Analytics:</strong> Track trends without relying on Google Analytics</li>
          <li><strong>Performance Insights:</strong> Compare post performance over time</li>
          <li><strong>Lightweight:</strong> No external API calls or plugin overhead</li>
        </ul>

        <h2>Basic View Counter</h2>
        <p>Track views and store count in post meta:</p>

        <pre><code>/**
 * Track post views
 */
function track_post_views($post_id) {
    if (!is_single()) {
        return;
    }

    if (empty($post_id)) {
        global $post;
        $post_id = $post->ID;
    }

    // Get current view count
    $count = get_post_meta($post_id, 'post_views_count', true);

    if ($count == '') {
        $count = 0;
        delete_post_meta($post_id, 'post_views_count');
        add_post_meta($post_id, 'post_views_count', '0');
    } else {
        $count++;
        update_post_meta($post_id, 'post_views_count', $count);
    }
}
add_action('wp_head', 'track_post_views');

/**
 * Display post views
 */
function get_post_views($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $count = get_post_meta($post_id, 'post_views_count', true);

    if ($count == '') {
        return '0 views';
    }

    return number_format($count) . ' views';
}</code></pre>

        <h2>Advanced: Exclude Logged-in Users & Bots</h2>
        <p>Track only real visitor views, excluding admins and bots:</p>

        <pre><code>/**
 * Advanced post view tracking
 */
function advanced_track_post_views($post_id) {
    if (!is_single()) {
        return;
    }

    if (empty($post_id)) {
        global $post;
        $post_id = $post->ID;
    }

    // Exclude logged-in users
    if (is_user_logged_in()) {
        return;
    }

    // Exclude bots
    $user_agent = $_SERVER['HTTP_USER_AGENT'];
    $bot_patterns = array('bot', 'crawl', 'slurp', 'spider', 'mediapartners');

    foreach ($bot_patterns as $pattern) {
        if (stripos($user_agent, $pattern) !== false) {
            return;
        }
    }

    // Track unique views with cookie
    $cookie_name = 'post_view_' . $post_id;

    if (!isset($_COOKIE[$cookie_name])) {
        // Set cookie for 24 hours
        setcookie($cookie_name, '1', time() + 86400, COOKIEPATH, COOKIE_DOMAIN);

        // Increment view count
        $count = (int)get_post_meta($post_id, 'post_views_count', true);
        $count++;
        update_post_meta($post_id, 'post_views_count', $count);
    }
}
add_action('wp_head', 'advanced_track_post_views');</code></pre>

        <h2>Display Views with Icon</h2>
        <p>Show formatted view count with visual icon:</p>

        <pre><code>/**
 * Display views with icon
 */
function display_post_views_with_icon($post_id = null) {
    if (!$post_id) {
        $post_id = get_the_ID();
    }

    $count = (int)get_post_meta($post_id, 'post_views_count', true);

    $output = '<span class="post-views">';
    $output .= '<span class="views-icon">👁</span> ';

    if ($count >= 1000000) {
        $output .= number_format($count / 1000000, 1) . 'M';
    } elseif ($count >= 1000) {
        $output .= number_format($count / 1000, 1) . 'K';
    } else {
        $output .= $count;
    }

    $output .= ' views</span>';

    return $output;
}

// Usage:
// echo display_post_views_with_icon();</code></pre>

        <h2>Most Viewed Posts Query</h2>
        <p>Retrieve and display most popular posts:</p>

        <pre><code>/**
 * Get most viewed posts
 */
function get_most_viewed_posts($count = 5) {
    $args = array(
        'post_type'      => 'post',
        'posts_per_page' => $count,
        'meta_key'       => 'post_views_count',
        'orderby'        => 'meta_value_num',
        'order'          => 'DESC'
    );

    return new WP_Query($args);
}

/**
 * Display most viewed posts widget
 */
function display_popular_posts() {
    $popular_posts = get_most_viewed_posts(5);

    if ($popular_posts->have_posts()) {
        echo '<div class="popular-posts-widget">';
        echo '<h3>Most Popular</h3>';
        echo '<ul>';

        while ($popular_posts->have_posts()) {
            $popular_posts->the_post();
            $views = get_post_meta(get_the_ID(), 'post_views_count', true);

            echo '<li>';
            echo '<a href="' . get_permalink() . '">' . get_the_title() . '</a>';
            echo '<span class="view-count">' . number_format($views) . ' views</span>';
            echo '</li>';
        }

        echo '</ul>';
        echo '</div>';

        wp_reset_postdata();
    }
}</code></pre>

        <h2>REST API Integration</h2>
        <p>Add view count to REST API responses:</p>

        <pre><code>/**
 * Add view count to REST API
 */
function add_views_to_rest_api() {
    register_rest_field('post', 'views', array(
        'get_callback' => function($post) {
            $views = get_post_meta($post['id'], 'post_views_count', true);
            return $views ? (int)$views : 0;
        },
        'schema' => array(
            'description' => 'Post view count',
            'type'        => 'integer'
        )
    ));
}
add_action('rest_api_init', 'add_views_to_rest_api');</code></pre>

        <h2>Admin Column for Views</h2>
        <p>Show view counts in WordPress admin post list:</p>

        <pre><code>/**
 * Add views column to admin
 */
function add_views_column($columns) {
    $columns['post_views'] = 'Views';
    return $columns;
}
add_filter('manage_posts_columns', 'add_views_column');

/**
 * Display view count in admin column
 */
function display_views_column($column, $post_id) {
    if ($column === 'post_views') {
        $views = get_post_meta($post_id, 'post_views_count', true);
        echo $views ? number_format($views) : '0';
    }
}
add_action('manage_posts_custom_column', 'display_views_column', 10, 2);

/**
 * Make views column sortable
 */
function make_views_column_sortable($columns) {
    $columns['post_views'] = 'post_views';
    return $columns;
}
add_filter('manage_edit-post_sortable_columns', 'make_views_column_sortable');

/**
 * Sort by views
 */
function sort_by_views($query) {
    if (!is_admin()) {
        return;
    }

    $orderby = $query->get('orderby');

    if ('post_views' === $orderby) {
        $query->set('meta_key', 'post_views_count');
        $query->set('orderby', 'meta_value_num');
    }
}
add_action('pre_get_posts', 'sort_by_views');</code></pre>

        <h2>Reset View Counts</h2>
        <p>Admin function to reset all view counts:</p>

        <pre><code>/**
 * Reset all post view counts
 */
function reset_all_post_views() {
    global $wpdb;

    // Delete all view count meta
    $wpdb->query("DELETE FROM $wpdb->postmeta WHERE meta_key = 'post_views_count'");

    return true;
}

/**
 * Reset views for specific post
 */
function reset_post_views($post_id) {
    delete_post_meta($post_id, 'post_views_count');
    add_post_meta($post_id, 'post_views_count', '0');
}</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use Cookies for Unique Views</td>
              <td>Prevents multiple counts from same visitor refreshing page</td>
            </tr>
            <tr>
              <td>Exclude Logged-in Users</td>
              <td>Authors checking their posts shouldn't inflate view counts</td>
            </tr>
            <tr>
              <td>Filter Bot Traffic</td>
              <td>Search engine crawlers and bots skew analytics</td>
            </tr>
            <tr>
              <td>Use Efficient Queries</td>
              <td>Index meta_key for fast sorting by view count</td>
            </tr>
            <tr>
              <td>Consider Caching</td>
              <td>High-traffic sites should cache popular posts queries</td>
            </tr>
            <tr>
              <td>Track in wp_head</td>
              <td>Ensures views are counted before any caching</td>
            </tr>
            <tr>
              <td>Validate Post ID</td>
              <td>Always check post exists before updating meta</td>
            </tr>
            <tr>
              <td>Use Transients</td>
              <td>Cache expensive "most viewed" queries for performance</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Low impact (0.002-0.005s per page view). Single post meta update per view is lightweight. For high-traffic sites (10k+ daily views), consider: 1) Batch updates using cron, 2) Store counts in separate table, 3) Use Redis/Memcached for counting, 4) Implement AJAX-based counting to avoid blocking page load. Most sites under 100k monthly views won't notice any performance impact.</p>

        <h2>Styling View Counts</h2>
        <pre><code>/* View count styling */
.post-views {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    font-size: 14px;
    color: #666;
}

.views-icon {
    font-size: 16px;
    opacity: 0.7;
}

/* Popular posts widget */
.popular-posts-widget {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
}

.popular-posts-widget li {
    display: flex;
    justify-content: space-between;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
}

.view-count {
    color: #999;
    font-size: 12px;
}</code></pre>
      </div>
    `,
    code: `/**
 * Track post views
 */
function track_post_views($post_id) {
    if (!is_single()) return;

    if (empty($post_id)) {
        global $post;
        $post_id = $post->ID;
    }

    $count = get_post_meta($post_id, 'post_views_count', true);

    if ($count == '') {
        $count = 0;
        add_post_meta($post_id, 'post_views_count', '0');
    } else {
        $count++;
        update_post_meta($post_id, 'post_views_count', $count);
    }
}
add_action('wp_head', 'track_post_views');

function get_post_views($post_id = null) {
    if (!$post_id) $post_id = get_the_ID();
    $count = get_post_meta($post_id, 'post_views_count', true);
    return $count ? number_format($count) . ' views' : '0 views';
}`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '6 min',
    category: 'WordPress Content',
    tags: ['Analytics', 'Post Views', 'Statistics'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Add Post View Counter in WordPress Without Plugins - 2025 Guide',
      metaDescription: 'Learn how to track and display post views in WordPress using post meta. Complete guide with code for analytics, popular posts, and admin integration.',
      keywords: ['WordPress post views', 'track post views', 'WordPress analytics', 'post view counter', 'popular posts WordPress', 'WordPress post meta', 'view count tracking'],
      canonical: 'https://shahmir.dev/blog/add-view-counter',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Post View Counter in WordPress',
        description: 'Complete guide to tracking and displaying post views in WordPress without plugins.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "How accurate are post view counts using this method?",
        answer: "Basic implementation counts every page load, including bots and repeat views. For better accuracy, use cookies to track unique visitors (accurate within 24 hours), exclude logged-in users, and filter bot user agents. This gives 85-90% accuracy compared to Google Analytics. For exact analytics, integrate with Google Analytics API, but post meta is sufficient for displaying popular content and general trends."
      },
      {
        question: "Will tracking views slow down my site?",
        answer: "Minimal impact for most sites. Each view adds one post meta update (~0.002s). Problems arise at very high traffic (100k+ daily views). Solutions: 1) Use object caching (Redis/Memcached), 2) Batch updates with cron instead of real-time, 3) Use AJAX to update counts after page load, 4) Store in custom table instead of postmeta. For 99% of WordPress sites, the basic method works fine without performance issues."
      },
      {
        question: "How do I display most viewed posts from the last 30 days only?",
        answer: "Post meta only stores total count, not timestamps. For time-based popular posts, store daily counts in separate meta keys (format: views_2025_01_15) or use a custom table with timestamp column. Alternative: Query posts by date range, then sort by views: 'date_query' => array('after' => '30 days ago'), 'meta_key' => 'post_views_count', 'orderby' => 'meta_value_num'. This shows popular posts from recent content only."
      },
      {
        question: "Can I track views for custom post types?",
        answer: "Yes, the code works for any post type. No modifications needed - it tracks whatever post type is displayed in is_single(). For post type specific tracking, add condition: if (get_post_type() !== 'your_cpt') return; before incrementing. You can also use separate meta keys per post type for independent counting: $meta_key = 'views_' . get_post_type($post_id);. Very useful for portfolios, products, or documentation sites."
      },
      {
        question: "How do I prevent view count from increasing when I preview posts?",
        answer: "Add checks for preview and admin: if (is_preview() || is_admin()) return; at the start of your tracking function. Also exclude post revisions: if (wp_is_post_revision($post_id)) return;. For development, check environment: if (defined('WP_DEBUG') && WP_DEBUG) return;. This ensures only real public views are counted, not drafts, previews, or admin panel views."
      }
    ]
  },
  {
    id: 41,
    slug: 'create-custom-user-role',
    title: 'Create Custom User Roles',
    excerpt: 'Create custom WordPress user roles with specific capabilities to control exactly what different users can do on your site.',
    content: `
      <div class="snippet-content">
        <p>WordPress comes with five default user roles (Administrator, Editor, Author, Contributor, Subscriber), but you often need custom roles with specific capabilities. Custom roles let you create clients, moderators, shop managers, or any role that fits your site's needs with precise permission control.</p>

        <h2>Why Create Custom User Roles?</h2>
        <ul>
          <li><strong>Precise Control:</strong> Grant exactly the permissions needed, nothing more</li>
          <li><strong>Client Access:</strong> Give clients limited admin access to their content only</li>
          <li><strong>Team Management:</strong> Different roles for different team responsibilities</li>
          <li><strong>Security:</strong> Limit damage potential by restricting capabilities</li>
          <li><strong>WooCommerce:</strong> Create shop managers, product editors, order handlers</li>
          <li><strong>Membership Sites:</strong> Different access levels for premium members</li>
        </ul>

        <h2>Basic Custom Role Creation</h2>
        <p>Create a simple custom role with specific capabilities:</p>

        <pre><code>/**
 * Create custom user role on theme activation
 */
function create_custom_user_role() {
    add_role(
        'content_manager',
        'Content Manager',
        array(
            'read'                   => true,
            'edit_posts'             => true,
            'edit_published_posts'   => true,
            'publish_posts'          => true,
            'delete_posts'           => true,
            'delete_published_posts' => true,
            'upload_files'           => true,
            'edit_pages'             => true,
            'edit_published_pages'   => true,
        )
    );
}
add_action('after_switch_theme', 'create_custom_user_role');</code></pre>

        <h2>Advanced Role with Full Capabilities</h2>
        <p>Create roles with comprehensive permission sets:</p>

        <pre><code>/**
 * Create advanced custom roles
 */
function create_advanced_custom_roles() {
    // Client role - can only edit their own posts
    add_role('client', 'Client', array(
        'read'                   => true,
        'edit_posts'             => true,
        'delete_posts'           => true,
        'upload_files'           => true,
        'edit_published_posts'   => true,
        'delete_published_posts' => true,
    ));

    // Moderator role - can manage comments and users
    add_role('moderator', 'Moderator', array(
        'read'                   => true,
        'moderate_comments'      => true,
        'edit_comment'           => true,
        'edit_posts'             => true,
        'edit_others_posts'      => true,
        'edit_published_posts'   => true,
        'list_users'             => true,
        'edit_users'             => true,
    ));

    // SEO Manager - can manage SEO and analytics
    add_role('seo_manager', 'SEO Manager', array(
        'read'                   => true,
        'edit_posts'             => true,
        'edit_pages'             => true,
        'edit_others_posts'      => true,
        'edit_others_pages'      => true,
        'publish_posts'          => true,
        'publish_pages'          => true,
        'manage_categories'      => true,
        'manage_links'           => true,
    ));
}
add_action('init', 'create_advanced_custom_roles');</code></pre>

        <h2>Clone Existing Role</h2>
        <p>Base new role on existing role's capabilities:</p>

        <pre><code>/**
 * Clone an existing role
 */
function clone_user_role($source_role, $new_role_slug, $new_role_name) {
    $source = get_role($source_role);

    if (!$source) {
        return false;
    }

    // Create new role with same capabilities
    add_role($new_role_slug, $new_role_name, $source->capabilities);

    return true;
}

// Usage: Clone Editor role to create Senior Editor
add_action('init', function() {
    clone_user_role('editor', 'senior_editor', 'Senior Editor');
});</code></pre>

        <h2>Add Capabilities to Existing Role</h2>
        <p>Modify existing roles by adding or removing capabilities:</p>

        <pre><code>/**
 * Add capabilities to existing role
 */
function modify_author_role() {
    $role = get_role('author');

    if ($role) {
        // Add new capabilities
        $role->add_cap('edit_others_posts');
        $role->add_cap('edit_pages');
        $role->add_cap('edit_published_pages');
        $role->add_cap('publish_pages');
        $role->add_cap('delete_pages');
    }
}
add_action('admin_init', 'modify_author_role');

/**
 * Remove capabilities from role
 */
function restrict_contributor_role() {
    $role = get_role('contributor');

    if ($role) {
        // Remove upload capability
        $role->remove_cap('upload_files');
    }
}
add_action('admin_init', 'restrict_contributor_role');</code></pre>

        <h2>Custom Post Type Specific Roles</h2>
        <p>Create roles for managing specific custom post types:</p>

        <pre><code>/**
 * Create role for custom post type management
 */
function create_portfolio_manager_role() {
    add_role('portfolio_manager', 'Portfolio Manager', array(
        'read'                      => true,

        // Portfolio post type capabilities
        'edit_portfolios'           => true,
        'edit_others_portfolios'    => true,
        'publish_portfolios'        => true,
        'read_private_portfolios'   => true,
        'delete_portfolios'         => true,
        'delete_private_portfolios' => true,
        'delete_published_portfolios' => true,
        'delete_others_portfolios'  => true,
        'edit_private_portfolios'   => true,
        'edit_published_portfolios' => true,

        // Media
        'upload_files'              => true,
    ));
}
add_action('init', 'create_portfolio_manager_role');

/**
 * Register custom post type with capability type
 */
function register_portfolio_cpt() {
    register_post_type('portfolio', array(
        'public'        => true,
        'label'         => 'Portfolio',
        'capability_type' => 'portfolio',
        'capabilities'  => array(
            'edit_post'          => 'edit_portfolio',
            'edit_posts'         => 'edit_portfolios',
            'edit_others_posts'  => 'edit_others_portfolios',
            'publish_posts'      => 'publish_portfolios',
            'read_post'          => 'read_portfolio',
            'read_private_posts' => 'read_private_portfolios',
            'delete_post'        => 'delete_portfolio',
        ),
        'map_meta_cap'  => true,
    ));
}
add_action('init', 'register_portfolio_cpt');</code></pre>

        <h2>Temporary Role Elevation</h2>
        <p>Temporarily grant capabilities to users:</p>

        <pre><code>/**
 * Grant temporary admin access
 */
function grant_temporary_capability($user_id, $capability, $duration_hours = 24) {
    $user = get_user_by('id', $user_id);

    if (!$user) {
        return false;
    }

    // Add capability
    $user->add_cap($capability);

    // Store expiration time
    $expiration = time() + ($duration_hours * 3600);
    update_user_meta($user_id, 'temp_cap_' . $capability . '_expires', $expiration);

    return true;
}

/**
 * Check and remove expired temporary capabilities
 */
function check_temporary_capabilities() {
    $users = get_users();

    foreach ($users as $user) {
        $user_meta = get_user_meta($user->ID);

        foreach ($user_meta as $meta_key => $meta_value) {
            if (strpos($meta_key, 'temp_cap_') === 0 && strpos($meta_key, '_expires') !== false) {
                $expiration = $meta_value[0];
                $capability = str_replace(array('temp_cap_', '_expires'), '', $meta_key);

                if (time() > $expiration) {
                    $user->remove_cap($capability);
                    delete_user_meta($user->ID, $meta_key);
                }
            }
        }
    }
}
add_action('init', 'check_temporary_capabilities');</code></pre>

        <h2>Role-Based Content Restriction</h2>
        <p>Show/hide content based on user role:</p>

        <pre><code>/**
 * Check if user has specific role
 */
function user_has_role($role, $user_id = null) {
    if (!$user_id) {
        $user_id = get_current_user_id();
    }

    $user = get_user_by('id', $user_id);

    if (!$user) {
        return false;
    }

    return in_array($role, $user->roles);
}

/**
 * Shortcode to restrict content by role
 */
function role_restricted_content($atts, $content = null) {
    $atts = shortcode_atts(array(
        'roles' => '', // comma-separated roles
    ), $atts);

    if (empty($atts['roles']) || !is_user_logged_in()) {
        return '';
    }

    $allowed_roles = array_map('trim', explode(',', $atts['roles']));
    $user = wp_get_current_user();

    foreach ($allowed_roles as $role) {
        if (in_array($role, $user->roles)) {
            return do_shortcode($content);
        }
    }

    return '<p class="restricted-content">This content is restricted to specific user roles.</p>';
}
add_shortcode('role_content', 'role_restricted_content');

// Usage: [role_content roles="editor,administrator"]Premium content here[/role_content]</code></pre>

        <h2>Remove Custom Roles on Deactivation</h2>
        <p>Clean up custom roles when theme/plugin is deactivated:</p>

        <pre><code>/**
 * Remove custom roles on theme switch
 */
function remove_custom_roles() {
    remove_role('content_manager');
    remove_role('client');
    remove_role('moderator');
    remove_role('seo_manager');
    remove_role('portfolio_manager');
}
register_deactivation_hook(__FILE__, 'remove_custom_roles');

// For themes, use:
add_action('switch_theme', 'remove_custom_roles');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Use Descriptive Role Names</td>
              <td>Clear names help identify purpose (e.g., 'shop_manager' not 'sm1')</td>
            </tr>
            <tr>
              <td>Grant Minimum Permissions</td>
              <td>Follow principle of least privilege for security</td>
            </tr>
            <tr>
              <td>Test Thoroughly</td>
              <td>Test each role's access to ensure proper restrictions</td>
            </tr>
            <tr>
              <td>Document Capabilities</td>
              <td>Keep list of granted capabilities for each role</td>
            </tr>
            <tr>
              <td>Clean Up on Deactivation</td>
              <td>Remove custom roles when plugin/theme is deactivated</td>
            </tr>
            <tr>
              <td>Use Proper Hooks</td>
              <td>Create roles on 'init' or 'after_switch_theme', not every page load</td>
            </tr>
            <tr>
              <td>Map Meta Caps</td>
              <td>Use 'map_meta_cap' => true for custom post types</td>
            </tr>
            <tr>
              <td>Avoid Role Duplication</td>
              <td>Check if role exists before creating with get_role()</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Zero impact during normal operation. Role creation/modification happens once during init or theme activation. Capability checks (user_can(), current_user_can()) are cached by WordPress and extremely fast (<0.001s). Even sites with dozens of custom roles see no performance degradation. Only avoid creating roles on every page load - use proper hooks.</p>

        <h2>Common WordPress Capabilities Reference</h2>
        <p>Key capabilities you can grant to custom roles:</p>

        <ul>
          <li><strong>Posts:</strong> edit_posts, edit_others_posts, publish_posts, delete_posts, edit_published_posts</li>
          <li><strong>Pages:</strong> edit_pages, edit_others_pages, publish_pages, delete_pages</li>
          <li><strong>Media:</strong> upload_files</li>
          <li><strong>Comments:</strong> moderate_comments, edit_comment</li>
          <li><strong>Appearance:</strong> edit_theme_options, switch_themes, edit_themes</li>
          <li><strong>Plugins:</strong> activate_plugins, edit_plugins, install_plugins</li>
          <li><strong>Users:</strong> list_users, create_users, edit_users, delete_users</li>
          <li><strong>Settings:</strong> manage_options</li>
          <li><strong>Categories:</strong> manage_categories</li>
          <li><strong>Import/Export:</strong> import, export</li>
        </ul>
      </div>
    `,
    code: `/**
 * Create custom user role
 */
function create_custom_user_role() {
    add_role(
        'content_manager',
        'Content Manager',
        array(
            'read'                   => true,
            'edit_posts'             => true,
            'edit_published_posts'   => true,
            'publish_posts'          => true,
            'delete_posts'           => true,
            'upload_files'           => true,
            'edit_pages'             => true,
            'edit_published_pages'   => true,
        )
    );
}
add_action('after_switch_theme', 'create_custom_user_role');

// Remove role on theme deactivation
function remove_custom_role() {
    remove_role('content_manager');
}
add_action('switch_theme', 'remove_custom_role');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '8 min',
    category: 'WordPress Users',
    tags: ['User Roles', 'Capabilities', 'Users'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Create Custom User Roles in WordPress - Complete Capabilities Guide 2025',
      metaDescription: 'Learn how to create custom WordPress user roles with specific capabilities. Control user permissions, create client roles, and manage team access with code examples.',
      keywords: ['WordPress custom roles', 'user roles WordPress', 'WordPress capabilities', 'create user role', 'WordPress permissions', 'custom user capabilities', 'WordPress role management'],
      canonical: 'https://shahmir.dev/blog/create-custom-user-role',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Create Custom User Roles in WordPress',
        description: 'Complete guide to creating custom WordPress user roles with specific capabilities and permissions.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "What's the difference between add_role() and get_role()->add_cap()?",
        answer: "add_role() creates a completely new role from scratch with specified capabilities. get_role()->add_cap() modifies an existing role by adding capabilities to it. Use add_role() when you need a distinct new role. Use add_cap() when you want to enhance existing roles (like giving Authors the ability to edit pages). add_cap() changes persist even after theme/plugin deactivation unless explicitly removed."
      },
      {
        question: "How do I restrict a role to only edit their own posts?",
        answer: "Grant 'edit_posts' but NOT 'edit_others_posts'. This allows users to create and edit their own posts only. Similarly, use 'delete_posts' without 'delete_others_posts' to restrict deletion. For custom post types, use 'edit_portfolios' without 'edit_others_portfolios'. Test by logging in as that role - they should only see their own content in the admin. This is perfect for client or contributor roles."
      },
      {
        question: "Can I create roles for custom post types?",
        answer: "Yes, register your CPT with 'capability_type' and custom capability names. Set capability_type to your CPT name (e.g., 'portfolio'), then specify all capability mappings in the 'capabilities' array. Add 'map_meta_cap' => true. Then create roles with those capabilities: 'edit_portfolios', 'publish_portfolios', etc. This gives you granular control - someone can manage portfolios but not regular posts."
      },
      {
        question: "Where are custom roles stored in the database?",
        answer: "Roles are stored in the wp_options table under the option_name 'wp_user_roles' (prefixed with your database prefix). This is a serialized array of all roles and their capabilities. Don't edit this directly - always use add_role(), remove_role(), add_cap(), and remove_cap(). Changes to roles affect all users with that role immediately. Roles persist even if the plugin/theme that created them is deactivated."
      },
      {
        question: "How do I prevent custom roles from persisting after theme/plugin deactivation?",
        answer: "Hook removal to deactivation: For plugins, use register_deactivation_hook(__FILE__, 'remove_custom_roles'). For themes, use add_action('switch_theme', 'remove_custom_roles'). In the function, call remove_role() for each custom role. This is good practice to avoid cluttering the database with unused roles. However, if users exist with those roles, they'll have no role after removal - reassign them first with wp_update_user()."
      }
    ]
  },
  {
    id: 42,
    slug: 'add-user-profile-fields',
    title: 'Add Custom User Profile Fields',
    excerpt: 'Extend WordPress user profiles with custom fields to collect additional user information like social media profiles, phone numbers, or job titles.',
    content: `
      <div class="snippet-content">
        <p>WordPress user profiles include basic fields like username, email, and bio, but you often need additional information. Custom profile fields let you collect social media links, phone numbers, company details, or any custom data specific to your site's needs.</p>

        <h2>Why Add Custom Profile Fields?</h2>
        <ul>
          <li><strong>Author Information:</strong> Display social media links, website, company details</li>
          <li><strong>Contact Details:</strong> Collect phone numbers, addresses, Skype IDs</li>
          <li><strong>Professional Data:</strong> Job titles, departments, employee IDs</li>
          <li><strong>Personalization:</strong> User preferences, favorite categories, interests</li>
          <li><strong>Membership Sites:</strong> Subscription levels, member numbers, expiry dates</li>
          <li><strong>E-commerce:</strong> Billing preferences, VAT numbers, purchase history</li>
        </ul>

        <h2>Basic Custom Profile Field</h2>
        <p>Add a simple text field to user profiles:</p>

        <pre><code>/**
 * Add custom profile field
 */
function add_custom_user_profile_fields($user) {
    ?>
    <h3>Additional Information</h3>
    <table class="form-table">
        <tr>
            <th><label for="phone">Phone Number</label></th>
            <td>
                <input type="text"
                       name="phone"
                       id="phone"
                       value="<?php echo esc_attr(get_user_meta($user->ID, 'phone', true)); ?>"
                       class="regular-text" />
                <p class="description">Enter your phone number.</p>
            </td>
        </tr>
    </table>
    <?php
}
add_action('show_user_profile', 'add_custom_user_profile_fields');
add_action('edit_user_profile', 'add_custom_user_profile_fields');

/**
 * Save custom profile field
 */
function save_custom_user_profile_fields($user_id) {
    if (!current_user_can('edit_user', $user_id)) {
        return false;
    }

    update_user_meta($user_id, 'phone', sanitize_text_field($_POST['phone']));
}
add_action('personal_options_update', 'save_custom_user_profile_fields');
add_action('edit_user_profile_update', 'save_custom_user_profile_fields');</code></pre>

        <h2>Multiple Custom Fields</h2>
        <p>Add various field types (text, textarea, select, checkbox):</p>

        <pre><code>/**
 * Add multiple custom profile fields
 */
function add_multiple_profile_fields($user) {
    $job_title = get_user_meta($user->ID, 'job_title', true);
    $company = get_user_meta($user->ID, 'company', true);
    $bio_extended = get_user_meta($user->ID, 'bio_extended', true);
    $twitter = get_user_meta($user->ID, 'twitter', true);
    $linkedin = get_user_meta($user->ID, 'linkedin', true);
    $newsletter = get_user_meta($user->ID, 'newsletter', true);
    $user_level = get_user_meta($user->ID, 'user_level', true);
    ?>
    <h3>Professional Information</h3>
    <table class="form-table">
        <tr>
            <th><label for="job_title">Job Title</label></th>
            <td>
                <input type="text" name="job_title" id="job_title"
                       value="<?php echo esc_attr($job_title); ?>"
                       class="regular-text" />
            </td>
        </tr>
        <tr>
            <th><label for="company">Company</label></th>
            <td>
                <input type="text" name="company" id="company"
                       value="<?php echo esc_attr($company); ?>"
                       class="regular-text" />
            </td>
        </tr>
        <tr>
            <th><label for="bio_extended">Extended Bio</label></th>
            <td>
                <textarea name="bio_extended" id="bio_extended"
                          rows="5" cols="30"
                          class="large-text"><?php echo esc_textarea($bio_extended); ?></textarea>
                <p class="description">Additional biographical information.</p>
            </td>
        </tr>
    </table>

    <h3>Social Media</h3>
    <table class="form-table">
        <tr>
            <th><label for="twitter">Twitter Username</label></th>
            <td>
                <input type="text" name="twitter" id="twitter"
                       value="<?php echo esc_attr($twitter); ?>"
                       class="regular-text"
                       placeholder="@username" />
            </td>
        </tr>
        <tr>
            <th><label for="linkedin">LinkedIn Profile URL</label></th>
            <td>
                <input type="url" name="linkedin" id="linkedin"
                       value="<?php echo esc_url($linkedin); ?>"
                       class="regular-text" />
            </td>
        </tr>
    </table>

    <h3>Preferences</h3>
    <table class="form-table">
        <tr>
            <th><label for="newsletter">Newsletter</label></th>
            <td>
                <label>
                    <input type="checkbox" name="newsletter" id="newsletter"
                           value="1" <?php checked($newsletter, '1'); ?> />
                    Subscribe to newsletter
                </label>
            </td>
        </tr>
        <tr>
            <th><label for="user_level">User Level</label></th>
            <td>
                <select name="user_level" id="user_level">
                    <option value="">Select Level</option>
                    <option value="basic" <?php selected($user_level, 'basic'); ?>>Basic</option>
                    <option value="premium" <?php selected($user_level, 'premium'); ?>>Premium</option>
                    <option value="vip" <?php selected($user_level, 'vip'); ?>>VIP</option>
                </select>
            </td>
        </tr>
    </table>
    <?php
}
add_action('show_user_profile', 'add_multiple_profile_fields');
add_action('edit_user_profile', 'add_multiple_profile_fields');

/**
 * Save multiple profile fields
 */
function save_multiple_profile_fields($user_id) {
    if (!current_user_can('edit_user', $user_id)) {
        return false;
    }

    update_user_meta($user_id, 'job_title', sanitize_text_field($_POST['job_title']));
    update_user_meta($user_id, 'company', sanitize_text_field($_POST['company']));
    update_user_meta($user_id, 'bio_extended', sanitize_textarea_field($_POST['bio_extended']));
    update_user_meta($user_id, 'twitter', sanitize_text_field($_POST['twitter']));
    update_user_meta($user_id, 'linkedin', esc_url_raw($_POST['linkedin']));
    update_user_meta($user_id, 'newsletter', isset($_POST['newsletter']) ? '1' : '0');
    update_user_meta($user_id, 'user_level', sanitize_text_field($_POST['user_level']));
}
add_action('personal_options_update', 'save_multiple_profile_fields');
add_action('edit_user_profile_update', 'save_multiple_profile_fields');</code></pre>

        <h2>Display Custom Fields on Frontend</h2>
        <p>Show custom profile data in author templates:</p>

        <pre><code>/**
 * Display custom profile fields in author bio
 */
function display_author_custom_fields($author_id = null) {
    if (!$author_id) {
        $author_id = get_the_author_meta('ID');
    }

    $job_title = get_user_meta($author_id, 'job_title', true);
    $company = get_user_meta($author_id, 'company', true);
    $twitter = get_user_meta($author_id, 'twitter', true);
    $linkedin = get_user_meta($author_id, 'linkedin', true);

    if ($job_title || $company) {
        echo '<div class="author-professional">';
        if ($job_title) {
            echo '<span class="job-title">' . esc_html($job_title) . '</span>';
        }
        if ($company) {
            echo ' at <span class="company">' . esc_html($company) . '</span>';
        }
        echo '</div>';
    }

    if ($twitter || $linkedin) {
        echo '<div class="author-social">';
        if ($twitter) {
            echo '<a href="https://twitter.com/' . esc_attr($twitter) . '" target="_blank" rel="noopener">Twitter</a> ';
        }
        if ($linkedin) {
            echo '<a href="' . esc_url($linkedin) . '" target="_blank" rel="noopener">LinkedIn</a>';
        }
        echo '</div>';
    }
}

// Usage in author.php or single.php:
// display_author_custom_fields();</code></pre>

        <h2>Image Upload Field</h2>
        <p>Add custom image upload capability to user profiles:</p>

        <pre><code>/**
 * Add custom avatar upload field
 */
function add_custom_avatar_field($user) {
    $custom_avatar = get_user_meta($user->ID, 'custom_avatar', true);
    ?>
    <h3>Custom Avatar</h3>
    <table class="form-table">
        <tr>
            <th><label for="custom_avatar">Custom Profile Image</label></th>
            <td>
                <input type="hidden" name="custom_avatar" id="custom_avatar"
                       value="<?php echo esc_attr($custom_avatar); ?>" />
                <button type="button" class="button" id="upload_avatar_button">
                    Upload Image
                </button>
                <button type="button" class="button" id="remove_avatar_button">
                    Remove Image
                </button>
                <div id="avatar_preview">
                    <?php if ($custom_avatar): ?>
                        <img src="<?php echo esc_url($custom_avatar); ?>"
                             style="max-width: 150px; display: block; margin-top: 10px;" />
                    <?php endif; ?>
                </div>
            </td>
        </tr>
    </table>

    <script>
    jQuery(document).ready(function($) {
        var mediaUploader;

        $('#upload_avatar_button').click(function(e) {
            e.preventDefault();

            if (mediaUploader) {
                mediaUploader.open();
                return;
            }

            mediaUploader = wp.media({
                title: 'Choose Avatar',
                button: { text: 'Choose Image' },
                multiple: false
            });

            mediaUploader.on('select', function() {
                var attachment = mediaUploader.state().get('selection').first().toJSON();
                $('#custom_avatar').val(attachment.url);
                $('#avatar_preview').html('<img src="' + attachment.url + '" style="max-width: 150px; display: block; margin-top: 10px;">');
            });

            mediaUploader.open();
        });

        $('#remove_avatar_button').click(function(e) {
            e.preventDefault();
            $('#custom_avatar').val('');
            $('#avatar_preview').html('');
        });
    });
    </script>
    <?php
}
add_action('show_user_profile', 'add_custom_avatar_field');
add_action('edit_user_profile', 'add_custom_avatar_field');

function save_custom_avatar_field($user_id) {
    if (!current_user_can('edit_user', $user_id)) {
        return false;
    }

    if (isset($_POST['custom_avatar'])) {
        update_user_meta($user_id, 'custom_avatar', esc_url_raw($_POST['custom_avatar']));
    }
}
add_action('personal_options_update', 'save_custom_avatar_field');
add_action('edit_user_profile_update', 'save_custom_avatar_field');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Sanitize All Input</td>
              <td>Use sanitize_text_field(), esc_url_raw(), etc. to prevent XSS</td>
            </tr>
            <tr>
              <td>Check User Capabilities</td>
              <td>Verify current_user_can('edit_user') before saving</td>
            </tr>
            <tr>
              <td>Use Proper Escaping</td>
              <td>esc_attr(), esc_html(), esc_url() when outputting data</td>
            </tr>
            <tr>
              <td>Add Field Descriptions</td>
              <td>Help users understand what information to provide</td>
            </tr>
            <tr>
              <td>Use Appropriate Input Types</td>
              <td>Use type="email", type="url" for better validation</td>
            </tr>
            <tr>
              <td>Group Related Fields</td>
              <td>Organize fields under clear headings for better UX</td>
            </tr>
            <tr>
              <td>Validate on Save</td>
              <td>Check data validity before updating user meta</td>
            </tr>
            <tr>
              <td>Consider Privacy</td>
              <td>Don't force users to provide sensitive information</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Minimal impact (< 0.001s). User meta is only queried on profile pages and author pages, which are typically low-traffic. get_user_meta() is cached by WordPress. Even with 20+ custom fields, there's no noticeable performance impact. For high-traffic author pages, consider caching the output of custom field displays using transients.</p>
      </div>
    `,
    code: `/**
 * Add custom profile field
 */
function add_custom_user_profile_fields($user) {
    ?>
    <h3>Additional Information</h3>
    <table class="form-table">
        <tr>
            <th><label for="phone">Phone Number</label></th>
            <td>
                <input type="text" name="phone" id="phone"
                       value="<?php echo esc_attr(get_user_meta($user->ID, 'phone', true)); ?>"
                       class="regular-text" />
            </td>
        </tr>
    </table>
    <?php
}
add_action('show_user_profile', 'add_custom_user_profile_fields');
add_action('edit_user_profile', 'add_custom_user_profile_fields');

function save_custom_user_profile_fields($user_id) {
    if (!current_user_can('edit_user', $user_id)) return false;
    update_user_meta($user_id, 'phone', sanitize_text_field($_POST['phone']));
}
add_action('personal_options_update', 'save_custom_user_profile_fields');
add_action('edit_user_profile_update', 'save_custom_user_profile_fields');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-15',
    readTime: '7 min',
    category: 'WordPress Users',
    tags: ['User Meta', 'Profile Fields', 'Users'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Add Custom User Profile Fields in WordPress - Complete Guide 2025',
      metaDescription: 'Learn how to add custom fields to WordPress user profiles for social media links, phone numbers, job titles, and more. Complete code with examples.',
      keywords: ['WordPress user profile fields', 'custom user meta', 'WordPress profile customization', 'user profile fields', 'WordPress user data', 'custom profile WordPress'],
      canonical: 'https://shahmir.dev/blog/add-user-profile-fields',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Custom User Profile Fields in WordPress',
        description: 'Complete guide to adding custom fields to WordPress user profiles.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-15',
        dateModified: '2025-01-15',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "How do I make custom profile fields required?",
        answer: "Add validation in your save function. Before update_user_meta(), check if field is empty: if (empty($_POST['phone'])) { return new WP_Error('required_field', 'Phone number is required'); }. For better UX, add JavaScript validation and HTML5 'required' attribute to the input. Also display error messages using add_settings_error() and settings_errors() to inform users what's missing."
      },
      {
        question: "Can I restrict which roles can edit certain custom fields?",
        answer: "Yes, add role checks in both display and save functions. In add_custom_user_profile_fields(), check: if (!current_user_can('manage_options')) { return; } to hide fields from non-admins. In save function, verify: if (!current_user_can('manage_options') && isset($_POST['restricted_field'])) { return; }. This prevents users from editing restricted fields even if they inspect HTML and add inputs manually."
      },
      {
        question: "How do I add custom fields to the registration page?",
        answer: "Use different hooks: 'register_form' to display fields and 'user_register' to save. Example: add_action('register_form', function() { echo '<p><input name=\"phone\" /></p>'; }); and add_action('user_register', function($user_id) { update_user_meta($user_id, 'phone', $_POST['phone']); });. Remember to sanitize inputs. Note: Registration page has different styling - test your fields carefully."
      },
      {
        question: "Where are custom user fields stored in the database?",
        answer: "Custom user meta is stored in the wp_usermeta table with columns: umeta_id, user_id, meta_key, and meta_value. Each field is a separate row. get_user_meta() retrieves data, update_user_meta() updates or inserts. WordPress handles serialization automatically for arrays. Don't query this table directly - always use WordPress functions for proper caching and compatibility."
      },
      {
        question: "How do I display custom fields in author archives or author boxes?",
        answer: "Use get_user_meta() with the author ID: $phone = get_user_meta(get_the_author_meta('ID'), 'phone', true);. In author.php template, get author ID from queried object: $author_id = get_queried_object_id();. Then retrieve and display fields. For author boxes in single posts, use get_the_author_meta('ID') to get current post author's ID, then fetch their custom meta."
      }
    ]
  },
  {
    id: 43,
    slug: 'disable-admin-bar-non-admins',
    title: 'Disable Admin Bar for Non-Admins',
    excerpt: 'Learn how to hide the WordPress admin bar from non-administrator users to improve frontend experience and reduce clutter for regular users.',
    content: `
      <div class="snippet-content">
        <h2>Benefits of Disabling Admin Bar for Non-Admins</h2>
        <p>The WordPress admin bar can be useful for administrators but often unnecessary for regular users. By selectively hiding it, you can:</p>
        <ul>
          <li><strong>Improved User Experience:</strong> Cleaner frontend appearance for logged-in users without administrative privileges</li>
          <li><strong>Reduced Confusion:</strong> Non-admin users won't see options they can't access or don't need</li>
          <li><strong>Better Performance:</strong> Slightly faster page loads by removing admin bar CSS and JavaScript for most users</li>
          <li><strong>Professional Appearance:</strong> Membership sites and client portals look more polished without the admin bar</li>
          <li><strong>Security Through Obscurity:</strong> Hides WordPress branding and admin access points from regular users</li>
          <li><strong>Mobile-Friendly:</strong> Eliminates the admin bar that can interfere with mobile navigation</li>
        </ul>

        <h2>Basic Implementation</h2>
        <p>The simplest way to hide the admin bar for non-administrators uses the <code>show_admin_bar()</code> function:</p>

        <h3>Hide for All Non-Admins</h3>
        <pre><code>function hide_admin_bar_for_non_admins() {
    if (!current_user_can('administrator')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_for_non_admins');</code></pre>

        <p>This code checks if the current user has administrator capabilities. If not, it hides the admin bar using <code>show_admin_bar(false)</code>. The <code>after_setup_theme</code> hook runs early enough to affect the admin bar display.</p>

        <h3>Hide Based on User Role</h3>
        <pre><code>function hide_admin_bar_by_role() {
    $user = wp_get_current_user();
    $allowed_roles = array('administrator', 'editor');

    if (!array_intersect($allowed_roles, $user->roles)) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_by_role');</code></pre>

        <p>This version shows the admin bar only for administrators and editors, hiding it for all other roles. The <code>array_intersect()</code> function checks if the user has any of the allowed roles.</p>

        <h2>Frontend-Only Hiding</h2>
        <p>Sometimes you want to keep the admin bar in the backend but hide it on the frontend:</p>

        <pre><code>function hide_admin_bar_frontend() {
    if (!is_admin() && !current_user_can('administrator')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_frontend');</code></pre>

        <p>The <code>is_admin()</code> check ensures the admin bar remains visible in the WordPress dashboard while hiding it on public-facing pages.</p>

        <h2>Advanced Implementations</h2>

        <h3>Hide Based on Specific Capabilities</h3>
        <pre><code>function hide_admin_bar_by_capability() {
    // Show admin bar only for users who can edit posts or pages
    if (!current_user_can('edit_posts') && !current_user_can('edit_pages')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_by_capability');</code></pre>

        <p>This approach uses specific capabilities rather than roles, providing more granular control. Users who can't edit posts or pages won't see the admin bar.</p>

        <h3>User Preference Toggle</h3>
        <pre><code>// Add admin bar preference to user profile
function add_admin_bar_preference($user) {
    $show_admin_bar = get_user_meta($user->ID, 'show_admin_bar_frontend', true);
    ?>
    <h3>Admin Bar Preferences</h3>
    <table class="form-table">
        <tr>
            <th><label for="show_admin_bar_frontend">Show Admin Bar on Frontend</label></th>
            <td>
                <input type="checkbox" name="show_admin_bar_frontend"
                       id="show_admin_bar_frontend" value="1"
                       <?php checked($show_admin_bar, '1'); ?> />
                <span class="description">Display the admin bar when viewing the site</span>
            </td>
        </tr>
    </table>
    <?php
}
add_action('show_user_profile', 'add_admin_bar_preference');
add_action('edit_user_profile', 'add_admin_bar_preference');

// Save user preference
function save_admin_bar_preference($user_id) {
    if (!current_user_can('edit_user', $user_id)) {
        return false;
    }

    $show_admin_bar = isset($_POST['show_admin_bar_frontend']) ? '1' : '0';
    update_user_meta($user_id, 'show_admin_bar_frontend', $show_admin_bar);
}
add_action('personal_options_update', 'save_admin_bar_preference');
add_action('edit_user_profile_update', 'save_admin_bar_preference');

// Apply user preference
function apply_admin_bar_preference() {
    if (!is_admin()) {
        $user_id = get_current_user_id();
        $show_admin_bar = get_user_meta($user_id, 'show_admin_bar_frontend', true);

        if ($show_admin_bar !== '1') {
            show_admin_bar(false);
        }
    }
}
add_action('after_setup_theme', 'apply_admin_bar_preference');</code></pre>

        <p>This implementation allows users to control their own admin bar visibility through their profile settings. It adds a checkbox to the user profile page and respects each user's preference.</p>

        <h3>Conditional Display by Page Type</h3>
        <pre><code>function hide_admin_bar_conditionally() {
    $user = wp_get_current_user();

    // Always show for administrators
    if (in_array('administrator', $user->roles)) {
        return;
    }

    // Hide on specific page types
    if (is_front_page() || is_archive() || is_search()) {
        show_admin_bar(false);
        return;
    }

    // Hide for users with subscriber role
    if (in_array('subscriber', $user->roles)) {
        show_admin_bar(false);
        return;
    }

    // Show for editors and authors when editing their own content
    if ((in_array('editor', $user->roles) || in_array('author', $user->roles)) && is_singular()) {
        $post = get_queried_object();
        if ($post && $post->post_author == get_current_user_id()) {
            show_admin_bar(true);
        }
    }
}
add_action('after_setup_theme', 'hide_admin_bar_conditionally');</code></pre>

        <p>This advanced example combines multiple conditions: page type, user role, and content ownership. Authors and editors see the admin bar on their own posts but not elsewhere.</p>

        <h3>Custom Admin Bar Items for Non-Admins</h3>
        <pre><code>function customize_admin_bar_for_non_admins($wp_admin_bar) {
    // Only modify for non-admins
    if (current_user_can('administrator')) {
        return;
    }

    // Remove WordPress logo and default menus
    $wp_admin_bar->remove_node('wp-logo');
    $wp_admin_bar->remove_node('comments');
    $wp_admin_bar->remove_node('new-content');

    // Add custom menu items relevant to non-admins
    $wp_admin_bar->add_node(array(
        'id'    => 'my-account-custom',
        'title' => 'My Profile',
        'href'  => admin_url('profile.php'),
        'meta'  => array('class' => 'custom-profile-link')
    ));

    $wp_admin_bar->add_node(array(
        'id'    => 'help-center',
        'title' => 'Help Center',
        'href'  => home_url('/help'),
        'meta'  => array('class' => 'help-link')
    ));
}
add_action('admin_bar_menu', 'customize_admin_bar_for_non_admins', 999);

// Apply this along with role-based visibility
function show_custom_admin_bar() {
    if (!current_user_can('administrator')) {
        // Show simplified admin bar instead of hiding completely
        add_filter('show_admin_bar', '__return_true');
    }
}
add_action('after_setup_theme', 'show_custom_admin_bar');</code></pre>

        <p>Instead of completely hiding the admin bar, this approach customizes it for non-administrators by removing unnecessary items and adding relevant links.</p>

        <h2>Remove Admin Bar Option from User Profile</h2>
        <pre><code>// Remove the admin bar preference checkbox from user profiles
function remove_admin_bar_profile_option() {
    ?>
    <style type="text/css">
        .show-admin-bar {
            display: none;
        }
    </style>
    <?php
}
add_action('admin_head', 'remove_admin_bar_profile_option');

// Or remove it programmatically
function force_hide_admin_bar_option() {
    remove_action('admin_color_scheme_picker', 'admin_color_scheme_picker');
}
add_action('admin_init', 'force_hide_admin_bar_option');

// Remove from user profile fields
add_filter('user_can_richedit', function($can_richedit) {
    if (!current_user_can('administrator')) {
        add_filter('show_admin_bar', '__return_false');
    }
    return $can_richedit;
});</code></pre>

        <p>These snippets prevent non-administrators from even seeing the option to enable/disable the admin bar in their profile settings.</p>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Description</th>
              <th>Impact</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><strong>Use after_setup_theme Hook</strong></td>
              <td>The <code>after_setup_theme</code> hook runs early enough to affect admin bar display before it's rendered</td>
              <td>Ensures reliable admin bar hiding</td>
            </tr>
            <tr>
              <td><strong>Check User Capabilities</strong></td>
              <td>Use <code>current_user_can()</code> instead of checking roles directly for better flexibility</td>
              <td>Works with custom roles and capabilities</td>
            </tr>
            <tr>
              <td><strong>Consider Mobile Users</strong></td>
              <td>Admin bar can interfere with mobile navigation; hiding it improves mobile UX</td>
              <td>Better mobile experience</td>
            </tr>
            <tr>
              <td><strong>Provide User Control</strong></td>
              <td>Allow users to toggle admin bar visibility through profile settings when appropriate</td>
              <td>Improved user satisfaction</td>
            </tr>
            <tr>
              <td><strong>Keep for Content Creators</strong></td>
              <td>Authors and editors benefit from admin bar shortcuts; consider showing it for them</td>
              <td>Maintains productivity for content creators</td>
            </tr>
            <tr>
              <td><strong>Test Across Roles</strong></td>
              <td>Create test accounts for each user role to verify admin bar visibility settings</td>
              <td>Ensures correct implementation</td>
            </tr>
            <tr>
              <td><strong>Document Your Approach</strong></td>
              <td>Add comments explaining why certain roles see or don't see the admin bar</td>
              <td>Easier maintenance and team collaboration</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance Gain:</strong> Hiding the admin bar provides minor performance improvements:</p>
        <ul>
          <li><strong>CSS Reduction:</strong> Eliminates ~15KB of admin bar CSS from frontend pages</li>
          <li><strong>JavaScript Savings:</strong> Removes admin bar JavaScript (Hover intent, menu interactions)</li>
          <li><strong>HTTP Requests:</strong> Reduces 1-2 HTTP requests for admin bar assets</li>
          <li><strong>DOM Complexity:</strong> Simpler DOM structure without admin bar elements</li>
          <li><strong>Render Time:</strong> Approximately 50-100ms faster initial page render</li>
          <li><strong>Memory Usage:</strong> Slight reduction in browser memory for logged-in users</li>
        </ul>

        <p><strong>Recommendation:</strong> Implement admin bar hiding primarily for UX benefits. Performance gains are minimal but cumulative across many logged-in users. Use role-based hiding to balance functionality with user experience.</p>
      </div>
    `,
    code: `function hide_admin_bar_for_non_admins() {
    if (!current_user_can('administrator')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_for_non_admins');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WordPress Users',
    tags: ['Admin Bar', 'UX', 'Users'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'How to Disable Admin Bar for Non-Admins in WordPress | Complete Guide',
      metaDescription: 'Learn how to hide the WordPress admin bar from non-administrator users with role-based visibility, user preferences, and conditional display. Improve UX and performance.',
      keywords: ['wordpress admin bar', 'hide admin bar', 'disable admin bar non-admins', 'show_admin_bar', 'wordpress user experience', 'admin bar customization', 'role-based admin bar', 'frontend admin bar'],
      canonical: 'https://shahmir.dev/blog/disable-admin-bar-non-admins',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Disable Admin Bar for Non-Admins in WordPress',
        description: 'Complete guide to hiding the WordPress admin bar from non-administrator users with multiple implementation approaches and best practices.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "Will hiding the admin bar affect site functionality for non-admins?",
        answer: "No, hiding the admin bar does not affect site functionality. The admin bar is purely a convenience feature that provides quick access to common WordPress functions. Non-admin users can still access all their permitted features through the standard WordPress dashboard menu. The admin bar is most useful for administrators and content creators who frequently use its shortcuts; regular users (like subscribers or customers) rarely need it. Hiding it actually improves their experience by reducing clutter and confusion. All user capabilities remain unchanged—only the visual admin bar element is hidden from the frontend."
      },
      {
        question: "What's the difference between show_admin_bar() and the show_admin_bar filter?",
        answer: "The show_admin_bar() function and show_admin_bar filter serve similar purposes but work differently. The show_admin_bar() function is a WordPress core function that directly sets whether the admin bar should display for the current user. It's typically called during theme setup (after_setup_theme hook) and is straightforward to use. The show_admin_bar filter is a hook that allows you to modify the admin bar visibility decision. You can use it to conditionally override the default behavior: add_filter('show_admin_bar', 'my_custom_function'). The filter approach is more flexible for complex conditional logic because it runs later in the WordPress load sequence. For most use cases, show_admin_bar() is simpler and more direct."
      },
      {
        question: "Can users still access the dashboard if I hide the admin bar?",
        answer: "Yes, absolutely. Hiding the admin bar only removes the visual bar from the top of pages—it doesn't block access to the WordPress dashboard. Users can still access the dashboard by navigating to yoursite.com/wp-admin or clicking any admin links. The admin bar is a convenience feature, not a security control. If you want to restrict dashboard access entirely for certain roles, you need separate code that redirects users from wp-admin based on their capabilities. For example, subscribers typically don't need dashboard access, so many sites redirect them to the frontend after login while still allowing admins and editors to access the dashboard normally. Hiding the admin bar and controlling dashboard access are two separate concerns."
      },
      {
        question: "Should I hide the admin bar for editors and authors?",
        answer: "It depends on your use case. Editors and authors often benefit from the admin bar because it provides quick access to 'Edit Post,' 'New Post,' comment moderation, and other content management features. If your editors and authors actively create and manage content, keeping the admin bar visible improves their workflow efficiency. However, if you run a membership site, multi-author blog, or client portal where these roles are assigned to less technical users, hiding the admin bar can reduce confusion. A good compromise is conditional visibility: show the admin bar when editors/authors are viewing their own content (where they can edit it) but hide it on other pages. You can also provide a user preference toggle so each user can decide for themselves."
      },
      {
        question: "How do I test that the admin bar is properly hidden for different roles?",
        answer: "The best way to test is creating test accounts for each user role you want to verify. Create a subscriber account, an author account, an editor account, etc., then log in as each user and check the frontend. You should see (or not see) the admin bar according to your code's logic. Use an incognito/private browser window for testing multiple accounts simultaneously without logging out. Another approach is using a role-switching plugin like 'User Switching' which lets you instantly switch between user accounts from the admin panel. Check both the frontend and backend to ensure your code works correctly in both contexts. Also test on mobile devices since the admin bar can cause layout issues on smaller screens. Document your expected behavior for each role to ensure consistent testing."
      }
    ]
  },
  {
    id: 44,
    slug: 'custom-login-page',
    title: 'Customize WordPress Login Page',
    excerpt: 'Transform your WordPress login page with custom branding, styles, logos, and colors to create a professional, branded login experience.',
    content: `
      <div class="snippet-content">
        <h2>Benefits of Customizing the Login Page</h2>
        <p>The default WordPress login page is functional but generic. Customizing it provides several advantages:</p>
        <ul>
          <li><strong>Professional Branding:</strong> Replace WordPress logo with your own brand for a cohesive experience</li>
          <li><strong>Better User Experience:</strong> Customize colors, fonts, and layout to match your site's design</li>
          <li><strong>Client Impressions:</strong> Impress clients with a professional, white-labeled login experience</li>
          <li><strong>Security Benefits:</strong> Reduces visibility of WordPress usage, adding minor security through obscurity</li>
          <li><strong>Increased Trust:</strong> Branded login pages make users feel more confident about site legitimacy</li>
          <li><strong>Customized Messaging:</strong> Add helpful instructions or support links specific to your users</li>
        </ul>

        <h2>Basic Logo Customization</h2>
        <p>The simplest customization is replacing the WordPress logo with your own:</p>

        <pre><code>// Change login logo
function custom_login_logo() {
    ?>
    <style type="text/css">
        #login h1 a, .login h1 a {
            background-image: url(<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png);
            height: 80px;
            width: 320px;
            background-size: contain;
            background-repeat: no-repeat;
            padding-bottom: 20px;
        }
    </style>
    <?php
}
add_action('login_enqueue_scripts', 'custom_login_logo');

// Change logo URL (default links to wordpress.org)
function custom_login_logo_url() {
    return home_url();
}
add_filter('login_headerurl', 'custom_login_logo_url');

// Change logo title attribute
function custom_login_logo_url_title() {
    return get_bloginfo('name');
}
add_filter('login_headertext', 'custom_login_logo_url_title');</code></pre>

        <p>This code replaces the WordPress logo with your custom logo image and makes it link to your homepage instead of WordPress.org.</p>

        <h2>Complete Login Page Styling</h2>
        <p>For a full custom design, add comprehensive CSS:</p>

        <pre><code>function custom_login_page_styles() {
    ?>
    <style type="text/css">
        /* Login container */
        body.login {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            background-size: cover;
            background-attachment: fixed;
        }

        /* Logo area */
        #login h1 a {
            background-image: url(<?php echo get_stylesheet_directory_uri(); ?>/images/logo-white.png);
            height: 100px;
            width: 300px;
            background-size: contain;
            background-repeat: no-repeat;
            margin-bottom: 20px;
        }

        /* Login form */
        #loginform {
            background: rgba(255, 255, 255, 0.95);
            border: none;
            border-radius: 10px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            padding: 30px;
        }

        /* Input fields */
        .login input[type="text"],
        .login input[type="password"] {
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            padding: 12px 15px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .login input[type="text"]:focus,
        .login input[type="password"]:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Labels */
        .login label {
            color: #333;
            font-weight: 600;
            font-size: 14px;
        }

        /* Submit button */
        .wp-core-ui .button-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: 600;
            text-shadow: none;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .wp-core-ui .button-primary:hover {
            background: linear-gradient(135deg, #5568d3 0%, #6a4091 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);
        }

        /* Links */
        .login #nav a,
        .login #backtoblog a {
            color: #fff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }

        .login #nav a:hover,
        .login #backtoblog a:hover {
            color: #f0f0f0;
        }

        /* Remember me checkbox */
        .login .forgetmenot label {
            color: #666;
        }

        /* Messages */
        .login .message,
        .login .success {
            border-left: 4px solid #46b450;
            background: rgba(70, 180, 80, 0.1);
        }

        .login #login_error {
            border-left: 4px solid #dc3232;
            background: rgba(220, 50, 50, 0.1);
        }
    </style>
    <?php
}
add_action('login_enqueue_scripts', 'custom_login_page_styles');</code></pre>

        <p>This creates a beautiful, modern login page with gradient backgrounds, rounded corners, and smooth transitions.</p>

        <h2>Custom Background Image</h2>
        <pre><code>function custom_login_background() {
    ?>
    <style type="text/css">
        body.login {
            background-image: url(<?php echo get_stylesheet_directory_uri(); ?>/images/login-bg.jpg);
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }

        /* Add overlay for better readability */
        body.login::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.4);
            z-index: -1;
        }
    </style>
    <?php
}
add_action('login_enqueue_scripts', 'custom_login_background');</code></pre>

        <h2>Advanced Customizations</h2>

        <h3>Enqueue Custom CSS File</h3>
        <pre><code>function custom_login_stylesheet() {
    wp_enqueue_style('custom-login', get_stylesheet_directory_uri() . '/css/login-styles.css');
}
add_action('login_enqueue_scripts', 'custom_login_stylesheet');</code></pre>

        <p>This approach keeps your styles organized in a separate CSS file for better maintainability.</p>

        <h3>Custom Error Messages</h3>
        <pre><code>// Customize login error messages for security
function custom_login_errors($error) {
    // Generic error message to prevent username enumeration
    $error = 'Invalid credentials. Please try again.';
    return $error;
}
add_filter('login_errors', 'custom_login_errors');

// Or provide more helpful messages
function helpful_login_errors($error) {
    global $errors;
    $err_codes = $errors->get_error_codes();

    // Invalid username
    if (in_array('invalid_username', $err_codes)) {
        $error = '<strong>Error:</strong> This username is not registered. Please check your username or <a href="' . wp_lostpassword_url() . '">reset your password</a>.';
    }

    // Incorrect password
    if (in_array('incorrect_password', $err_codes)) {
        $error = '<strong>Error:</strong> The password you entered is incorrect. <a href="' . wp_lostpassword_url() . '">Forgot your password?</a>';
    }

    return $error;
}
add_filter('login_errors', 'helpful_login_errors');</code></pre>

        <h3>Custom Login Page Text</h3>
        <pre><code>// Add custom text above login form
function add_login_page_text() {
    echo '<p style="text-align: center; color: #fff; font-size: 18px; margin-bottom: 20px;">Welcome! Please log in to continue.</p>';
}
add_action('login_form', 'add_login_page_text');

// Add custom footer text
function custom_login_footer() {
    echo '<p style="text-align: center; color: #fff; margin-top: 20px;">Need help? Contact <a href="mailto:support@example.com" style="color: #fff;">support@example.com</a></p>';
}
add_action('login_footer', 'custom_login_footer');</code></pre>

        <h3>Add Custom Fields to Login Form</h3>
        <pre><code>// Add custom field (e.g., security code)
function add_custom_login_field() {
    ?>
    <p>
        <label for="security_code">Security Code<br />
        <input type="text" name="security_code" id="security_code" class="input" value="" size="20" /></label>
    </p>
    <?php
}
add_action('login_form', 'add_custom_login_field');

// Validate custom field
function validate_custom_login_field($user, $password) {
    if (isset($_POST['security_code'])) {
        $security_code = $_POST['security_code'];
        $expected_code = get_option('site_security_code', '1234');

        if ($security_code !== $expected_code) {
            return new WP_Error('invalid_security_code', __('<strong>Error:</strong> Invalid security code.'));
        }
    }
    return $user;
}
add_filter('wp_authenticate_user', 'validate_custom_login_field', 10, 2);</code></pre>

        <h3>Language Switcher on Login Page</h3>
        <pre><code>function add_language_switcher_login() {
    ?>
    <div style="text-align: center; margin-top: 20px;">
        <a href="?lang=en" style="color: #fff; margin: 0 10px;">English</a>
        <a href="?lang=es" style="color: #fff; margin: 0 10px;">Español</a>
        <a href="?lang=fr" style="color: #fff; margin: 0 10px;">Français</a>
    </div>
    <?php
}
add_action('login_footer', 'add_language_switcher_login');</code></pre>

        <h3>Hide "Lost Password" and "Back to Site" Links</h3>
        <pre><code>// Remove lost password link
function remove_lost_password_link() {
    return false;
}
add_filter('allow_password_reset', 'remove_lost_password_link');

// Hide navigation links with CSS
function hide_login_nav_links() {
    ?>
    <style>
        #nav, #backtoblog {
            display: none;
        }
    </style>
    <?php
}
add_action('login_head', 'hide_login_nav_links');</code></pre>

        <h3>Redirect to Custom Page After Failed Login</h3>
        <pre><code>function custom_login_failed_redirect() {
    $login_page = home_url('/login/');
    wp_redirect($login_page . '?login=failed');
    exit;
}
add_action('wp_login_failed', 'custom_login_failed_redirect');

// Redirect if user is not logged in and tries to access wp-admin
function redirect_to_custom_login() {
    global $pagenow;
    if ($pagenow == 'wp-login.php' && !is_user_logged_in()) {
        wp_redirect(home_url('/login/'));
        exit;
    }
}
add_action('init', 'redirect_to_custom_login');</code></pre>

        <h2>Complete Custom Login Page Template</h2>
        <pre><code>// Comprehensive login page customization
function complete_custom_login() {
    ?>
    <style type="text/css">
        body.login {
            background: url(<?php echo get_stylesheet_directory_uri(); ?>/images/login-bg.jpg) no-repeat center center fixed;
            background-size: cover;
        }

        body.login::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
        }

        #login {
            width: 400px;
            padding: 8% 0 0;
            position: relative;
            z-index: 1;
        }

        #login h1 a {
            background-image: url(<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png);
            background-size: contain;
            width: 100%;
            height: 80px;
            margin-bottom: 25px;
        }

        .login form {
            background: #ffffff;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
            position: relative;
        }

        .login form .input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e1e1;
            border-radius: 5px;
            font-size: 14px;
            transition: all 0.3s;
        }

        .login form .input:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .login form .button-primary {
            width: 100%;
            background: #3498db;
            border: none;
            padding: 15px;
            border-radius: 5px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .login form .button-primary:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }

        .login #nav,
        .login #backtoblog {
            text-align: center;
            margin-top: 20px;
        }

        .login #nav a,
        .login #backtoblog a {
            color: #fff;
            text-decoration: none;
            font-size: 14px;
            transition: opacity 0.3s;
        }

        .login #nav a:hover,
        .login #backtoblog a:hover {
            opacity: 0.8;
        }

        .login .message,
        .login #login_error {
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }

        @media screen and (max-width: 768px) {
            #login {
                width: 90%;
                padding-top: 10%;
            }
        }
    </style>
    <?php
}
add_action('login_enqueue_scripts', 'complete_custom_login');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Description</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><strong>Use login_enqueue_scripts Hook</strong></td>
              <td>Always use this hook for login page customizations</td>
              <td>Ensures styles load only on login page</td>
            </tr>
            <tr>
              <td><strong>Optimize Images</strong></td>
              <td>Compress logo and background images</td>
              <td>Faster login page load times</td>
            </tr>
            <tr>
              <td><strong>Mobile Responsive</strong></td>
              <td>Test login page on mobile devices and add responsive CSS</td>
              <td>Better experience for mobile users</td>
            </tr>
            <tr>
              <td><strong>Maintain Accessibility</strong></td>
              <td>Ensure sufficient color contrast and keyboard navigation</td>
              <td>Accessible to all users including those with disabilities</td>
            </tr>
            <tr>
              <td><strong>Test Error States</strong></td>
              <td>Check how error messages appear with your custom styling</td>
              <td>Ensures users can see and understand errors</td>
            </tr>
            <tr>
              <td><strong>Generic Error Messages</strong></td>
              <td>Consider using generic messages to prevent username enumeration</td>
              <td>Improves security against brute force attacks</td>
            </tr>
            <tr>
              <td><strong>Use External CSS File</strong></td>
              <td>For extensive customizations, use wp_enqueue_style with separate CSS file</td>
              <td>Better code organization and maintainability</td>
            </tr>
            <tr>
              <td><strong>Brand Consistency</strong></td>
              <td>Match login page colors and fonts to your main site</td>
              <td>Professional, cohesive user experience</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Minimal impact when implemented correctly. Login page customizations only load on wp-login.php, not affecting site-wide performance. Use optimized images (logo &lt; 50KB, background &lt; 200KB) and inline critical CSS. The login page is accessed infrequently, so minor performance overhead is acceptable. Avoid loading heavy JavaScript libraries unless absolutely necessary. If using custom fonts, preload them or use system fonts for faster rendering.</p>
      </div>
    `,
    code: `// Custom login logo
function custom_login_logo() {
    ?>
    <style type="text/css">
        #login h1 a {
            background-image: url(<?php echo get_stylesheet_directory_uri(); ?>/images/logo.png);
            height: 80px;
            width: 320px;
            background-size: contain;
            background-repeat: no-repeat;
        }
    </style>
    <?php
}
add_action('login_enqueue_scripts', 'custom_login_logo');

// Change logo URL
function custom_login_logo_url() {
    return home_url();
}
add_filter('login_headerurl', 'custom_login_logo_url');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '8 min',
    category: 'WordPress Users',
    tags: ['Login', 'Branding', 'Customization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Customize WordPress Login Page - Complete Guide with Code Examples',
      metaDescription: 'Learn how to customize the WordPress login page with custom logos, colors, backgrounds, and styles. Step-by-step guide with complete code examples.',
      keywords: ['wordpress login page', 'custom login page wordpress', 'wordpress login customization', 'login page branding', 'wp-login.php customization', 'wordpress white label login', 'custom login logo wordpress', 'login page design'],
      canonical: 'https://shahmir.dev/blog/custom-login-page',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Customize WordPress Login Page',
        description: 'Complete guide to customizing the WordPress login page with branding, custom styles, logos, and user experience improvements.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Will customizing the login page affect WordPress updates?",
        answer: "No, login page customizations done through functions.php are completely safe and won't be affected by WordPress core updates. WordPress provides specific hooks (login_enqueue_scripts, login_headerurl, etc.) designed for customization that are maintained across versions. Never modify wp-login.php directly as that file gets replaced during updates. Always use hooks and filters in your theme's functions.php or a custom plugin. This ensures your customizations persist through all WordPress updates while remaining upgrade-safe."
      },
      {
        question: "Can I use a completely custom login page instead of wp-login.php?",
        answer: "Yes, you can create a completely custom login page using wp_login_form() function and custom templates. Create a page template with the login form, then use template_redirect to redirect wp-login.php to your custom page. However, this approach is more complex and you'll need to handle login processing, errors, redirects, and password resets manually. For most use cases, customizing the default wp-login.php with CSS and hooks is simpler and more maintainable. Custom login pages are best for membership sites with specific branding requirements."
      },
      {
        question: "How do I preview login page changes without logging out?",
        answer: "Use an incognito/private browser window to view the login page while remaining logged in to your admin account in your regular browser. Alternatively, add ?action=logout to your admin URL (wp-admin/?action=logout) but don't confirm the logout - this loads the login page temporarily. Another method: create a test user account and use a browser extension like 'User Switching' to quickly switch between accounts. For development, you can also temporarily add die() after your login customization code to output the page without requiring authentication, but remember to remove this before going live."
      },
      {
        question: "Should I customize error messages for security reasons?",
        answer: "Yes, customizing error messages can improve security. The default WordPress login errors reveal whether a username exists ('Invalid username') or if the password is wrong ('Incorrect password'). This information helps attackers with username enumeration. Replace specific errors with a generic message like 'Invalid credentials' to prevent this. However, this trades security for user experience - legitimate users won't know if they mistyped their username or password. For high-security sites, use generic messages. For user-friendly sites, keep specific messages but implement rate limiting and CAPTCHA to prevent brute force attacks."
      },
      {
        question: "How can I ensure my custom login page is mobile-responsive?",
        answer: "Add CSS media queries to adjust layout for mobile screens. Test the login page on actual mobile devices or use browser dev tools. Key responsive considerations: reduce #login width to 90% on mobile, adjust logo size (max-width: 200px on mobile), increase input padding for easier tapping (at least 44x44px touch target), ensure text is readable without zooming (min 16px font size), test landscape and portrait orientations, and verify background images look good on small screens. Use max-width: 768px media queries for tablet and mobile adjustments. Consider using background-attachment: scroll instead of fixed on mobile for better performance."
      }
    ]
  },
  {
    id: 45,
    slug: 'redirect-after-login',
    title: 'Redirect Users After Login',
    excerpt: 'Control where users land after logging in with role-based redirects, custom redirects, and conditional logic for better user experience.',
    content: `
      <div class="snippet-content">
        <h2>Benefits of Custom Login Redirects</h2>
        <p>By default, WordPress redirects all users to the dashboard after login. Custom redirects provide better UX:</p>
        <ul>
          <li><strong>Role-Based Experience:</strong> Send different user roles to relevant pages (subscribers to homepage, admins to dashboard)</li>
          <li><strong>Improved Onboarding:</strong> Direct new users to getting started pages or profile completion</li>
          <li><strong>Better Navigation:</strong> Prevent confusion by avoiding dashboard access for non-admin users</li>
          <li><strong>Custom Workflows:</strong> Create specific user journeys based on membership levels or capabilities</li>
          <li><strong>Enhanced Security:</strong> Reduce exposure of admin dashboard to non-privileged users</li>
          <li><strong>Professional Experience:</strong> Especially valuable for client portals, membership sites, and WooCommerce stores</li>
        </ul>

        <h2>Basic Login Redirect</h2>
        <p>The simplest redirect sends all users to a specific page:</p>

        <pre><code>// Redirect all users to homepage after login
function redirect_to_homepage_after_login($redirect_to, $request, $user) {
    return home_url();
}
add_filter('login_redirect', 'redirect_to_homepage_after_login', 10, 3);</code></pre>

        <p>The <code>login_redirect</code> filter receives three parameters: the redirect URL, the requested redirect URL, and the user object.</p>

        <h2>Role-Based Redirects</h2>
        <p>Different user roles should often go to different destinations:</p>

        <pre><code>function role_based_login_redirect($redirect_to, $request, $user) {
    // Check if user object exists (login successful)
    if (isset($user->roles) && is_array($user->roles)) {
        // Administrators go to dashboard
        if (in_array('administrator', $user->roles)) {
            return admin_url();
        }

        // Editors go to posts page
        if (in_array('editor', $user->roles)) {
            return admin_url('edit.php');
        }

        // Authors go to their posts
        if (in_array('author', $user->roles)) {
            return admin_url('edit.php?post_type=post&author=' . $user->ID);
        }

        // Subscribers and customers go to homepage
        if (in_array('subscriber', $user->roles) || in_array('customer', $user->roles)) {
            return home_url('/my-account/');
        }
    }

    // Default: go to homepage
    return home_url();
}
add_filter('login_redirect', 'role_based_login_redirect', 10, 3);</code></pre>

        <p>This code checks the user's role and redirects accordingly. Administrators access the dashboard, while subscribers go to a custom account page.</p>

        <h2>Redirect Based on Capabilities</h2>
        <pre><code>function capability_based_redirect($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    // Users who can manage options (admins) go to dashboard
    if (user_can($user, 'manage_options')) {
        return admin_url();
    }

    // Users who can edit posts go to posts page
    if (user_can($user, 'edit_posts')) {
        return admin_url('edit.php');
    }

    // Everyone else goes to custom page
    return home_url('/welcome/');
}
add_filter('login_redirect', 'capability_based_redirect', 10, 3);</code></pre>

        <h2>Advanced Implementations</h2>

        <h3>Redirect to Referring Page</h3>
        <pre><code>// Redirect users back to the page they came from
function redirect_to_referer_after_login($redirect_to, $request, $user) {
    // If user is not admin, redirect to referer if available
    if (!isset($user->roles) || !in_array('administrator', $user->roles)) {
        if (!empty($_SERVER['HTTP_REFERER']) &&
            strpos($_SERVER['HTTP_REFERER'], 'wp-login') === false &&
            strpos($_SERVER['HTTP_REFERER'], 'wp-admin') === false) {
            return $_SERVER['HTTP_REFERER'];
        }
    }

    return $redirect_to;
}
add_filter('login_redirect', 'redirect_to_referer_after_login', 10, 3);</code></pre>

        <p>This returns users to the page they were viewing before logging in, useful for protected content or member-only sections.</p>

        <h3>First-Time Login Detection</h3>
        <pre><code>// Redirect users on first login to welcome page
function first_login_redirect($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    // Check if this is first login
    $first_login = get_user_meta($user->ID, 'first_login', true);

    if (empty($first_login)) {
        // Mark that user has logged in
        update_user_meta($user->ID, 'first_login', 'no');

        // Redirect to welcome/onboarding page
        return home_url('/welcome/');
    }

    return $redirect_to;
}
add_filter('login_redirect', 'first_login_redirect', 10, 3);</code></pre>

        <h3>Redirect Based on Membership Level</h3>
        <pre><code>// Redirect based on custom membership levels
function membership_based_redirect($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    $membership_level = get_user_meta($user->ID, 'membership_level', true);

    switch ($membership_level) {
        case 'premium':
            return home_url('/premium-dashboard/');
        case 'pro':
            return home_url('/pro-dashboard/');
        case 'basic':
            return home_url('/basic-dashboard/');
        default:
            return home_url('/upgrade/');
    }
}
add_filter('login_redirect', 'membership_based_redirect', 10, 3);</code></pre>

        <h3>Time-Based Redirects</h3>
        <pre><code>// Redirect based on time of day or special events
function time_based_redirect($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    $current_hour = (int)current_time('H');

    // Off-hours redirect for non-admins
    if (!in_array('administrator', $user->roles)) {
        if ($current_hour < 6 || $current_hour > 22) {
            return home_url('/off-hours-message/');
        }
    }

    // Check for active promotion
    $active_promo = get_option('active_promotion', false);
    if ($active_promo && !in_array('administrator', $user->roles)) {
        return home_url('/special-offer/');
    }

    return $redirect_to;
}
add_filter('login_redirect', 'time_based_redirect', 10, 3);</code></pre>

        <h3>WooCommerce Customer Redirect</h3>
        <pre><code>// Redirect WooCommerce customers to My Account page
function woocommerce_login_redirect($redirect_to, $request, $user) {
    // Check if WooCommerce is active
    if (!class_exists('WooCommerce')) {
        return $redirect_to;
    }

    if (isset($user->roles) && is_array($user->roles)) {
        // Keep admins and shop managers on dashboard
        if (in_array('administrator', $user->roles) || in_array('shop_manager', $user->roles)) {
            return admin_url();
        }

        // Redirect customers to My Account page
        if (in_array('customer', $user->roles)) {
            return wc_get_page_permalink('myaccount');
        }
    }

    return $redirect_to;
}
add_filter('login_redirect', 'woocommerce_login_redirect', 10, 3);</code></pre>

        <h3>Prevent Dashboard Access for Non-Admins</h3>
        <pre><code>// Block dashboard access and redirect to homepage
function block_dashboard_access() {
    if (is_admin() && !current_user_can('manage_options') && !(defined('DOING_AJAX') && DOING_AJAX)) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('admin_init', 'block_dashboard_access');</code></pre>

        <h3>Redirect With URL Parameters</h3>
        <pre><code>// Redirect with custom URL parameters for tracking
function redirect_with_parameters($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    // Add parameters to redirect URL
    $redirect_url = home_url('/dashboard/');
    $redirect_url = add_query_arg(array(
        'login' => 'success',
        'user_id' => $user->ID,
        'timestamp' => time()
    ), $redirect_url);

    return $redirect_url;
}
add_filter('login_redirect', 'redirect_with_parameters', 10, 3);</code></pre>

        <h3>Conditional Redirect Based on User Meta</h3>
        <pre><code>// Redirect based on profile completion status
function profile_completion_redirect($redirect_to, $request, $user) {
    if (!isset($user->ID)) {
        return $redirect_to;
    }

    // Check if profile is complete
    $profile_complete = get_user_meta($user->ID, 'profile_complete', true);
    $phone = get_user_meta($user->ID, 'phone', true);
    $bio = get_user_meta($user->ID, 'description', true);

    // If profile is incomplete, redirect to profile page
    if (empty($profile_complete) || empty($phone) || empty($bio)) {
        return admin_url('profile.php?incomplete=true');
    }

    // Profile complete, proceed normally
    return $redirect_to;
}
add_filter('login_redirect', 'profile_completion_redirect', 10, 3);</code></pre>

        <h2>Logout Redirect</h2>
        <pre><code>// Redirect users after logout
function custom_logout_redirect() {
    wp_redirect(home_url('/goodbye/'));
    exit;
}
add_action('wp_logout', 'custom_logout_redirect');</code></pre>

        <h2>Best Practices</h2>
        <table>
          <thead>
            <tr>
              <th>Practice</th>
              <th>Description</th>
              <th>Why It Matters</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><strong>Always Check User Object</strong></td>
              <td>Verify <code>isset($user->ID)</code> before accessing user properties</td>
              <td>Prevents errors during failed login attempts</td>
            </tr>
            <tr>
              <td><strong>Use Capabilities Over Roles</strong></td>
              <td>Check <code>user_can()</code> instead of role names when possible</td>
              <td>More flexible with custom roles and capabilities</td>
            </tr>
            <tr>
              <td><strong>Sanitize Referer URLs</strong></td>
              <td>Validate referer URLs to prevent open redirects</td>
              <td>Security: prevents redirect to malicious sites</td>
            </tr>
            <tr>
              <td><strong>Provide Fallback Redirects</strong></td>
              <td>Always return a default redirect if conditions aren't met</td>
              <td>Ensures users are never stuck without a destination</td>
            </tr>
            <tr>
              <td><strong>Test All User Roles</strong></td>
              <td>Create test accounts for each role and verify redirects</td>
              <td>Ensures correct behavior for all user types</td>
            </tr>
            <tr>
              <td><strong>Consider AJAX Requests</strong></td>
              <td>Check for <code>DOING_AJAX</code> when redirecting from admin_init</td>
              <td>Prevents breaking AJAX functionality</td>
            </tr>
            <tr>
              <td><strong>Log Redirects During Development</strong></td>
              <td>Use error_log() to track redirect decisions</td>
              <td>Helps debug complex conditional logic</td>
            </tr>
            <tr>
              <td><strong>Avoid Infinite Loops</strong></td>
              <td>Ensure redirect destinations don't require re-login</td>
              <td>Prevents users from getting stuck in redirect loops</td>
            </tr>
          </tbody>
        </table>

        <h2>Performance Impact</h2>
        <p><strong>Performance:</strong> Negligible impact. Login redirects execute once per login session, not on every page load. The login_redirect filter runs after authentication, so there's no performance penalty for site visitors. Even complex redirect logic with database queries (checking user meta) adds less than 10ms to login time. For optimal performance, cache complex decisions in user meta rather than recalculating on every login. Avoid making external API calls within redirect logic unless absolutely necessary.</p>
      </div>
    `,
    code: `// Role-based login redirect
function role_based_login_redirect($redirect_to, $request, $user) {
    if (isset($user->roles) && is_array($user->roles)) {
        // Admins go to dashboard
        if (in_array('administrator', $user->roles)) {
            return admin_url();
        }

        // Subscribers go to homepage
        if (in_array('subscriber', $user->roles)) {
            return home_url('/my-account/');
        }
    }

    return home_url();
}
add_filter('login_redirect', 'role_based_login_redirect', 10, 3);`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '7 min',
    category: 'WordPress Users',
    tags: ['Login', 'Redirects', 'UX'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Redirect Users After Login in WordPress - Role-Based & Custom Redirects',
      metaDescription: 'Learn how to redirect users after login in WordPress with role-based redirects, custom URLs, membership levels, and conditional logic for better UX.',
      keywords: ['wordpress login redirect', 'redirect after login wordpress', 'role based redirect', 'login_redirect filter', 'custom login redirect', 'wordpress user redirect', 'membership redirect', 'woocommerce login redirect'],
      canonical: 'https://shahmir.dev/blog/redirect-after-login',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Redirect Users After Login in WordPress',
        description: 'Complete guide to redirecting users after login in WordPress with role-based redirects, custom URLs, and advanced conditional logic.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "How do I redirect users to the page they were trying to access before login?",
        answer: "WordPress automatically handles this through the 'redirect_to' parameter in the login URL. When users try to access a protected page, WordPress adds ?redirect_to=URL to the login form. The login_redirect filter receives this as the $request parameter. To preserve this behavior while adding custom logic, check if $request is set and not empty before applying your redirect: if (!empty($request)) { return $request; }. This ensures users return to their intended destination. For custom implementation, you can also use $_SERVER['HTTP_REFERER'], but validate it to prevent open redirect vulnerabilities."
      },
      {
        question: "Can I redirect different users to different pages based on their subscription status?",
        answer: "Yes, check user meta or membership plugin data within the login_redirect filter. For example, with a custom membership system: $subscription = get_user_meta($user->ID, 'subscription_level', true); then use a switch statement to redirect based on the value. For popular membership plugins like MemberPress or Paid Memberships Pro, check their documentation for specific functions to query membership levels. Example: if (function_exists('pmpro_hasMembershipLevel')) { if (pmpro_hasMembershipLevel(array(1,2,3), $user->ID)) { return home_url('/premium-area/'); } }. Always provide a fallback redirect for users without subscriptions."
      },
      {
        question: "How do I prevent the redirect for administrators while redirecting other roles?",
        answer: "Check for administrator role at the beginning of your redirect function and return early: if (in_array('administrator', $user->roles)) { return $redirect_to; }. This preserves the default WordPress behavior for admins (redirecting to dashboard or requested page) while applying custom redirects to other roles. Alternatively, use capability checks: if (current_user_can('manage_options')) { return $redirect_to; }. The capability approach is more flexible because it works with custom roles that have administrative privileges. Always place admin checks first in your conditional logic to avoid overriding their redirect preferences."
      },
      {
        question: "What's the difference between login_redirect and wp_login actions?",
        answer: "The login_redirect filter is specifically designed for controlling where users go after successful login and receives the redirect URL, requested URL, and user object as parameters. It should return a URL string. The wp_login action hook fires after a user logs in but is meant for executing code (like logging, sending notifications) rather than redirecting. While you can use wp_redirect() within wp_login, it's not the recommended approach because login_redirect is the dedicated mechanism for this purpose and integrates properly with WordPress's redirect flow. Use login_redirect for redirect logic and wp_login for side effects like updating user meta, sending emails, or logging activity."
      },
      {
        question: "How can I redirect users on their first login only?",
        answer: "Use user meta to track first login status. In your redirect function: $first_login = get_user_meta($user->ID, 'first_login', true); if (empty($first_login)) { update_user_meta($user->ID, 'first_login', 'no'); return home_url('/welcome/'); }. This checks if the 'first_login' meta exists, and if not, sets it and redirects to a welcome page. Subsequent logins will have this meta set, so the redirect won't trigger. For more precision, store a timestamp instead of boolean: update_user_meta($user->ID, 'first_login_date', current_time('mysql')). This lets you track exactly when the first login occurred. Consider combining this with profile completion checks to ensure users complete onboarding."
      }
    ]
  },
  {
    id: 46,
    slug: 'show-total-users',
    title: 'Display User Count in WordPress',
    excerpt: 'Create a shortcode to display the total number of registered users on your WordPress site with filtering options by role.',
    content: `
      <h2>Why Display User Count?</h2>
      <p>Showing the total number of users can build social proof, especially for membership sites, communities, and forums. It demonstrates site activity and growth.</p>

      <h3>Basic User Count Snippet</h3>
      <pre><code class="language-php">// Display total user count
function display_user_count() {
    $users = count_users();
    return number_format($users['total_users']);
}
add_shortcode('total_users', 'display_user_count');</code></pre>

      <h3>Usage</h3>
      <p>Add this shortcode anywhere in your content:</p>
      <pre><code class="language-html">We have [total_users] members!</code></pre>

      <h3>Count Users by Role</h3>
      <pre><code class="language-php">// Display user count by specific role
function display_users_by_role($atts) {
    $atts = shortcode_atts(array(
        'role' => 'subscriber',
    ), $atts);

    $users = count_users();
    $role_count = isset($users['avail_roles'][$atts['role']])
        ? $users['avail_roles'][$atts['role']]
        : 0;

    return number_format($role_count);
}
add_shortcode('users_by_role', 'display_users_by_role');

// Usage: [users_by_role role="subscriber"]</code></pre>

      <h3>Advanced: User Growth Stats</h3>
      <pre><code class="language-php">// Show users registered this month
function users_this_month() {
    $args = array(
        'date_query' => array(
            array(
                'after' => '1 month ago',
            ),
        ),
        'fields' => 'ID',
    );

    $user_query = new WP_User_Query($args);
    return number_format($user_query->get_total());
}
add_shortcode('users_this_month', 'users_this_month');</code></pre>

      <h3>Display with Custom HTML</h3>
      <pre><code class="language-php">// User count with custom formatting
function formatted_user_count() {
    $users = count_users();
    $total = $users['total_users'];

    $output = '&lt;div class="user-stats"&gt;';
    $output .= '&lt;span class="user-count"&gt;' . number_format($total) . '&lt;/span&gt;';
    $output .= '&lt;span class="user-label"&gt;Active Members&lt;/span&gt;';
    $output .= '&lt;/div&gt;';

    return $output;
}
add_shortcode('user_stats', 'formatted_user_count');</code></pre>

      <h3>Use Cases</h3>
      <ul>
        <li><strong>Membership Sites:</strong> Show community size</li>
        <li><strong>Forums:</strong> Display active member count</li>
        <li><strong>Social Proof:</strong> Build credibility</li>
        <li><strong>Course Platforms:</strong> Show student enrollment</li>
      </ul>
    `,
    code: `function display_user_count() {
    $users = count_users();
    return number_format($users['total_users']);
}
add_shortcode('total_users', 'display_user_count');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '4 min',
    category: 'WordPress Users',
    tags: ['Users', 'Shortcodes', 'Statistics'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Display User Count in WordPress - Total Members Shortcode',
      metaDescription: 'Show the total number of registered users on your WordPress site with shortcodes. Filter by role, display growth stats, and build social proof.',
      keywords: ['wordpress user count', 'display total users', 'member count shortcode', 'count_users wordpress', 'user statistics', 'membership count'],
      canonical: 'https://shahmir.dev/blog/show-total-users',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Display User Count in WordPress',
        description: 'Create shortcodes to display total registered users with role filtering and custom formatting.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Does count_users() include all user roles?",
        answer: "Yes, count_users() returns the total count of all registered users regardless of role, plus a breakdown by individual roles in the 'avail_roles' array. The function queries the database efficiently using a single query to count users."
      },
      {
        question: "Will displaying user count slow down my site?",
        answer: "The count_users() function is optimized and uses database counting rather than retrieving all user objects. However, on sites with millions of users, consider caching the result using transients to avoid running the count on every page load."
      },
      {
        question: "How can I exclude certain roles from the total count?",
        answer: "Use WP_User_Query with role__not_in parameter: new WP_User_Query(array('role__not_in' => array('administrator', 'editor'), 'fields' => 'ID')). Then use get_total() method to get the count."
      },
      {
        question: "Can I display the user count in my theme without a shortcode?",
        answer: "Yes, call the function directly in your theme template: &lt;?php echo display_user_count(); ?&gt; or use count_users() directly: &lt;?php $users = count_users(); echo $users['total_users']; ?&gt;"
      },
      {
        question: "How do I show user count with animated numbers?",
        answer: "Use JavaScript libraries like CountUp.js. Output the count in a data attribute: &lt;span class='counter' data-count='&lt;?php echo display_user_count(); ?&gt;'&gt;0&lt;/span&gt; and animate with JavaScript on page load."
      }
    ]
  },
  {
    id: 47,
    slug: 'last-login-time',
    title: 'Track User Last Login Time in WordPress',
    excerpt: 'Record and display the last login time for WordPress users. Perfect for membership sites and user activity monitoring.',
    content: `
      <h2>Why Track Last Login Time?</h2>
      <p>Monitoring user login activity helps identify inactive accounts, track engagement, and maintain site security. It's essential for membership sites and community platforms.</p>

      <h3>Basic Login Tracking Snippet</h3>
      <pre><code class="language-php">// Track last login time
function track_last_login($user_login, $user) {
    update_user_meta($user->ID, 'last_login', current_time('mysql'));
}
add_action('wp_login', 'track_last_login', 10, 2);</code></pre>

      <h3>Display Last Login in User Profile</h3>
      <pre><code class="language-php">// Show last login in user profile
function show_last_login_profile($user) {
    $last_login = get_user_meta($user->ID, 'last_login', true);

    if ($last_login) {
        $formatted_date = date('F j, Y g:i a', strtotime($last_login));
        echo '&lt;h3&gt;Last Login&lt;/h3&gt;';
        echo '&lt;table class="form-table"&gt;';
        echo '&lt;tr&gt;&lt;th&gt;Last Login:&lt;/th&gt;';
        echo '&lt;td&gt;' . $formatted_date . '&lt;/td&gt;&lt;/tr&gt;';
        echo '&lt;/table&gt;';
    }
}
add_action('show_user_profile', 'show_last_login_profile');
add_action('edit_user_profile', 'show_last_login_profile');</code></pre>

      <h3>Add Last Login Column to Users List</h3>
      <pre><code class="language-php">// Add last login column
function add_last_login_column($columns) {
    $columns['last_login'] = 'Last Login';
    return $columns;
}
add_filter('manage_users_columns', 'add_last_login_column');

// Populate last login column
function show_last_login_column($value, $column_name, $user_id) {
    if ('last_login' === $column_name) {
        $last_login = get_user_meta($user_id, 'last_login', true);

        if ($last_login) {
            return human_time_diff(strtotime($last_login)) . ' ago';
        }
        return 'Never';
    }
    return $value;
}
add_filter('manage_users_custom_column', 'show_last_login_column', 10, 3);

// Make column sortable
function make_last_login_sortable($columns) {
    $columns['last_login'] = 'last_login';
    return $columns;
}
add_filter('manage_users_sortable_columns', 'make_last_login_sortable');</code></pre>

      <h3>Find Inactive Users</h3>
      <pre><code class="language-php">// Get users inactive for 30+ days
function get_inactive_users($days = 30) {
    $args = array(
        'meta_query' => array(
            array(
                'key' => 'last_login',
                'value' => date('Y-m-d H:i:s', strtotime("-$days days")),
                'compare' => '&lt;',
                'type' => 'DATETIME'
            )
        )
    );

    return get_users($args);
}

// Display inactive users count
function show_inactive_users_count() {
    $inactive = get_inactive_users(30);
    return count($inactive) . ' users inactive for 30+ days';
}
add_shortcode('inactive_users', 'show_inactive_users_count');</code></pre>

      <h3>Send Email Reminders to Inactive Users</h3>
      <pre><code class="language-php">// Email inactive users
function email_inactive_users() {
    $inactive_users = get_inactive_users(90);

    foreach ($inactive_users as $user) {
        $to = $user->user_email;
        $subject = "We miss you at " . get_bloginfo('name');
        $message = "Hi " . $user->display_name . ",\n\n";
        $message .= "We noticed you haven't logged in for a while. ";
        $message .= "Come back and see what's new!\n\n";
        $message .= wp_login_url();

        wp_mail($to, $subject, $message);
    }
}
// Schedule this function with wp-cron or call manually</code></pre>

      <h3>Benefits</h3>
      <ul>
        <li><strong>Security:</strong> Identify compromised accounts</li>
        <li><strong>Engagement:</strong> Re-engage inactive users</li>
        <li><strong>Analytics:</strong> Track user activity patterns</li>
        <li><strong>Cleanup:</strong> Remove truly inactive accounts</li>
      </ul>
    `,
    code: `function track_last_login($user_login, $user) {
    update_user_meta($user->ID, 'last_login', current_time('mysql'));
}
add_action('wp_login', 'track_last_login', 10, 2);`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WordPress Users',
    tags: ['Users', 'Login', 'Tracking'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Track User Last Login Time in WordPress - Activity Monitoring',
      metaDescription: 'Learn how to track and display user last login time in WordPress. Monitor user activity, find inactive accounts, and improve engagement.',
      keywords: ['wordpress track login', 'last login time', 'user activity tracking', 'monitor user logins', 'inactive users wordpress', 'wp_login hook'],
      canonical: 'https://shahmir.dev/blog/last-login-time',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Track User Last Login Time in WordPress',
        description: 'Complete guide to tracking and displaying user last login time with custom columns, profile fields, and inactive user detection.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Does tracking login time work with social login plugins?",
        answer: "Yes, as long as the social login plugin triggers the wp_login action hook. Most popular plugins like Nextend Social Login and Super Socializer fire this hook. If tracking doesn't work, check the plugin's documentation for custom hooks you may need to use instead."
      },
      {
        question: "How can I track login attempts, not just successful logins?",
        answer: "Use the wp_login_failed action hook to track failed attempts: add_action('wp_login_failed', 'track_failed_login'); This lets you monitor suspicious activity like brute force attacks. Store failed attempts in user meta with timestamps and IP addresses for security auditing."
      },
      {
        question: "Can I show last login time to the user on frontend?",
        answer: "Yes, create a shortcode or add to your account dashboard: $last_login = get_user_meta(get_current_user_id(), 'last_login', true); if ($last_login) { echo 'Last login: ' . human_time_diff(strtotime($last_login)) . ' ago'; }. This improves user awareness of account activity."
      },
      {
        question: "Will this work if users are already logged in via remember me?",
        answer: "No, wp_login only fires during active login. If users stay logged in via cookies (remember me), they won't trigger the hook. Consider also hooking into 'init' to update a 'last_seen' timestamp on every page load for more accurate activity tracking."
      },
      {
        question: "How do I delete inactive users automatically?",
        answer: "Create a scheduled cron job: $inactive = get_inactive_users(365); // 1 year inactive. Then loop through and use wp_delete_user($user->ID). IMPORTANT: Always backup first and notify users before deletion. Better approach is to deactivate accounts first, then delete after another warning period."
      }
    ]
  },
  {
    id: 48,
    slug: 'custom-avatar',
    title: 'Set Custom Default Avatar in WordPress',
    excerpt: 'Replace the default WordPress avatar (Gravatar) with a custom image for users without profile pictures.',
    content: `
      <h2>Why Customize Default Avatars?</h2>
      <p>The default WordPress mystery person avatar can look unprofessional. A custom default avatar matching your brand improves visual consistency across your site.</p>

      <h3>Basic Custom Avatar Snippet</h3>
      <pre><code class="language-php">// Set custom default avatar
function custom_default_avatar($avatar_defaults) {
    $custom_avatar = get_stylesheet_directory_uri() . '/images/default-avatar.png';
    $avatar_defaults[$custom_avatar] = 'Custom Default Avatar';
    return $avatar_defaults;
}
add_filter('avatar_defaults', 'custom_default_avatar');</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Upload your custom avatar image to /wp-content/themes/your-theme/images/</li>
        <li>Add the code snippet to functions.php</li>
        <li>Go to Settings → Discussion in WordPress admin</li>
        <li>Select your custom avatar from the Default Avatar dropdown</li>
        <li>Save changes</li>
      </ol>

      <h3>Force Custom Avatar for All Users</h3>
      <pre><code class="language-php">// Override Gravatar with custom avatar
function force_custom_avatar($avatar, $id_or_email, $size, $default, $alt) {
    $custom_avatar_url = get_stylesheet_directory_uri() . '/images/default-avatar.png';
    $avatar = "&lt;img alt='{$alt}' src='{$custom_avatar_url}' class='avatar avatar-{$size}' height='{$size}' width='{$size}' /&gt;";
    return $avatar;
}
add_filter('get_avatar', 'force_custom_avatar', 10, 5);</code></pre>

      <h3>Different Avatars by User Role</h3>
      <pre><code class="language-php">// Role-based default avatars
function role_based_avatars($avatar, $id_or_email, $size, $default, $alt) {
    // Get user data
    $user = false;

    if (is_numeric($id_or_email)) {
        $user = get_user_by('id', $id_or_email);
    } elseif (is_object($id_or_email)) {
        if (!empty($id_or_email->user_id)) {
            $user = get_user_by('id', $id_or_email->user_id);
        }
    } else {
        $user = get_user_by('email', $id_or_email);
    }

    if ($user && is_object($user)) {
        // Check if user has Gravatar
        $has_gravatar = validate_gravatar($user->user_email);

        if (!$has_gravatar) {
            $theme_dir = get_stylesheet_directory_uri();

            if (in_array('administrator', $user->roles)) {
                $avatar_url = $theme_dir . '/images/admin-avatar.png';
            } elseif (in_array('editor', $user->roles)) {
                $avatar_url = $theme_dir . '/images/editor-avatar.png';
            } else {
                $avatar_url = $theme_dir . '/images/default-avatar.png';
            }

            $avatar = "&lt;img alt='{$alt}' src='{$avatar_url}' class='avatar avatar-{$size}' height='{$size}' width='{$size}' /&gt;";
        }
    }

    return $avatar;
}
add_filter('get_avatar', 'role_based_avatars', 10, 5);

// Helper function to check if user has Gravatar
function validate_gravatar($email) {
    $hash = md5(strtolower(trim($email)));
    $uri = 'http://www.gravatar.com/avatar/' . $hash . '?d=404';
    $headers = @get_headers($uri);

    if (!preg_match("|200|", $headers[0])) {
        return false;
    }
    return true;
}</code></pre>

      <h3>SVG Avatars by User Initial</h3>
      <pre><code class="language-php">// Generate SVG avatar with user initial
function generate_initial_avatar($avatar, $id_or_email, $size) {
    $user = false;

    if (is_numeric($id_or_email)) {
        $user = get_user_by('id', $id_or_email);
    } elseif (is_string($id_or_email)) {
        $user = get_user_by('email', $id_or_email);
    }

    if ($user) {
        $initial = strtoupper(substr($user->display_name, 0, 1));
        $background_color = sprintf('#%06X', mt_rand(0, 0xFFFFFF));

        $svg = "&lt;svg width='{$size}' height='{$size}' xmlns='http://www.w3.org/2000/svg'&gt;";
        $svg .= "&lt;rect fill='{$background_color}' width='{$size}' height='{$size}'/&gt;";
        $svg .= "&lt;text fill='white' font-size='" . ($size/2) . "' x='50%' y='50%' ";
        $svg .= "text-anchor='middle' dominant-baseline='central'&gt;{$initial}&lt;/text&gt;";
        $svg .= "&lt;/svg&gt;";

        $avatar = 'data:image/svg+xml;base64,' . base64_encode($svg);
        return "&lt;img src='{$avatar}' class='avatar' width='{$size}' height='{$size}' /&gt;";
    }

    return $avatar;
}
add_filter('get_avatar', 'generate_initial_avatar', 10, 3);</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Use square images (e.g., 256×256px)</li>
        <li>Optimize images for web (PNG or JPG under 50KB)</li>
        <li>Consider using SVG for scalability</li>
        <li>Match your brand colors and style</li>
        <li>Test avatars at different sizes</li>
      </ul>
    `,
    code: `function custom_default_avatar($avatar_defaults) {
    $custom_avatar = get_stylesheet_directory_uri() . '/images/default-avatar.png';
    $avatar_defaults[$custom_avatar] = 'Custom Default Avatar';
    return $avatar_defaults;
}
add_filter('avatar_defaults', 'custom_default_avatar');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '5 min',
    category: 'WordPress Users',
    tags: ['Avatars', 'Gravatar', 'Users'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 2.5+',
    seo: {
      metaTitle: 'Custom Default Avatar in WordPress - Replace Gravatar Default',
      metaDescription: 'Learn how to set a custom default avatar in WordPress to replace the generic Gravatar. Role-based avatars, SVG initials, and more.',
      keywords: ['wordpress custom avatar', 'default avatar wordpress', 'replace gravatar', 'custom default avatar', 'avatar_defaults filter', 'wordpress profile picture'],
      canonical: 'https://shahmir.dev/blog/custom-avatar',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Set Custom Default Avatar in WordPress',
        description: 'Replace default WordPress avatars with custom images, role-based avatars, or generated SVG initials for better branding.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WordPress 2.5+'
      }
    },
    faqs: [
      {
        question: "What's the difference between avatar_defaults and get_avatar filters?",
        answer: "avatar_defaults adds your custom avatar as an option in Settings → Discussion, giving admins a choice. get_avatar completely overrides the avatar display logic and forces your custom avatar. Use avatar_defaults for flexibility, get_avatar for complete control."
      },
      {
        question: "Can I use different avatars for men and women?",
        answer: "WordPress doesn't store gender information by default. You'd need to add a custom user meta field for gender, then check that in your get_avatar filter to return different avatars. Alternatively, let users choose their preferred default avatar style in their profile."
      },
      {
        question: "Will custom avatars show in email notifications?",
        answer: "It depends on how emails are generated. WordPress core emails don't include avatars. Plugins that do (like bbPress or BuddyPress) typically use get_avatar(), so your custom avatars will appear if you're using the get_avatar filter."
      },
      {
        question: "How do I disable Gravatar completely?",
        answer: "Uncheck 'Show Avatars' in Settings → Discussion, or use remove_filter('get_avatar', 'get_avatar', 10, 5); This prevents external Gravatar requests, improving privacy and page load time. Then implement your custom avatar system."
      },
      {
        question: "Can users upload their own avatar without Gravatar?",
        answer: "WordPress core doesn't support local avatar uploads. Use plugins like 'Simple Local Avatars' or 'WP User Avatar'. These add upload fields to user profiles and integrate seamlessly with get_avatar()."
      }
    ]
  },
  {
    id: 49,
    slug: 'prevent-admin-access',
    title: 'Restrict Dashboard Access by Role in WordPress',
    excerpt: 'Prevent specific user roles from accessing the WordPress admin dashboard while keeping full frontend functionality.',
    content: `
      <h2>Why Restrict Dashboard Access?</h2>
      <p>Not all users need admin dashboard access. Subscribers, customers, and members should stay on the frontend for better UX and security. This prevents confusion and unauthorized configuration changes.</p>

      <h3>Basic Dashboard Restriction</h3>
      <pre><code class="language-php">// Redirect non-admins away from dashboard
function restrict_admin_access() {
    if (!current_user_can('edit_posts') && !wp_doing_ajax()) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('admin_init', 'restrict_admin_access');</code></pre>

      <h3>Role-Based Restrictions</h3>
      <pre><code class="language-php">// Restrict specific roles from dashboard
function restrict_dashboard_by_role() {
    $user = wp_get_current_user();
    $restricted_roles = array('subscriber', 'customer', 'member');

    if (array_intersect($restricted_roles, $user->roles) && !wp_doing_ajax()) {
        wp_redirect(home_url('/my-account/'));
        exit;
    }
}
add_action('admin_init', 'restrict_dashboard_by_role');</code></pre>

      <h3>Custom Redirect URLs by Role</h3>
      <pre><code class="language-php">// Redirect different roles to different pages
function role_based_admin_redirect() {
    if (wp_doing_ajax()) {
        return;
    }

    $user = wp_get_current_user();
    $redirect_url = '';

    if (in_array('subscriber', $user->roles)) {
        $redirect_url = home_url('/dashboard/');
    } elseif (in_array('customer', $user->roles)) {
        $redirect_url = home_url('/my-orders/');
    } elseif (in_array('member', $user->roles)) {
        $redirect_url = home_url('/member-area/');
    }

    if ($redirect_url && !current_user_can('edit_posts')) {
        wp_redirect($redirect_url);
        exit;
    }
}
add_action('admin_init', 'role_based_admin_redirect');</code></pre>

      <h3>Hide Admin Bar for Restricted Users</h3>
      <pre><code class="language-php">// Hide admin bar for users without dashboard access
function hide_admin_bar_from_restricted_users() {
    if (!current_user_can('edit_posts')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'hide_admin_bar_from_restricted_users');</code></pre>

      <h3>Allow Specific Admin Pages</h3>
      <pre><code class="language-php">// Allow profile.php but block other admin pages
function allow_profile_page_only() {
    $allowed_pages = array('profile.php', 'admin-ajax.php');
    $current_page = basename($_SERVER['PHP_SELF']);

    if (!current_user_can('edit_posts')
        && !in_array($current_page, $allowed_pages)
        && !wp_doing_ajax()) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('admin_init', 'allow_profile_page_only');</code></pre>

      <h3>Complete Restriction with Custom Message</h3>
      <pre><code class="language-php">// Show custom error message before redirect
function restrict_admin_with_message() {
    if (!current_user_can('edit_posts') && !wp_doing_ajax()) {
        $message = 'You do not have permission to access the dashboard.';
        wp_die($message, 'Restricted Access', array(
            'response' => 403,
            'back_link' => true,
            'link_url' => home_url(),
            'link_text' => 'Return to Homepage'
        ));
    }
}
add_action('admin_init', 'restrict_admin_with_message');</code></pre>

      <h3>Disable Admin Bar CSS for Performance</h3>
      <pre><code class="language-php">// Remove admin bar CSS for restricted users
function remove_admin_bar_styles() {
    if (!current_user_can('edit_posts')) {
        remove_action('wp_head', '_admin_bar_bump_cb');
    }
}
add_action('get_header', 'remove_admin_bar_styles');</code></pre>

      <h3>Use Cases</h3>
      <ul>
        <li><strong>WooCommerce:</strong> Keep customers on My Account page</li>
        <li><strong>Membership Sites:</strong> Redirect members to custom dashboard</li>
        <li><strong>Forums:</strong> Keep forum users on frontend</li>
        <li><strong>Course Platforms:</strong> Direct students to learning dashboard</li>
      </ul>

      <h3>Important Notes</h3>
      <ul>
        <li>Always check !wp_doing_ajax() to prevent breaking AJAX requests</li>
        <li>Allow access to profile.php if users need to edit their profiles</li>
        <li>Hide admin bar to prevent confusion</li>
        <li>Create custom frontend dashboards for better UX</li>
      </ul>
    `,
    code: `function restrict_admin_access() {
    if (!current_user_can('edit_posts') && !wp_doing_ajax()) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('admin_init', 'restrict_admin_access');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WordPress Users',
    tags: ['Security', 'Users', 'Dashboard'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Restrict WordPress Dashboard Access by User Role - Code Snippet',
      metaDescription: 'Prevent subscribers and customers from accessing WordPress admin dashboard. Role-based restrictions with custom redirects for better security and UX.',
      keywords: ['restrict wordpress dashboard', 'prevent admin access', 'block dashboard by role', 'wordpress user permissions', 'admin_init hook', 'redirect non-admin users'],
      canonical: 'https://shahmir.dev/blog/prevent-admin-access',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Restrict Dashboard Access by Role in WordPress',
        description: 'Complete guide to preventing specific user roles from accessing the WordPress admin dashboard with custom redirects and restrictions.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "Will restricting dashboard access prevent users from editing their profiles?",
        answer: "Yes, if you redirect all admin pages. To allow profile editing, either: 1) Add profile.php to the allowed pages array, 2) Create a frontend profile editing form using plugins like WP User Frontend, or 3) Check if current page is profile.php before redirecting."
      },
      {
        question: "How do I restrict dashboard access for WooCommerce customers?",
        answer: "Use the code snippet with 'customer' role: if (in_array('customer', $user->roles)) { wp_redirect(wc_get_page_permalink('myaccount')); exit; }. This redirects customers to their My Account page. WooCommerce also has a built-in setting under WooCommerce → Settings → Accounts to disable dashboard access."
      },
      {
        question: "What does wp_doing_ajax() check prevent?",
        answer: "Many plugins and themes use admin-ajax.php for AJAX requests on the frontend. If you redirect all admin access without checking wp_doing_ajax(), you'll break these requests. The check ensures AJAX calls work even for restricted users."
      },
      {
        question: "Can I restrict access to specific admin pages instead of the entire dashboard?",
        answer: "Yes, check the current admin page: global $pagenow; if (!current_user_can('manage_options') && $pagenow === 'tools.php') { wp_redirect(admin_url()); }. This example blocks the Tools page for non-administrators while allowing other admin pages."
      },
      {
        question: "How do I create a custom frontend dashboard for restricted users?",
        answer: "Create a custom page template with shortcodes or custom queries to display user-specific content. Popular plugins like Ultimate Member, BuddyPress, or WooCommerce provide frontend dashboards. You can also build custom dashboards using get_current_user_id() to display personalized content, recent orders, profile info, etc."
      }
    ]
  },
  {
    id: 50,
    slug: 'auto-logout-users',
    title: 'Auto Logout Inactive Users in WordPress',
    excerpt: 'Automatically log out users after a period of inactivity for enhanced security. Perfect for membership sites and secure environments.',
    content: `
      <h2>Why Auto Logout Inactive Users?</h2>
      <p>Auto logout protects user accounts from unauthorized access when users forget to log out, especially on shared computers. It's essential for financial sites, membership platforms, and any site handling sensitive data.</p>

      <h3>Basic Auto Logout Snippet</h3>
      <pre><code class="language-php">// Auto logout after 15 minutes of inactivity
function auto_logout_inactive_users() {
    $timeout = 900; // 15 minutes in seconds

    if (is_user_logged_in()) {
        $last_activity = get_user_meta(get_current_user_id(), 'last_activity', true);

        if ($last_activity && (time() - $last_activity) > $timeout) {
            wp_logout();
            wp_redirect(home_url('/session-expired/'));
            exit;
        }

        update_user_meta(get_current_user_id(), 'last_activity', time());
    }
}
add_action('init', 'auto_logout_inactive_users');</code></pre>

      <h3>JavaScript-Based Timeout Warning</h3>
      <pre><code class="language-php">// Show warning before auto logout
function auto_logout_with_warning() {
    if (!is_user_logged_in()) {
        return;
    }
    ?&gt;
    &lt;script type="text/javascript"&gt;
    let inactivityTime = function () {
        let time;
        let warningTime = 840000; // 14 minutes (warning 1 min before logout)
        let logoutTime = 900000; // 15 minutes

        // Reset timer on user activity
        window.onload = resetTimer;
        document.onmousemove = resetTimer;
        document.onkeypress = resetTimer;
        document.onclick = resetTimer;
        document.onscroll = resetTimer;

        function showWarning() {
            alert('You will be logged out due to inactivity in 1 minute.');
        }

        function logout() {
            window.location.href = '&lt;?php echo wp_logout_url(home_url('/session-expired/')); ?&gt;';
        }

        function resetTimer() {
            clearTimeout(time);
            time = setTimeout(showWarning, warningTime);
            setTimeout(logout, logoutTime);
        }
    };

    inactivityTime();
    &lt;/script&gt;
    &lt;?php
}
add_action('wp_footer', 'auto_logout_with_warning');</code></pre>

      <h3>Role-Based Timeout Durations</h3>
      <pre><code class="language-php">// Different timeout for different roles
function role_based_auto_logout() {
    if (!is_user_logged_in()) {
        return;
    }

    $user = wp_get_current_user();
    $last_activity = get_user_meta($user->ID, 'last_activity', true);

    // Set timeout based on role
    if (in_array('administrator', $user->roles)) {
        $timeout = 3600; // 1 hour for admins
    } elseif (in_array('editor', $user->roles)) {
        $timeout = 1800; // 30 minutes for editors
    } else {
        $timeout = 900; // 15 minutes for others
    }

    if ($last_activity && (time() - $last_activity) > $timeout) {
        wp_logout();
        $redirect = add_query_arg('session_expired', '1', wp_login_url());
        wp_redirect($redirect);
        exit;
    }

    update_user_meta($user->ID, 'last_activity', time());
}
add_action('init', 'role_based_auto_logout');</code></pre>

      <h3>Session Expired Message</h3>
      <pre><code class="language-php">// Display message on login page after auto logout
function session_expired_message() {
    if (isset($_GET['session_expired'])) {
        return '&lt;p class="message"&gt;Your session has expired due to inactivity. Please log in again.&lt;/p&gt;';
    }
}
add_filter('login_message', 'session_expired_message');</code></pre>

      <h3>AJAX Heartbeat Method</h3>
      <pre><code class="language-php">// Use WordPress Heartbeat API for activity tracking
function heartbeat_auto_logout($response, $data) {
    if (is_user_logged_in()) {
        $timeout = 900; // 15 minutes
        $last_activity = get_user_meta(get_current_user_id(), 'last_activity', true);

        if ($last_activity && (time() - $last_activity) > $timeout) {
            $response['heartbeat_logout'] = true;
        } else {
            update_user_meta(get_current_user_id(), 'last_activity', time());
        }
    }

    return $response;
}
add_filter('heartbeat_received', 'heartbeat_auto_logout', 10, 2);

// Handle logout on frontend
function heartbeat_logout_script() {
    if (!is_user_logged_in()) {
        return;
    }
    ?&gt;
    &lt;script type="text/javascript"&gt;
    jQuery(document).on('heartbeat-tick', function(e, data) {
        if (data.heartbeat_logout) {
            window.location.href = '&lt;?php echo wp_logout_url(home_url()); ?&gt;';
        }
    });
    &lt;/script&gt;
    &lt;?php
}
add_action('wp_footer', 'heartbeat_logout_script');</code></pre>

      <h3>Extend Session on Activity</h3>
      <pre><code class="language-php">// Extend WordPress auth cookie on activity
function extend_session_on_activity() {
    if (is_user_logged_in()) {
        $expiration = time() + 900; // 15 minutes from now
        $user_id = get_current_user_id();

        // Set new auth cookie
        wp_set_auth_cookie($user_id, true);
    }
}
add_action('init', 'extend_session_on_activity');</code></pre>

      <h3>Security Best Practices</h3>
      <ul>
        <li><strong>Shorter timeouts for sensitive pages:</strong> 5-10 minutes for banking, healthcare</li>
        <li><strong>Warning before logout:</strong> Give users chance to extend session</li>
        <li><strong>Clear session data:</strong> Remove sensitive data on logout</li>
        <li><strong>Log logout events:</strong> Track security incidents</li>
        <li><strong>AJAX-based checking:</strong> More accurate than page-load checks</li>
      </ul>

      <h3>Recommended Timeout Durations</h3>
      <table>
        <thead>
          <tr>
            <th>Site Type</th>
            <th>Recommended Timeout</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Banking/Financial</td>
            <td>5-10 minutes</td>
          </tr>
          <tr>
            <td>Healthcare/HIPAA</td>
            <td>10-15 minutes</td>
          </tr>
          <tr>
            <td>E-commerce</td>
            <td>30-60 minutes</td>
          </tr>
          <tr>
            <td>Membership Sites</td>
            <td>30 minutes - 2 hours</td>
          </tr>
          <tr>
            <td>Admin Dashboard</td>
            <td>1-4 hours</td>
          </tr>
        </tbody>
      </table>
    `,
    code: `function auto_logout_inactive_users() {
    $timeout = 900; // 15 minutes

    if (is_user_logged_in()) {
        $last_activity = get_user_meta(get_current_user_id(), 'last_activity', true);

        if ($last_activity && (time() - $last_activity) > $timeout) {
            wp_logout();
            wp_redirect(home_url('/session-expired/'));
            exit;
        }

        update_user_meta(get_current_user_id(), 'last_activity', time());
    }
}
add_action('init', 'auto_logout_inactive_users');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '7 min',
    category: 'WordPress Users',
    tags: ['Security', 'Sessions', 'Users'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'Auto Logout Inactive Users in WordPress - Session Timeout Code',
      metaDescription: 'Automatically log out inactive WordPress users for better security. Implement session timeouts, warnings, and role-based durations.',
      keywords: ['wordpress auto logout', 'session timeout wordpress', 'inactive user logout', 'wordpress security timeout', 'auto logout code', 'session expiration'],
      canonical: 'https://shahmir.dev/blog/auto-logout-users',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Auto Logout Inactive Users in WordPress',
        description: 'Complete guide to implementing automatic logout for inactive users with warnings, role-based timeouts, and session management.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "What's the difference between activity tracking and WordPress session duration?",
        answer: "WordPress sessions (auth cookies) have an expiration set at login (default 14 days with 'remember me', 2 days without). Activity tracking monitors actual user interaction and can log out users before the session expires. You need both: WordPress handles session validity, your code handles inactivity timeout."
      },
      {
        question: "Will auto logout break functionality for users with multiple tabs open?",
        answer: "The basic implementation tracks activity across all tabs since user meta is shared. However, if one tab times out and logs out, other tabs will show errors. Use the Heartbeat API method to sync logout across all tabs simultaneously, or update last_activity on any tab's activity."
      },
      {
        question: "How can I prevent logout while users are watching videos or reading long content?",
        answer: "Use JavaScript to detect scroll events, video play events, or mouse movements to reset the timer. For video specifically: document.querySelector('video').addEventListener('playing', resetTimer). For reading, reset timer on scroll: window.addEventListener('scroll', resetTimer)."
      },
      {
        question: "Is it better to use JavaScript or PHP for auto logout?",
        answer: "Both have advantages. JavaScript provides immediate feedback and warnings without page reload, but can be bypassed. PHP is more secure but only checks on page loads. Best practice: use JavaScript for UX (warnings, countdowns) and PHP for actual security enforcement (logout and session cleanup)."
      },
      {
        question: "How do I comply with PCI DSS requirements for payment sites?",
        answer: "PCI DSS requires 15-minute maximum session timeout for cardholder data environments. Use the 900-second (15-minute) timeout from the code above, ensure it cannot be overridden, log all timeout events, and destroy all session data on timeout. Also implement re-authentication for sensitive operations."
      }
    ]
  },
  {
    id: 51,
    slug: 'hide-prices-not-logged-in',
    title: 'Hide WooCommerce Prices for Non-Logged Users',
    excerpt: 'Hide product prices and add to cart buttons for visitors who are not logged in. Perfect for wholesale stores and B2B sites.',
    content: `
      <h2>Why Hide Prices for Non-Logged Users?</h2>
      <p>Many WooCommerce stores need to hide pricing from visitors, especially B2B stores, wholesale sites, membership-based shops, or premium product catalogs. This encourages user registration and helps protect pricing strategies from competitors.</p>

      <h3>Basic Hide Prices Snippet</h3>
      <pre><code class="language-php">// Hide prices for non-logged users
function hide_prices_for_guests() {
    if (!is_user_logged_in()) {
        // Remove price from product pages
        remove_action('woocommerce_single_product_summary', 'woocommerce_template_single_price', 10);

        // Remove price from loops
        remove_action('woocommerce_after_shop_loop_item_title', 'woocommerce_template_loop_price', 10);

        // Remove add to cart button
        remove_action('woocommerce_single_product_summary', 'woocommerce_template_single_add_to_cart', 30);
        remove_action('woocommerce_after_shop_loop_item', 'woocommerce_template_loop_add_to_cart', 10);
    }
}
add_action('after_setup_theme', 'hide_prices_for_guests');</code></pre>

      <h3>Replace Price with Custom Message</h3>
      <pre><code class="language-php">// Show login message instead of price
function replace_price_with_login_message($price, $product) {
    if (!is_user_logged_in()) {
        $login_url = wp_login_url(get_permalink());
        return '&lt;a href="' . $login_url . '" class="login-to-see-price"&gt;Login to see prices&lt;/a&gt;';
    }
    return $price;
}
add_filter('woocommerce_get_price_html', 'replace_price_with_login_message', 10, 2);</code></pre>

      <h3>Role-Based Price Visibility</h3>
      <pre><code class="language-php">// Hide prices from specific user roles
function hide_prices_by_role($price, $product) {
    if (!is_user_logged_in()) {
        return '&lt;span class="guest-price-notice"&gt;Login to view pricing&lt;/span&gt;';
    }

    $user = wp_get_current_user();
    $allowed_roles = array('customer', 'wholesale_customer', 'administrator');

    if (!array_intersect($allowed_roles, $user->roles)) {
        return '&lt;span class="restricted-price-notice"&gt;Contact us for pricing&lt;/span&gt;';
    }

    return $price;
}
add_filter('woocommerce_get_price_html', 'hide_prices_by_role', 10, 2);</code></pre>

      <h3>Hide Prices for Specific Categories</h3>
      <pre><code class="language-php">// Hide prices for products in specific categories
function hide_prices_by_category($price, $product) {
    if (!is_user_logged_in()) {
        $terms = get_the_terms($product->get_id(), 'product_cat');
        $hide_categories = array('wholesale', 'bulk-orders', 'premium');

        if ($terms) {
            foreach ($terms as $term) {
                if (in_array($term->slug, $hide_categories)) {
                    return '&lt;a href="' . wp_login_url() . '"&gt;Login to see price&lt;/a&gt;';
                }
            }
        }
    }
    return $price;
}
add_filter('woocommerce_get_price_html', 'hide_prices_by_category', 10, 2);</code></pre>

      <h3>Add Custom Registration Link</h3>
      <pre><code class="language-php">// Show register and login links
function add_registration_message_to_products() {
    if (!is_user_logged_in()) {
        $login_url = wp_login_url(get_permalink());
        $register_url = wp_registration_url();

        echo '&lt;div class="woocommerce-guest-notice"&gt;';
        echo '&lt;p&gt;&lt;strong&gt;Want to see prices?&lt;/strong&gt;&lt;/p&gt;';
        echo '&lt;p&gt;&lt;a href="' . $login_url . '" class="button"&gt;Login&lt;/a&gt; ';
        echo '&lt;a href="' . $register_url . '" class="button"&gt;Register&lt;/a&gt;&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
add_action('woocommerce_single_product_summary', 'add_registration_message_to_products', 31);</code></pre>

      <h3>Prevent Cart Access for Guests</h3>
      <pre><code class="language-php">// Redirect guests away from cart and checkout
function restrict_cart_for_guests() {
    if (!is_user_logged_in()) {
        if (is_cart() || is_checkout()) {
            wp_redirect(wp_login_url(wc_get_page_permalink('shop')));
            exit;
        }
    }
}
add_action('template_redirect', 'restrict_cart_for_guests');</code></pre>

      <h3>Implementation Best Practices</h3>
      <ul>
        <li><strong>Clear messaging:</strong> Tell users why they can't see prices</li>
        <li><strong>Easy registration:</strong> Provide prominent login/register buttons</li>
        <li><strong>SEO consideration:</strong> Use CSS to hide prices but keep in HTML for bots</li>
        <li><strong>Mobile friendly:</strong> Ensure messages display well on mobile</li>
        <li><strong>Email capture:</strong> Consider requiring email before showing prices</li>
      </ul>

      <h3>Use Cases</h3>
      <table>
        <thead>
          <tr>
            <th>Business Type</th>
            <th>Why Hide Prices</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>B2B/Wholesale</td>
            <td>Different pricing tiers for registered buyers</td>
          </tr>
          <tr>
            <td>Membership Sites</td>
            <td>Exclusive pricing for members only</td>
          </tr>
          <tr>
            <td>Luxury Brands</td>
            <td>Create exclusivity and prevent price comparison</td>
          </tr>
          <tr>
            <td>Trade Suppliers</td>
            <td>Verify professional buyers before showing trade prices</td>
          </tr>
          <tr>
            <td>Regional Stores</td>
            <td>Show prices only to specific geographic regions</td>
          </tr>
        </tbody>
      </table>
    `,
    code: `if (!is_user_logged_in()) {
    remove_action('woocommerce_single_product_summary', 'woocommerce_template_single_price', 10);
    remove_action('woocommerce_after_shop_loop_item_title', 'woocommerce_template_loop_price', 10);
}`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Pricing', 'Users'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Hide WooCommerce Prices for Non-Logged Users - Complete Guide 2025',
      metaDescription: 'Hide product prices and add to cart buttons for guests in WooCommerce. Perfect for B2B, wholesale stores, and membership sites.',
      keywords: ['hide woocommerce prices', 'woocommerce guest prices', 'hide prices not logged in', 'woocommerce login to see prices', 'b2b woocommerce pricing'],
      canonical: 'https://shahmir.dev/blog/hide-prices-not-logged-in',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Hide WooCommerce Prices for Non-Logged Users',
        description: 'Complete guide to hiding WooCommerce prices for non-logged in users with code snippets and best practices.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "Will hiding prices affect my SEO and Google Shopping?",
        answer: "Yes, hiding prices completely can impact SEO and prevent Google Shopping listings. Consider using CSS to hide prices visually while keeping them in the HTML for search engines. Use schema markup with 'PriceSpecification' and 'eligibleCustomerType' to indicate prices are for registered users only."
      },
      {
        question: "Can I hide prices but still allow add to cart functionality?",
        answer: "Yes, you can hide only the price display while keeping the add to cart button. Use the woocommerce_get_price_html filter to return an empty string or custom message, but don't remove the woocommerce_template_single_add_to_cart action. Users can add items and see prices in their cart."
      },
      {
        question: "How do I automatically redirect to login when someone tries to add to cart?",
        answer: "Use the woocommerce_add_to_cart_validation filter to check if user is logged in. Return false and use wc_add_notice() to display a message, then redirect to login page with wp_safe_redirect(). Make sure to include the current page URL as a redirect parameter after login."
      },
      {
        question: "Will this work with variable products and product variations?",
        answer: "The basic snippet works for simple products. For variable products, also filter woocommerce_variable_price_html and woocommerce_variation_price_html. Remove the variation form with remove_action('woocommerce_single_variation', 'woocommerce_single_variation_add_to_cart_button', 20)."
      },
      {
        question: "Can I show a price range or 'from' price to guests?",
        answer: "Yes, modify the woocommerce_get_price_html filter to show a teaser like 'Prices from $X' where X is the lowest price. This encourages registration while giving some pricing context: return 'Prices from ' . wc_price($product->get_price()) for simple products."
      }
    ]
  },
  {
    id: 52,
    slug: 'custom-add-to-cart-text',
    title: 'Change WooCommerce Add to Cart Button Text',
    excerpt: 'Customize the add to cart button text in WooCommerce for different product types, categories, and contexts.',
    content: `
      <h2>Why Customize Add to Cart Button Text?</h2>
      <p>The default "Add to Cart" text might not fit your brand voice or product type. Changing it to "Add to Bag", "Buy Now", "Reserve Now", or other custom text can improve conversions and better match your store's language.</p>

      <h3>Change Button Text for All Products</h3>
      <pre><code class="language-php">// Change add to cart text globally
function custom_add_to_cart_text() {
    return __('Buy Now', 'woocommerce');
}
add_filter('woocommerce_product_single_add_to_cart_text', 'custom_add_to_cart_text');
add_filter('woocommerce_product_add_to_cart_text', 'custom_add_to_cart_text');</code></pre>

      <h3>Different Text for Product Types</h3>
      <pre><code class="language-php">// Custom text based on product type
function product_type_add_to_cart_text($text, $product) {
    if ($product->is_type('simple')) {
        return __('Purchase', 'woocommerce');
    }

    if ($product->is_type('variable')) {
        return __('Select Options', 'woocommerce');
    }

    if ($product->is_type('grouped')) {
        return __('View Products', 'woocommerce');
    }

    if ($product->is_type('external')) {
        return __('Buy Now', 'woocommerce');
    }

    return $text;
}
add_filter('woocommerce_product_add_to_cart_text', 'product_type_add_to_cart_text', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'product_type_add_to_cart_text', 10, 2);</code></pre>

      <h3>Custom Text by Product Category</h3>
      <pre><code class="language-php">// Different button text for different categories
function category_based_cart_text($text, $product) {
    $terms = get_the_terms($product->get_id(), 'product_cat');

    if ($terms) {
        foreach ($terms as $term) {
            switch ($term->slug) {
                case 'digital-downloads':
                    return __('Download Now', 'woocommerce');
                case 'services':
                    return __('Book Service', 'woocommerce');
                case 'subscriptions':
                    return __('Subscribe', 'woocommerce');
                case 'rentals':
                    return __('Rent Now', 'woocommerce');
            }
        }
    }

    return $text;
}
add_filter('woocommerce_product_add_to_cart_text', 'category_based_cart_text', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'category_based_cart_text', 10, 2);</code></pre>

      <h3>Different Text When Out of Stock</h3>
      <pre><code class="language-php">// Change text for out of stock products
function out_of_stock_button_text($text, $product) {
    if (!$product->is_in_stock()) {
        return __('Out of Stock - Notify Me', 'woocommerce');
    }
    return $text;
}
add_filter('woocommerce_product_add_to_cart_text', 'out_of_stock_button_text', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'out_of_stock_button_text', 10, 2);</code></pre>

      <h3>Custom Text with Product Price</h3>
      <pre><code class="language-php">// Include price in button text
function add_price_to_cart_button($text, $product) {
    if ($product->is_type('simple') && $product->is_purchasable() && $product->is_in_stock()) {
        return sprintf(__('Add to Cart - %s', 'woocommerce'), $product->get_price_html());
    }
    return $text;
}
add_filter('woocommerce_product_add_to_cart_text', 'add_price_to_cart_button', 10, 2);</code></pre>

      <h3>Different Text for Shop vs Single Product</h3>
      <pre><code class="language-php">// Different text on shop page vs product page
function shop_vs_product_button_text($text, $product) {
    if (is_product()) {
        // Single product page
        return __('Add to Bag', 'woocommerce');
    } else {
        // Shop/archive pages
        return __('Quick Add', 'woocommerce');
    }
}
add_filter('woocommerce_product_add_to_cart_text', 'shop_vs_product_button_text', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'shop_vs_product_button_text', 10, 2);</code></pre>

      <h3>Custom Text Based on Sale Status</h3>
      <pre><code class="language-php">// Different text for products on sale
function sale_product_button_text($text, $product) {
    if ($product->is_on_sale()) {
        $savings = $product->get_regular_price() - $product->get_sale_price();
        return sprintf(__('Get Sale - Save %s', 'woocommerce'), wc_price($savings));
    }
    return $text;
}
add_filter('woocommerce_product_add_to_cart_text', 'sale_product_button_text', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'sale_product_button_text', 10, 2);</code></pre>

      <h3>Best Button Text Examples</h3>
      <table>
        <thead>
          <tr>
            <th>Store Type</th>
            <th>Recommended Text</th>
            <th>Why It Works</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Fashion/Apparel</td>
            <td>Add to Bag, Add to Wardrobe</td>
            <td>Matches shopping terminology</td>
          </tr>
          <tr>
            <td>Digital Products</td>
            <td>Get Instant Access, Download Now</td>
            <td>Emphasizes immediate delivery</td>
          </tr>
          <tr>
            <td>Services/Bookings</td>
            <td>Book Now, Reserve Spot</td>
            <td>Action-oriented for appointments</td>
          </tr>
          <tr>
            <td>Food/Restaurants</td>
            <td>Order Now, Add to Order</td>
            <td>Restaurant-specific language</td>
          </tr>
          <tr>
            <td>B2B/Wholesale</td>
            <td>Request Quote, Add to Inquiry</td>
            <td>Professional tone</td>
          </tr>
        </tbody>
      </table>

      <h3>Testing & Optimization Tips</h3>
      <ul>
        <li><strong>A/B test different texts:</strong> Use tools like Google Optimize</li>
        <li><strong>Match your brand voice:</strong> Casual vs professional tone</li>
        <li><strong>Consider urgency:</strong> "Buy Now" vs "Add to Cart"</li>
        <li><strong>Mobile-friendly text:</strong> Keep it short for mobile buttons</li>
        <li><strong>Clear action verbs:</strong> Start with action words (Add, Buy, Get, Purchase)</li>
      </ul>
    `,
    code: `add_filter('woocommerce_product_single_add_to_cart_text', function() {
    return __('Buy Now', 'woocommerce');
});
add_filter('woocommerce_product_add_to_cart_text', function() {
    return __('Buy Now', 'woocommerce');
});`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '5 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Buttons', 'Customization'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 2.0+',
    seo: {
      metaTitle: 'Change WooCommerce Add to Cart Button Text - Complete Guide 2025',
      metaDescription: 'Customize WooCommerce add to cart button text by product type, category, or globally. Code snippets included for all scenarios.',
      keywords: ['woocommerce change button text', 'add to cart button text', 'customize woocommerce buttons', 'woocommerce buy now button', 'change add to cart text'],
      canonical: 'https://shahmir.dev/blog/custom-add-to-cart-text',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Change WooCommerce Add to Cart Button Text',
        description: 'Complete guide to customizing WooCommerce add to cart button text with multiple code examples.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WooCommerce 2.0+'
      }
    },
    faqs: [
      {
        question: "Why isn't my custom button text showing on variable products?",
        answer: "Variable products use a different filter. Make sure you're applying both woocommerce_product_add_to_cart_text (for shop pages) and woocommerce_product_single_add_to_cart_text (for single product pages). For variable products, the default is 'Select options' which you need to override specifically."
      },
      {
        question: "How can I change the 'Read more' text for external/affiliate products?",
        answer: "External products use a special filter: add_filter('woocommerce_product_add_to_cart_text', function($text, $product) { if($product->is_type('external')) return 'View Product'; return $text; }, 10, 2). This changes the button that links to the external URL."
      },
      {
        question: "Can I make the button text dynamic based on cart contents?",
        answer: "Yes, check if the product is already in cart using WC()->cart->find_product_in_cart($cart_item_key). Return 'Already in Cart' or 'Add Another' accordingly. However, this requires AJAX refresh to update without page reload when items are added."
      },
      {
        question: "How do I translate custom button text for multilingual stores?",
        answer: "Use the __() function with a text domain as shown in examples: __('Buy Now', 'your-text-domain'). Then use WPML, Polylang, or Loco Translate plugins to create translations. Or use conditional logic with if(ICL_LANGUAGE_CODE == 'es') for specific languages."
      },
      {
        question: "Will changing button text affect Google Analytics tracking?",
        answer: "If you're tracking button clicks by text, yes. Update your GA tracking code to match the new text, or better yet, track by CSS class (.single_add_to_cart_button) instead of button text. This makes your tracking more resilient to text changes."
      }
    ]
  },
  {
    id: 53,
    slug: 'remove-woocommerce-styles',
    title: 'Disable WooCommerce Default Styles and Scripts',
    excerpt: 'Remove WooCommerce CSS and JavaScript for better performance and complete style control. Optimize your WooCommerce store loading speed.',
    content: `
      <h2>Why Disable WooCommerce Styles?</h2>
      <p>WooCommerce loads several CSS and JavaScript files on every page, even where they're not needed. Disabling default styles gives you complete control over design and can significantly improve page load times, especially if you're using custom styles or page builders.</p>

      <h3>Disable All WooCommerce Styles</h3>
      <pre><code class="language-php">// Remove WooCommerce styles completely
add_filter('woocommerce_enqueue_styles', '__return_empty_array');</code></pre>

      <h3>Disable Specific WooCommerce Styles</h3>
      <pre><code class="language-php">// Selectively disable WooCommerce stylesheets
function disable_specific_woocommerce_styles($enqueue_styles) {
    // Remove general WooCommerce layout styles
    unset($enqueue_styles['woocommerce-general']);

    // Remove small screen styles
    unset($enqueue_styles['woocommerce-smallscreen']);

    // Keep layout styles (optional)
    // unset($enqueue_styles['woocommerce-layout']);

    return $enqueue_styles;
}
add_filter('woocommerce_enqueue_styles', 'disable_specific_woocommerce_styles');</code></pre>

      <h3>Disable Styles on Non-WooCommerce Pages</h3>
      <pre><code class="language-php">// Only load WooCommerce styles where needed
function disable_woocommerce_styles_on_non_shop_pages($enqueue_styles) {
    // Return empty if not a WooCommerce page
    if (!is_woocommerce() && !is_cart() && !is_checkout() && !is_account_page()) {
        return array();
    }

    return $enqueue_styles;
}
add_filter('woocommerce_enqueue_styles', 'disable_woocommerce_styles_on_non_shop_pages');</code></pre>

      <h3>Disable WooCommerce Scripts</h3>
      <pre><code class="language-php">// Remove WooCommerce JavaScript files
function disable_woocommerce_scripts() {
    // Remove on non-WooCommerce pages
    if (!is_woocommerce() && !is_cart() && !is_checkout() && !is_account_page()) {

        // Disable cart fragments (AJAX cart update)
        wp_dequeue_script('wc-cart-fragments');
        wp_deregister_script('wc-cart-fragments');

        // Disable add to cart script
        wp_dequeue_script('wc-add-to-cart');

        // Disable general WooCommerce scripts
        wp_dequeue_script('woocommerce');

        // Disable select2 (used for dropdowns)
        wp_dequeue_script('selectWoo');
        wp_deregister_script('selectWoo');
    }
}
add_action('wp_enqueue_scripts', 'disable_woocommerce_scripts', 99);</code></pre>

      <h3>Disable Cart Fragments (Biggest Performance Impact)</h3>
      <pre><code class="language-php">// Disable AJAX cart fragments for better performance
function disable_cart_fragments() {
    if (is_front_page()) {
        wp_dequeue_script('wc-cart-fragments');
    }
}
add_action('wp_enqueue_scripts', 'disable_cart_fragments', 11);

// Completely remove cart fragments functionality
add_action('wp_enqueue_scripts', function() {
    wp_deregister_script('wc-cart-fragments');
}, 11);</code></pre>

      <h3>Disable Password Strength Meter</h3>
      <pre><code class="language-php">// Remove password strength meter script
function disable_password_strength_meter() {
    if (!is_checkout() && !is_account_page()) {
        wp_dequeue_script('wc-password-strength-meter');
        wp_deregister_script('wc-password-strength-meter');
    }
}
add_action('wp_print_scripts', 'disable_password_strength_meter', 100);</code></pre>

      <h3>Disable Block Styles (For WordPress 5.8+)</h3>
      <pre><code class="language-php">// Remove WooCommerce block styles
function disable_woocommerce_block_styles() {
    wp_dequeue_style('wc-blocks-style');
    wp_dequeue_style('wc-blocks-style-active-filters');
    wp_dequeue_style('wc-blocks-style-add-to-cart-form');
    wp_dequeue_style('wc-blocks-packages-style');
    wp_dequeue_style('wc-blocks-style-all-products');
    wp_dequeue_style('wc-blocks-style-all-reviews');
    wp_dequeue_style('wc-blocks-style-attribute-filter');
    wp_dequeue_style('wc-blocks-style-breadcrumbs');
    wp_dequeue_style('wc-blocks-style-catalog-sorting');
    wp_dequeue_style('wc-blocks-style-customer-account');
    wp_dequeue_style('wc-blocks-style-featured-category');
    wp_dequeue_style('wc-blocks-style-featured-product');
    wp_dequeue_style('wc-blocks-style-mini-cart');
    wp_dequeue_style('wc-blocks-style-price-filter');
    wp_dequeue_style('wc-blocks-style-product-add-to-cart');
}
add_action('enqueue_block_assets', 'disable_woocommerce_block_styles', 100);</code></pre>

      <h3>Complete Performance Optimization</h3>
      <pre><code class="language-php">// Comprehensive WooCommerce optimization
function optimize_woocommerce_scripts() {
    // Get WooCommerce pages
    $woo_pages = array(is_woocommerce(), is_cart(), is_checkout(), is_account_page());

    // If not on WooCommerce page
    if (!in_array(true, $woo_pages)) {

        // Remove all WooCommerce styles
        add_filter('woocommerce_enqueue_styles', '__return_empty_array');

        // Remove scripts
        wp_dequeue_script('wc-cart-fragments');
        wp_deregister_script('wc-cart-fragments');
        wp_dequeue_script('wc-add-to-cart');
        wp_dequeue_script('woocommerce');
        wp_dequeue_script('selectWoo');
        wp_deregister_script('selectWoo');

        // Remove styles
        wp_dequeue_style('woocommerce-general');
        wp_dequeue_style('woocommerce-layout');
        wp_dequeue_style('woocommerce-smallscreen');
    }
}
add_action('wp_enqueue_scripts', 'optimize_woocommerce_scripts', 99);</code></pre>

      <h3>Performance Impact Comparison</h3>
      <table>
        <thead>
          <tr>
            <th>Optimization</th>
            <th>Page Load Improvement</th>
            <th>Requests Saved</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Disable All Styles</td>
            <td>200-300ms faster</td>
            <td>3-5 CSS files</td>
          </tr>
          <tr>
            <td>Disable Cart Fragments</td>
            <td>400-600ms faster</td>
            <td>1 AJAX request per page</td>
          </tr>
          <tr>
            <td>Disable Select2</td>
            <td>100-150ms faster</td>
            <td>1 JS + 1 CSS file</td>
          </tr>
          <tr>
            <td>Conditional Loading</td>
            <td>500-800ms on non-shop pages</td>
            <td>5-10 requests</td>
          </tr>
          <tr>
            <td>Full Optimization</td>
            <td>1-2 seconds on homepage</td>
            <td>10-15 requests</td>
          </tr>
        </tbody>
      </table>

      <h3>Important Considerations</h3>
      <ul>
        <li><strong>Test thoroughly:</strong> Ensure cart, checkout, and shop pages work correctly</li>
        <li><strong>Custom styles required:</strong> You'll need to style WooCommerce elements yourself</li>
        <li><strong>Cart fragments:</strong> Disabling may break AJAX cart updates</li>
        <li><strong>Plugin compatibility:</strong> Some WooCommerce extensions may break</li>
        <li><strong>Fallback styles:</strong> Keep essential layout styles for functionality</li>
      </ul>
    `,
    code: `// Remove WooCommerce styles
add_filter('woocommerce_enqueue_styles', '__return_empty_array');

// Disable cart fragments
add_action('wp_enqueue_scripts', function() {
    wp_deregister_script('wc-cart-fragments');
}, 11);`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'CSS', 'Performance'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Disable WooCommerce Styles & Scripts - Performance Optimization 2025',
      metaDescription: 'Remove WooCommerce default CSS and JavaScript to improve performance. Complete guide with code snippets for selective optimization.',
      keywords: ['disable woocommerce styles', 'remove woocommerce css', 'woocommerce performance', 'disable cart fragments', 'woocommerce optimization'],
      canonical: 'https://shahmir.dev/blog/remove-woocommerce-styles',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Disable WooCommerce Default Styles and Scripts',
        description: 'Comprehensive guide to removing WooCommerce CSS and JavaScript for better performance and custom styling.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "Will disabling WooCommerce styles break my store's appearance?",
        answer: "Yes, if you remove all WooCommerce styles without adding custom CSS, your store will appear unstyled. This method is for developers who want complete control. Either keep woocommerce-layout for basic structure, or ensure your theme has comprehensive WooCommerce styling before disabling defaults."
      },
      {
        question: "What happens if I disable cart fragments?",
        answer: "Cart fragments are AJAX calls that update the cart count in real-time. Disabling them means the cart widget won't update until page refresh. If your site doesn't display cart counts in the header, or you're okay with refresh-based updates, disabling fragments can save 400-600ms per page load."
      },
      {
        question: "Can I disable styles site-wide but re-enable on specific pages?",
        answer: "Yes, use conditional logic. First disable globally with add_filter('woocommerce_enqueue_styles', '__return_empty_array'), then manually enqueue specific stylesheets on needed pages using wp_enqueue_style() within conditional checks like if(is_product())."
      },
      {
        question: "How do I check which WooCommerce scripts are loading on my site?",
        answer: "Install Query Monitor plugin or use browser DevTools. In Chrome: right-click > Inspect > Network tab > filter by 'wc-' or 'woocommerce'. This shows all WooCommerce assets. Look for unused scripts on non-shop pages that you can safely disable."
      },
      {
        question: "Will this affect WooCommerce functionality or just appearance?",
        answer: "Disabling styles only affects appearance. However, disabling scripts CAN break functionality. Cart fragments enable AJAX cart updates, select2 powers enhanced dropdowns, and password-strength-meter is needed for registration. Only disable scripts you've verified aren't used on your site."
      }
    ]
  },
  {
    id: 54,
    slug: 'custom-product-tabs',
    title: 'Add Custom Product Tabs in WooCommerce',
    excerpt: 'Create custom product tabs in WooCommerce to display additional information like size guides, shipping info, or reviews.',
    content: `
      <h2>Why Add Custom Product Tabs?</h2>
      <p>Custom product tabs help organize product information better, improve user experience, and increase conversions by displaying essential details like size charts, shipping information, FAQs, or warranty details in an organized manner.</p>

      <h3>Add a Simple Custom Tab</h3>
      <pre><code class="language-php">// Add a custom product tab
function add_custom_product_tab($tabs) {
    $tabs['custom_tab'] = array(
        'title'    => __('Size Guide', 'woocommerce'),
        'priority' => 50,
        'callback' => 'custom_product_tab_content'
    );

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'add_custom_product_tab');

// Custom tab content
function custom_product_tab_content() {
    echo '&lt;h2&gt;Size Guide&lt;/h2&gt;';
    echo '&lt;p&gt;Please refer to our size chart to find your perfect fit.&lt;/p&gt;';
    echo '&lt;table class="size-chart"&gt;';
    echo '&lt;tr&gt;&lt;th&gt;Size&lt;/th&gt;&lt;th&gt;Chest&lt;/th&gt;&lt;th&gt;Waist&lt;/th&gt;&lt;/tr&gt;';
    echo '&lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;34-36"&lt;/td&gt;&lt;td&gt;28-30"&lt;/td&gt;&lt;/tr&gt;';
    echo '&lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;38-40"&lt;/td&gt;&lt;td&gt;32-34"&lt;/td&gt;&lt;/tr&gt;';
    echo '&lt;tr&gt;&lt;td&gt;L&lt;/td&gt;&lt;td&gt;42-44"&lt;/td&gt;&lt;td&gt;36-38"&lt;/td&gt;&lt;/tr&gt;';
    echo '&lt;/table&gt;';
}</code></pre>

      <h3>Tab with Custom Field Content</h3>
      <pre><code class="language-php">// Add tab with content from custom field
function add_custom_field_tab($tabs) {
    global $post;

    // Check if custom field exists
    if (get_post_meta($post->ID, 'custom_tab_content', true)) {
        $tabs['custom_info'] = array(
            'title'    => get_post_meta($post->ID, 'custom_tab_title', true) ?: __('Additional Info', 'woocommerce'),
            'priority' => 50,
            'callback' => 'custom_field_tab_content'
        );
    }

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'add_custom_field_tab');

function custom_field_tab_content() {
    global $post;
    $content = get_post_meta($post->ID, 'custom_tab_content', true);
    echo wpautop($content);
}</code></pre>

      <h3>Multiple Custom Tabs</h3>
      <pre><code class="language-php">// Add multiple custom tabs
function add_multiple_custom_tabs($tabs) {

    // Shipping Information Tab
    $tabs['shipping_tab'] = array(
        'title'    => __('Shipping Info', 'woocommerce'),
        'priority' => 25,
        'callback' => 'shipping_tab_content'
    );

    // Warranty Tab
    $tabs['warranty_tab'] = array(
        'title'    => __('Warranty', 'woocommerce'),
        'priority' => 30,
        'callback' => 'warranty_tab_content'
    );

    // FAQ Tab
    $tabs['faq_tab'] = array(
        'title'    => __('FAQs', 'woocommerce'),
        'priority' => 35,
        'callback' => 'faq_tab_content'
    );

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'add_multiple_custom_tabs');

function shipping_tab_content() {
    echo '&lt;h2&gt;Shipping Information&lt;/h2&gt;';
    echo '&lt;p&gt;Free shipping on orders over $50. Delivery within 3-5 business days.&lt;/p&gt;';
}

function warranty_tab_content() {
    echo '&lt;h2&gt;Warranty Details&lt;/h2&gt;';
    echo '&lt;p&gt;1-year manufacturer warranty included. Extended warranties available.&lt;/p&gt;';
}

function faq_tab_content() {
    echo '&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;';
    echo '&lt;p&gt;&lt;strong&gt;Q: Is this product in stock?&lt;/strong&gt;&lt;br&gt;A: Yes, available for immediate shipping.&lt;/p&gt;';
}</code></pre>

      <h3>Conditional Tabs by Product Category</h3>
      <pre><code class="language-php">// Show tab only for specific categories
function category_specific_tab($tabs) {
    global $post;

    if (has_term('clothing', 'product_cat', $post->ID)) {
        $tabs['care_instructions'] = array(
            'title'    => __('Care Instructions', 'woocommerce'),
            'priority' => 40,
            'callback' => 'care_instructions_content'
        );
    }

    if (has_term('electronics', 'product_cat', $post->ID)) {
        $tabs['specifications'] = array(
            'title'    => __('Tech Specs', 'woocommerce'),
            'priority' => 40,
            'callback' => 'tech_specs_content'
        );
    }

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'category_specific_tab');

function care_instructions_content() {
    echo '&lt;h2&gt;Care Instructions&lt;/h2&gt;';
    echo '&lt;ul&gt;';
    echo '&lt;li&gt;Machine wash cold&lt;/li&gt;';
    echo '&lt;li&gt;Tumble dry low&lt;/li&gt;';
    echo '&lt;li&gt;Do not bleach&lt;/li&gt;';
    echo '&lt;/ul&gt;';
}

function tech_specs_content() {
    echo '&lt;h2&gt;Technical Specifications&lt;/h2&gt;';
    echo '&lt;p&gt;Detailed technical information and specifications.&lt;/p&gt;';
}</code></pre>

      <h3>Remove Default Tabs</h3>
      <pre><code class="language-php">// Remove default WooCommerce tabs
function remove_default_tabs($tabs) {
    // Remove description tab
    unset($tabs['description']);

    // Remove reviews tab
    unset($tabs['reviews']);

    // Remove additional information tab
    unset($tabs['additional_information']);

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'remove_default_tabs', 98);</code></pre>

      <h3>Rename Default Tabs</h3>
      <pre><code class="language-php">// Rename existing tabs
function rename_product_tabs($tabs) {
    // Rename description tab
    if (isset($tabs['description'])) {
        $tabs['description']['title'] = __('Product Details', 'woocommerce');
    }

    // Rename reviews tab
    if (isset($tabs['reviews'])) {
        $tabs['reviews']['title'] = __('Customer Feedback', 'woocommerce');
    }

    // Rename additional information tab
    if (isset($tabs['additional_information'])) {
        $tabs['additional_information']['title'] = __('Specifications', 'woocommerce');
    }

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'rename_product_tabs', 98);</code></pre>

      <h3>Reorder Product Tabs</h3>
      <pre><code class="language-php">// Change tab display order
function reorder_product_tabs($tabs) {
    // Change priorities (lower = displays first)
    $tabs['description']['priority'] = 10;          // First
    $tabs['additional_information']['priority'] = 20; // Second
    $tabs['reviews']['priority'] = 30;              // Third

    return $tabs;
}
add_filter('woocommerce_product_tabs', 'reorder_product_tabs', 98);</code></pre>

      <h3>Common Tab Ideas</h3>
      <table>
        <thead>
          <tr>
            <th>Tab Name</th>
            <th>Best For</th>
            <th>Content Type</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Size Guide</td>
            <td>Clothing, Shoes</td>
            <td>Size charts, measurement tips</td>
          </tr>
          <tr>
            <td>Shipping Info</td>
            <td>All products</td>
            <td>Delivery times, costs, tracking</td>
          </tr>
          <tr>
            <td>Care Instructions</td>
            <td>Apparel, Furniture</td>
            <td>Washing, maintenance tips</td>
          </tr>
          <tr>
            <td>Warranty</td>
            <td>Electronics, Appliances</td>
            <td>Warranty terms, returns</td>
          </tr>
          <tr>
            <td>FAQs</td>
            <td>Complex products</td>
            <td>Common questions, troubleshooting</td>
          </tr>
          <tr>
            <td>Specifications</td>
            <td>Tech products</td>
            <td>Technical details, compatibility</td>
          </tr>
          <tr>
            <td>Ingredients</td>
            <td>Food, Cosmetics</td>
            <td>Components, allergen info</td>
          </tr>
          <tr>
            <td>Video Guide</td>
            <td>Assembly products</td>
            <td>Tutorial videos, demos</td>
          </tr>
        </tbody>
      </table>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Keep it scannable:</strong> Use bullet points and short paragraphs</li>
        <li><strong>Relevant content only:</strong> Don't add tabs just for the sake of it</li>
        <li><strong>Mobile-friendly:</strong> Test tabs on mobile devices</li>
        <li><strong>Clear titles:</strong> Use descriptive tab names</li>
        <li><strong>Priority ordering:</strong> Most important information first</li>
        <li><strong>Consistent styling:</strong> Match your theme's design</li>
      </ul>
    `,
    code: `add_filter('woocommerce_product_tabs', function($tabs) {
    $tabs['custom_tab'] = array(
        'title'    => __('Size Guide', 'woocommerce'),
        'priority' => 50,
        'callback' => 'custom_tab_content'
    );
    return $tabs;
});`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '7 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Products', 'Tabs'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 2.0+',
    seo: {
      metaTitle: 'Add Custom Product Tabs in WooCommerce - Complete Guide 2025',
      metaDescription: 'Create custom WooCommerce product tabs for size guides, shipping info, warranties, and more. Multiple code examples included.',
      keywords: ['woocommerce custom tabs', 'add product tabs woocommerce', 'woocommerce size guide tab', 'custom product information', 'woocommerce tabs tutorial'],
      canonical: 'https://shahmir.dev/blog/custom-product-tabs',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Custom Product Tabs in WooCommerce',
        description: 'Complete guide to creating, customizing, and managing WooCommerce product tabs with code snippets.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WooCommerce 2.0+'
      }
    },
    faqs: [
      {
        question: "How do I add different tabs for different products individually?",
        answer: "Use custom fields (post meta) to store tab content per product. Check if get_post_meta($post->ID, 'custom_tab_content', true) exists before adding the tab. This allows you to enable/disable tabs and customize content for each product through the product edit screen."
      },
      {
        question: "Can I use HTML and shortcodes in custom tab content?",
        answer: "Yes, HTML works directly. For shortcodes, use do_shortcode($content) to process them. For custom field content, use echo wpautop(do_shortcode($content)) to handle both paragraphs and shortcodes. Be cautious with user-submitted HTML; sanitize with wp_kses_post() for security."
      },
      {
        question: "How do I make tabs accordion-style on mobile devices?",
        answer: "WooCommerce tabs are already responsive by default. For custom accordion behavior, modify the CSS or use JavaScript. Target .woocommerce-tabs with media queries. Alternatively, use a plugin like 'Product Tabs for WooCommerce' which includes mobile accordion options."
      },
      {
        question: "Why aren't my custom tabs showing up?",
        answer: "Common causes: 1) Theme doesn't support WooCommerce product tabs (check if theme calls wc_get_template('single-product/tabs/tabs.php')), 2) Another plugin is filtering woocommerce_product_tabs with higher priority, 3) Tab callback function isn't defined, or 4) Conditional logic is preventing tab from appearing. Test with a default theme like Storefront."
      },
      {
        question: "Can I use ACF (Advanced Custom Fields) for tab content?",
        answer: "Absolutely. In your callback function, use get_field('tab_content') instead of get_post_meta(). ACF provides better UI for content editors. Example: if(get_field('tab_content')) { $tabs['acf_tab'] = array(...); } This makes tab management easier for non-developers."
      }
    ]
  },
  {
    id: 55,
    slug: 'minimum-order-amount',
    title: 'Set Minimum Order Amount in WooCommerce',
    excerpt: 'Require a minimum order total in WooCommerce before customers can checkout. Perfect for wholesale stores and bulk orders.',
    content: `
      <h2>Why Set a Minimum Order Amount?</h2>
      <p>Setting a minimum order amount helps cover shipping costs, transaction fees, and ensures profitability. It's particularly useful for wholesale stores, food delivery services, and businesses with high fixed costs per order.</p>

      <h3>Basic Minimum Order Amount</h3>
      <pre><code class="language-php">// Set minimum order amount
function minimum_order_amount() {
    $minimum = 50; // Minimum cart total

    if (WC()->cart->total < $minimum) {
        if (is_cart()) {
            wc_print_notice(
                sprintf('Your current order total is %s — you must have an order with a minimum of %s to place your order.',
                    wc_price(WC()->cart->total),
                    wc_price($minimum)
                ), 'error'
            );
        } else {
            wc_add_notice(
                sprintf('Your current order total is %s — you must have an order with a minimum of %s to place your order.',
                    wc_price(WC()->cart->total),
                    wc_price($minimum)
                ), 'error'
            );
        }
    }
}
add_action('woocommerce_checkout_process', 'minimum_order_amount');
add_action('woocommerce_before_cart', 'minimum_order_amount');</code></pre>

      <h3>Minimum Based on Subtotal (Excluding Shipping)</h3>
      <pre><code class="language-php">// Minimum order based on subtotal only
function minimum_subtotal_amount() {
    $minimum = 50;
    $subtotal = WC()->cart->subtotal; // Excludes shipping and taxes

    if ($subtotal < $minimum) {
        wc_add_notice(
            sprintf('Minimum order subtotal is %s (current: %s). Add more products to continue.',
                wc_price($minimum),
                wc_price($subtotal)
            ), 'error'
        );

        // Prevent checkout
        remove_action('woocommerce_proceed_to_checkout', 'woocommerce_button_proceed_to_checkout', 20);
    }
}
add_action('woocommerce_check_cart_items', 'minimum_subtotal_amount');
add_action('woocommerce_before_cart', 'minimum_subtotal_amount');</code></pre>

      <h3>Different Minimums by User Role</h3>
      <pre><code class="language-php">// Role-based minimum order amounts
function role_based_minimum_order() {
    $user = wp_get_current_user();

    // Set minimum by role
    if (in_array('wholesale_customer', $user->roles)) {
        $minimum = 100; // Wholesale minimum
        $message = 'Wholesale orders require a minimum of %s';
    } elseif (in_array('customer', $user->roles)) {
        $minimum = 30; // Regular customer minimum
        $message = 'Minimum order amount is %s';
    } else {
        $minimum = 50; // Guest/other users
        $message = 'Please create an account or add items totaling at least %s';
    }

    if (WC()->cart->total < $minimum) {
        wc_add_notice(
            sprintf($message, wc_price($minimum)),
            'error'
        );
    }
}
add_action('woocommerce_checkout_process', 'role_based_minimum_order');
add_action('woocommerce_before_cart', 'role_based_minimum_order');</code></pre>

      <h3>Minimum for Specific Shipping Methods</h3>
      <pre><code class="language-php">// Minimum order for free shipping
function minimum_for_free_shipping() {
    $minimum = 75;
    $cart_total = WC()->cart->subtotal;
    $chosen_methods = WC()->session->get('chosen_shipping_methods');

    // Check if free shipping is selected
    if (!empty($chosen_methods) && strpos($chosen_methods[0], 'free_shipping') !== false) {
        if ($cart_total < $minimum) {
            wc_add_notice(
                sprintf('Free shipping requires a minimum order of %s. Your current total is %s. Add %s more to qualify.',
                    wc_price($minimum),
                    wc_price($cart_total),
                    wc_price($minimum - $cart_total)
                ), 'notice'
            );
        }
    }
}
add_action('woocommerce_review_order_before_payment', 'minimum_for_free_shipping');</code></pre>

      <h3>Category-Based Minimum Order</h3>
      <pre><code class="language-php">// Minimum order for specific product categories
function category_minimum_order() {
    $minimum = 100;
    $category_slug = 'bulk-items';
    $category_total = 0;
    $has_category_product = false;

    // Calculate total for specific category
    foreach (WC()->cart->get_cart() as $cart_item) {
        if (has_term($category_slug, 'product_cat', $cart_item['product_id'])) {
            $has_category_product = true;
            $category_total += $cart_item['line_total'];
        }
    }

    if ($has_category_product && $category_total < $minimum) {
        wc_add_notice(
            sprintf('Bulk items require a minimum order of %s. Current bulk items total: %s',
                wc_price($minimum),
                wc_price($category_total)
            ), 'error'
        );
    }
}
add_action('woocommerce_checkout_process', 'category_minimum_order');
add_action('woocommerce_before_cart', 'category_minimum_order');</code></pre>

      <h3>Progress Bar for Minimum Order</h3>
      <pre><code class="language-php">// Show progress bar towards minimum order
function minimum_order_progress_bar() {
    $minimum = 50;
    $current = WC()->cart->subtotal;

    if ($current < $minimum) {
        $remaining = $minimum - $current;
        $percentage = ($current / $minimum) * 100;

        echo '&lt;div class="minimum-order-notice"&gt;';
        echo sprintf('&lt;p&gt;Add %s more to reach minimum order amount!&lt;/p&gt;', wc_price($remaining));
        echo '&lt;div class="progress-bar" style="background: #f0f0f0; height: 20px; border-radius: 10px;"&gt;';
        echo sprintf('&lt;div class="progress" style="width: %s%%; background: #4CAF50; height: 100%%; border-radius: 10px;"&gt;&lt;/div&gt;', $percentage);
        echo '&lt;/div&gt;';
        echo '&lt;/div&gt;';
    } else {
        echo '&lt;div class="minimum-order-notice success"&gt;';
        echo '&lt;p&gt;✓ Minimum order amount reached!&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
add_action('woocommerce_before_cart', 'minimum_order_progress_bar');</code></pre>

      <h3>Country-Specific Minimums</h3>
      <pre><code class="language-php">// Different minimums by country
function country_based_minimum() {
    $customer = WC()->customer;
    $country = $customer->get_billing_country();

    // Set minimum by country
    $minimums = array(
        'US' => 50,
        'CA' => 75,
        'GB' => 40,
        'AU' => 60,
        'default' => 50
    );

    $minimum = isset($minimums[$country]) ? $minimums[$country] : $minimums['default'];

    if (WC()->cart->total < $minimum) {
        wc_add_notice(
            sprintf('Minimum order for %s is %s',
                $country,
                wc_price($minimum)
            ), 'error'
        );
    }
}
add_action('woocommerce_checkout_process', 'country_based_minimum');</code></pre>

      <h3>Minimum Order Strategies</h3>
      <table>
        <thead>
          <tr>
            <th>Business Type</th>
            <th>Recommended Minimum</th>
            <th>Reasoning</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Food Delivery</td>
            <td>$15-25</td>
            <td>Cover delivery costs and prep time</td>
          </tr>
          <tr>
            <td>Wholesale/B2B</td>
            <td>$100-500</td>
            <td>Bulk order focus, higher margins</td>
          </tr>
          <tr>
            <td>Fashion Retail</td>
            <td>$30-50</td>
            <td>Shipping costs, average item price</td>
          </tr>
          <tr>
            <td>Grocery Delivery</td>
            <td>$25-40</td>
            <td>Justify delivery fee and packing</td>
          </tr>
          <tr>
            <td>Digital Products</td>
            <td>No minimum</td>
            <td>No shipping costs involved</td>
          </tr>
        </tbody>
      </table>

      <h3>Implementation Tips</h3>
      <ul>
        <li><strong>Clear messaging:</strong> Tell customers how much more they need to add</li>
        <li><strong>Progress indicators:</strong> Show visual progress towards minimum</li>
        <li><strong>Smart suggestions:</strong> Recommend products to reach minimum</li>
        <li><strong>Exclude from minimums:</strong> Consider excluding shipping/taxes</li>
        <li><strong>Free shipping threshold:</strong> Set minimum lower than free shipping</li>
        <li><strong>Test thoroughly:</strong> Check with coupons, discounts, and tax calculations</li>
      </ul>
    `,
    code: `add_action('woocommerce_checkout_process', function() {
    $minimum = 50;
    if (WC()->cart->total < $minimum) {
        wc_add_notice(sprintf('Minimum order amount is %s', wc_price($minimum)), 'error');
    }
});`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Cart', 'Orders'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Set Minimum Order Amount in WooCommerce - Complete Guide 2025',
      metaDescription: 'Add minimum order requirements in WooCommerce with role-based, country-specific, and category-based options. Code snippets included.',
      keywords: ['woocommerce minimum order', 'minimum order amount woocommerce', 'woocommerce order minimum', 'minimum cart total', 'woocommerce checkout minimum'],
      canonical: 'https://shahmir.dev/blog/minimum-order-amount',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Set Minimum Order Amount in WooCommerce',
        description: 'Complete guide to implementing minimum order amounts in WooCommerce with various customization options.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Beginner',
        dependencies: 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "Should the minimum be based on subtotal or total (including shipping)?",
        answer: "It depends on your business model. Use subtotal (WC()->cart->subtotal) to exclude shipping costs if shipping varies greatly. Use total (WC()->cart->total) if you want to include everything. Most stores use subtotal to avoid confusion when shipping costs push the order above minimum."
      },
      {
        question: "How do I handle coupons when calculating minimum order amount?",
        answer: "Use WC()->cart->subtotal for pre-discount total, or WC()->cart->get_cart_contents_total() for post-discount. Decide if minimum applies before or after discounts. Most stores check minimum before coupons using subtotal, then validate after discounts: if(WC()->cart->get_total('edit') < $minimum) for post-discount validation."
      },
      {
        question: "Can I set minimum quantity instead of minimum amount?",
        answer: "Yes, use WC()->cart->get_cart_contents_count() for total item quantity. Example: if(WC()->cart->get_cart_contents_count() < 5) { wc_add_notice('Minimum 5 items required', 'error'); }. This is useful for promotional bundles or sample packs."
      },
      {
        question: "Will minimum order validation work with AJAX add to cart?",
        answer: "The checkout validation will work, but cart page notices require page reload with default AJAX cart. To show immediate feedback, add validation to woocommerce_add_to_cart_validation filter and return false to prevent adding item if cart is below minimum and item won't reach it."
      },
      {
        question: "How do I completely hide checkout button until minimum is reached?",
        answer: "Use remove_action('woocommerce_proceed_to_checkout', 'woocommerce_button_proceed_to_checkout', 20) when cart is below minimum. Add a disabled button or message instead. For better UX, show a progress bar and 'Continue Shopping' button rather than completely hiding checkout."
      }
    ]
  },
  {
    id: 56,
    slug: 'custom-thank-you-page',
    title: 'Redirect to Custom Thank You Page in WooCommerce',
    excerpt: 'Create custom thank you pages in WooCommerce with order details, upsells, and personalized messages for better customer experience.',
    content: `
      <h2>Why Use Custom Thank You Pages?</h2>
      <p>Custom thank you pages allow you to provide a better post-purchase experience, display order-specific upsells, collect feedback, encourage social shares, and track conversions more effectively. A well-designed thank you page can increase customer lifetime value.</p>

      <h3>Basic Thank You Page Redirect</h3>
      <pre><code class="language-php">// Redirect to custom thank you page
function custom_thank_you_redirect($order_id) {
    $order = wc_get_order($order_id);
    $redirect_url = home_url('/thank-you/');

    // Add order ID to URL
    $redirect_url = add_query_arg('order_id', $order_id, $redirect_url);

    wp_redirect($redirect_url);
    exit;
}
add_action('woocommerce_thankyou', 'custom_thank_you_redirect');</code></pre>

      <h3>Display Order Details on Custom Page</h3>
      <pre><code class="language-php">// Show order information on custom thank you page
function display_order_details() {
    if (isset($_GET['order_id'])) {
        $order_id = absint($_GET['order_id']);
        $order = wc_get_order($order_id);

        if ($order && $order->get_user_id() == get_current_user_id()) {
            echo '&lt;div class="custom-order-details"&gt;';
            echo '&lt;h2&gt;Order #' . $order->get_order_number() . '&lt;/h2&gt;';
            echo '&lt;p&gt;Order Date: ' . $order->get_date_created()->format('F j, Y') . '&lt;/p&gt;';
            echo '&lt;p&gt;Total: ' . $order->get_formatted_order_total() . '&lt;/p&gt;';
            echo '&lt;p&gt;Payment Method: ' . $order->get_payment_method_title() . '&lt;/p&gt;';

            // Order items
            echo '&lt;h3&gt;Order Items&lt;/h3&gt;';
            echo '&lt;ul&gt;';
            foreach ($order->get_items() as $item) {
                echo '&lt;li&gt;' . $item->get_name() . ' × ' . $item->get_quantity() . '&lt;/li&gt;';
            }
            echo '&lt;/ul&gt;';
            echo '&lt;/div&gt;';
        }
    }
}
// Use in your custom thank you page template</code></pre>

      <h3>Different Pages Based on Product Category</h3>
      <pre><code class="language-php">// Redirect to different thank you pages by category
function category_based_thank_you($order_id) {
    $order = wc_get_order($order_id);
    $redirect_url = home_url('/thank-you/');

    // Check order items for specific categories
    foreach ($order->get_items() as $item) {
        $product_id = $item->get_product_id();

        if (has_term('digital-products', 'product_cat', $product_id)) {
            $redirect_url = home_url('/thank-you-digital/');
            break;
        } elseif (has_term('subscriptions', 'product_cat', $product_id)) {
            $redirect_url = home_url('/thank-you-subscription/');
            break;
        } elseif (has_term('physical-products', 'product_cat', $product_id)) {
            $redirect_url = home_url('/thank-you-shipping/');
            break;
        }
    }

    $redirect_url = add_query_arg('order_id', $order_id, $redirect_url);
    wp_redirect($redirect_url);
    exit;
}
add_action('woocommerce_thankyou', 'category_based_thank_you');</code></pre>

      <h3>Add Upsells to Thank You Page</h3>
      <pre><code class="language-php">// Display related products on thank you page
function thank_you_page_upsells() {
    if (!isset($_GET['order_id'])) {
        return;
    }

    $order_id = absint($_GET['order_id']);
    $order = wc_get_order($order_id);

    if (!$order) {
        return;
    }

    // Get order items
    $product_ids = array();
    foreach ($order->get_items() as $item) {
        $product_ids[] = $item->get_product_id();
    }

    // Get related products
    $related_products = wc_get_related_products($product_ids[0], 4);

    if ($related_products) {
        echo '&lt;div class="thank-you-upsells"&gt;';
        echo '&lt;h3&gt;Customers Also Bought&lt;/h3&gt;';
        echo '&lt;div class="products"&gt;';

        foreach ($related_products as $related_id) {
            $product = wc_get_product($related_id);
            echo '&lt;div class="product"&gt;';
            echo '&lt;a href="' . get_permalink($related_id) . '"&gt;';
            echo $product->get_image();
            echo '&lt;h4&gt;' . $product->get_name() . '&lt;/h4&gt;';
            echo '&lt;span class="price"&gt;' . $product->get_price_html() . '&lt;/span&gt;';
            echo '&lt;/a&gt;';
            echo '&lt;/div&gt;';
        }

        echo '&lt;/div&gt;';
        echo '&lt;/div&gt;';
    }
}
// Use in your custom thank you page template</code></pre>

      <h3>First-Time Customer Thank You</h3>
      <pre><code class="language-php">// Different message for first-time customers
function first_order_thank_you($order_id) {
    $order = wc_get_order($order_id);
    $customer_id = $order->get_customer_id();

    // Count customer orders
    $customer_orders = wc_get_customer_order_count($customer_id);

    if ($customer_orders == 1) {
        // First time customer - special thank you page
        $redirect_url = home_url('/thank-you-first-order/');
    } else {
        // Returning customer
        $redirect_url = home_url('/thank-you-returning/');
    }

    $redirect_url = add_query_arg('order_id', $order_id, $redirect_url);
    wp_redirect($redirect_url);
    exit;
}
add_action('woocommerce_thankyou', 'first_order_thank_you');</code></pre>

      <h3>Add Coupon Code to Thank You Page</h3>
      <pre><code class="language-php">// Display discount coupon on thank you page
function thank_you_discount_coupon() {
    if (!isset($_GET['order_id'])) {
        return;
    }

    $coupon_code = 'THANKYOU10';
    $discount_amount = 10; // 10% discount

    echo '&lt;div class="thank-you-coupon"&gt;';
    echo '&lt;h3&gt;Thank You for Your Order!&lt;/h3&gt;';
    echo '&lt;p&gt;Here\'s a special ' . $discount_amount . '% discount code for your next purchase:&lt;/p&gt;';
    echo '&lt;div class="coupon-code"&gt;' . $coupon_code . '&lt;/div&gt;';
    echo '&lt;button onclick="navigator.clipboard.writeText(\'' . $coupon_code . '\')"&gt;Copy Code&lt;/button&gt;';
    echo '&lt;/div&gt;';
}
// Use in your custom thank you page template</code></pre>

      <h3>Social Sharing Buttons</h3>
      <pre><code class="language-php">// Add social sharing to thank you page
function thank_you_social_share() {
    $share_url = urlencode(home_url());
    $share_text = urlencode('I just made a purchase from ' . get_bloginfo('name'));

    echo '&lt;div class="social-share"&gt;';
    echo '&lt;h3&gt;Share Your Purchase&lt;/h3&gt;';
    echo '&lt;a href="https://twitter.com/intent/tweet?text=' . $share_text . '&amp;url=' . $share_url . '" target="_blank"&gt;Twitter&lt;/a&gt; ';
    echo '&lt;a href="https://www.facebook.com/sharer/sharer.php?u=' . $share_url . '" target="_blank"&gt;Facebook&lt;/a&gt; ';
    echo '&lt;a href="https://www.linkedin.com/sharing/share-offsite/?url=' . $share_url . '" target="_blank"&gt;LinkedIn&lt;/a&gt;';
    echo '&lt;/div&gt;';
}
// Use in your custom thank you page template</code></pre>

      <h3>Order Tracking Information</h3>
      <pre><code class="language-php">// Add tracking number to thank you page
function display_tracking_info() {
    if (!isset($_GET['order_id'])) {
        return;
    }

    $order_id = absint($_GET['order_id']);
    $order = wc_get_order($order_id);
    $tracking_number = $order->get_meta('_tracking_number');

    if ($tracking_number) {
        echo '&lt;div class="order-tracking"&gt;';
        echo '&lt;h3&gt;Track Your Order&lt;/h3&gt;';
        echo '&lt;p&gt;Tracking Number: &lt;strong&gt;' . esc_html($tracking_number) . '&lt;/strong&gt;&lt;/p&gt;';
        echo '&lt;a href="https://tracking-site.com/track/' . $tracking_number . '" class="button"&gt;Track Package&lt;/a&gt;';
        echo '&lt;/div&gt;';
    } else {
        echo '&lt;div class="order-tracking"&gt;';
        echo '&lt;p&gt;Your order is being prepared. You\'ll receive tracking information via email once shipped.&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
// Use in your custom thank you page template</code></pre>

      <h3>Thank You Page Elements</h3>
      <table>
        <thead>
          <tr>
            <th>Element</th>
            <th>Purpose</th>
            <th>Conversion Impact</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Order Summary</td>
            <td>Confirm purchase details</td>
            <td>Reduces support inquiries</td>
          </tr>
          <tr>
            <td>Upsell Products</td>
            <td>Increase order value</td>
            <td>10-30% purchase rate</td>
          </tr>
          <tr>
            <td>Discount Coupon</td>
            <td>Encourage repeat purchase</td>
            <td>Improves retention 20-40%</td>
          </tr>
          <tr>
            <td>Social Sharing</td>
            <td>Generate referrals</td>
            <td>Increases brand awareness</td>
          </tr>
          <tr>
            <td>Account Creation</td>
            <td>Build customer database</td>
            <td>Boosts repeat purchases</td>
          </tr>
          <tr>
            <td>Survey/Feedback</td>
            <td>Gather insights</td>
            <td>Improves customer service</td>
          </tr>
        </tbody>
      </table>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Clear confirmation:</strong> Always show order number and details</li>
        <li><strong>Next steps:</strong> Tell customers what happens next</li>
        <li><strong>Contact info:</strong> Provide easy way to reach support</li>
        <li><strong>Personalization:</strong> Use customer name and order details</li>
        <li><strong>Mobile optimization:</strong> Ensure page works on all devices</li>
        <li><strong>Email confirmation:</strong> Mention they'll receive email</li>
        <li><strong>Analytics tracking:</strong> Track conversions and behavior</li>
      </ul>
    `,
    code: `add_action('woocommerce_thankyou', function($order_id) {
    $redirect_url = home_url('/thank-you/');
    $redirect_url = add_query_arg('order_id', $order_id, $redirect_url);
    wp_redirect($redirect_url);
    exit;
});`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '7 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Checkout', 'Redirects'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Custom WooCommerce Thank You Page - Redirect & Display Order Details',
      metaDescription: 'Create custom thank you pages in WooCommerce with order details, upsells, coupons, and social sharing. Complete code guide.',
      keywords: ['woocommerce thank you page', 'custom thank you page woocommerce', 'woocommerce order confirmation', 'thank you page redirect', 'woocommerce upsell'],
      canonical: 'https://shahmir.dev/blog/custom-thank-you-page',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Redirect to Custom Thank You Page in WooCommerce',
        description: 'Complete guide to creating custom thank you pages in WooCommerce with order details and upsells.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "How do I prevent customers from accessing thank you page without making a purchase?",
        answer: "Validate the order ID and check if it belongs to the current user: if(!$order || $order->get_user_id() != get_current_user_id()) { wp_redirect(home_url()); exit; }. For guests, check session data or use a secure token passed in URL that expires after first view."
      },
      {
        question: "Can I A/B test different thank you pages?",
        answer: "Yes, use conditional logic to randomly redirect: if(rand(0,1) == 0) { $redirect_url = '/thank-you-a/'; } else { $redirect_url = '/thank-you-b/'; }. Track conversions with Google Analytics events or custom database logging. Use a consistent experience per user by storing variant in user meta."
      },
      {
        question: "Will this redirect affect the default WooCommerce email notifications?",
        answer: "No, email notifications are triggered before the thank you page redirect. The woocommerce_thankyou hook runs after emails are sent, so redirecting won't affect email delivery. If emails aren't sending, the issue is elsewhere, not the redirect."
      },
      {
        question: "How do I display the thank you page in an iframe or modal instead of redirecting?",
        answer: "Instead of wp_redirect(), use JavaScript to load content in iframe/modal. Remove the woocommerce_thankyou redirect and add AJAX endpoint that returns order details. Use jQuery to fetch and display: jQuery.get('/wp-admin/admin-ajax.php?action=get_order_details&order_id=' + order_id) in modal."
      },
      {
        question: "Can I prevent the redirect for specific payment methods?",
        answer: "Yes, check payment method before redirecting: $order = wc_get_order($order_id); if($order->get_payment_method() == 'paypal') { return; }. This is useful for payment methods that have their own confirmation pages or require special handling like bank transfers."
      }
    ]
  },
  {
    id: 57,
    slug: 'change-product-quantity',
    title: 'Customize WooCommerce Product Quantity Inputs',
    excerpt: 'Modify product quantity fields in WooCommerce - set min/max values, change step increments, and customize quantity input display.',
    content: `
      <h2>Why Customize Quantity Inputs?</h2>
      <p>Customizing quantity inputs helps control how customers purchase products - useful for wholesale stores (minimum quantities), bulk items (step increments), limited stock (maximum quantities), or products sold by specific units (dozen, case, box).</p>

      <h3>Set Minimum and Maximum Quantities</h3>
      <pre><code class="language-php">// Set min and max quantity for all products
function custom_quantity_limits($args, $product) {
    $args['min_value'] = 2; // Minimum quantity
    $args['max_value'] = 10; // Maximum quantity
    return $args;
}
add_filter('woocommerce_quantity_input_args', 'custom_quantity_limits', 10, 2);</code></pre>

      <h3>Set Quantity Step Increment</h3>
      <pre><code class="language-php">// Products must be bought in multiples of 6
function quantity_step_increment($args, $product) {
    $args['min_value'] = 6;   // Minimum 6 items
    $args['max_value'] = 60;  // Maximum 60 items
    $args['step'] = 6;        // Increments of 6
    return $args;
}
add_filter('woocommerce_quantity_input_args', 'quantity_step_increment', 10, 2);</code></pre>

      <h3>Category-Based Quantity Rules</h3>
      <pre><code class="language-php">// Different quantity rules by category
function category_quantity_rules($args, $product) {
    if (has_term('wholesale', 'product_cat', $product->get_id())) {
        $args['min_value'] = 10;
        $args['max_value'] = 100;
        $args['step'] = 10;
    } elseif (has_term('bulk-items', 'product_cat', $product->get_id())) {
        $args['min_value'] = 12;
        $args['step'] = 12;
    } elseif (has_term('limited-edition', 'product_cat', $product->get_id())) {
        $args['max_value'] = 2; // Limit to 2 per customer
    }

    return $args;
}
add_filter('woocommerce_quantity_input_args', 'category_quantity_rules', 10, 2);</code></pre>

      <h3>Product-Specific Quantity Limits</h3>
      <pre><code class="language-php">// Set quantity limits per product using custom fields
function product_specific_quantity($args, $product) {
    $min = get_post_meta($product->get_id(), '_min_quantity', true);
    $max = get_post_meta($product->get_id(), '_max_quantity', true);
    $step = get_post_meta($product->get_id(), '_quantity_step', true);

    if ($min) {
        $args['min_value'] = absint($min);
    }

    if ($max) {
        $args['max_value'] = absint($max);
    }

    if ($step) {
        $args['step'] = absint($step);
    }

    return $args;
}
add_filter('woocommerce_quantity_input_args', 'product_specific_quantity', 10, 2);</code></pre>

      <h3>Remove Quantity Input (Sold Individually)</h3>
      <pre><code class="language-php">// Force quantity to 1 for all products
function force_single_quantity($return, $product) {
    return true;
}
add_filter('woocommerce_is_sold_individually', 'force_single_quantity', 10, 2);

// Or set per category
function category_sold_individually($return, $product) {
    if (has_term('services', 'product_cat', $product->get_id())) {
        return true;
    }
    return $return;
}
add_filter('woocommerce_is_sold_individually', 'category_sold_individually', 10, 2);</code></pre>

      <h3>Add Quantity Dropdown Instead of Input</h3>
      <pre><code class="language-php">// Replace quantity input with dropdown
function quantity_input_dropdown($html, $args) {
    $min = $args['min_value'];
    $max = $args['max_value'];
    $step = $args['step'];

    $options = '';
    for ($count = $min; $count <= $max; $count = $count + $step) {
        $selected = $count == $args['input_value'] ? 'selected' : '';
        $options .= '&lt;option value="' . $count . '" ' . $selected . '&gt;' . $count . '&lt;/option&gt;';
    }

    $html = '&lt;div class="quantity"&gt;';
    $html .= '&lt;select name="' . $args['input_name'] . '" class="qty"&gt;';
    $html .= $options;
    $html .= '&lt;/select&gt;';
    $html .= '&lt;/div&gt;';

    return $html;
}
add_filter('woocommerce_quantity_input', 'quantity_input_dropdown', 10, 2);</code></pre>

      <h3>Display Custom Quantity Labels</h3>
      <pre><code class="language-php">// Show "Pack of X" instead of quantity number
function custom_quantity_label() {
    ?&gt;
    &lt;script type="text/javascript"&gt;
    jQuery(document).ready(function($) {
        $('.quantity input').before('&lt;span class="qty-label"&gt;Pack of &lt;/span&gt;');
    });
    &lt;/script&gt;
    &lt;?php
}
add_action('wp_footer', 'custom_quantity_label');</code></pre>

      <h3>Validate Quantity at Checkout</h3>
      <pre><code class="language-php">// Enforce minimum quantity at checkout
function validate_cart_quantities() {
    $min_quantity = 5;

    foreach (WC()->cart->get_cart() as $cart_item) {
        if ($cart_item['quantity'] < $min_quantity) {
            $product_name = $cart_item['data']->get_name();
            wc_add_notice(
                sprintf('Minimum order quantity for %s is %d', $product_name, $min_quantity),
                'error'
            );
        }
    }
}
add_action('woocommerce_check_cart_items', 'validate_cart_quantities');</code></pre>

      <h3>Role-Based Quantity Limits</h3>
      <pre><code class="language-php">// Different quantity limits by user role
function role_based_quantity($args, $product) {
    if (!is_user_logged_in()) {
        $args['max_value'] = 5; // Guests limited to 5
        return $args;
    }

    $user = wp_get_current_user();

    if (in_array('wholesale_customer', $user->roles)) {
        $args['min_value'] = 10;
        $args['max_value'] = 1000;
        $args['step'] = 10;
    } elseif (in_array('customer', $user->roles)) {
        $args['max_value'] = 20;
    }

    return $args;
}
add_filter('woocommerce_quantity_input_args', 'role_based_quantity', 10, 2);</code></pre>

      <h3>Common Quantity Scenarios</h3>
      <table>
        <thead>
          <tr>
            <th>Use Case</th>
            <th>Min</th>
            <th>Max</th>
            <th>Step</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Eggs (dozen)</td>
            <td>12</td>
            <td>120</td>
            <td>12</td>
          </tr>
          <tr>
            <td>Wholesale Cases</td>
            <td>6</td>
            <td>600</td>
            <td>6</td>
          </tr>
          <tr>
            <td>Limited Edition</td>
            <td>1</td>
            <td>1</td>
            <td>1</td>
          </tr>
          <tr>
            <td>Services (per hour)</td>
            <td>1</td>
            <td>8</td>
            <td>1</td>
          </tr>
          <tr>
            <td>Bulk Food (kg)</td>
            <td>0.5</td>
            <td>100</td>
            <td>0.5</td>
          </tr>
          <tr>
            <td>Sample Packs</td>
            <td>3</td>
            <td>3</td>
            <td>1</td>
          </tr>
        </tbody>
      </table>

      <h3>Implementation Tips</h3>
      <ul>
        <li><strong>Clear messaging:</strong> Explain why minimum/maximum exists</li>
        <li><strong>Visual feedback:</strong> Show errors immediately</li>
        <li><strong>Default values:</strong> Set smart default quantities</li>
        <li><strong>Mobile friendly:</strong> Ensure inputs work on touch devices</li>
        <li><strong>Stock validation:</strong> Respect available stock levels</li>
        <li><strong>Cart validation:</strong> Check quantities at checkout too</li>
      </ul>
    `,
    code: `add_filter('woocommerce_quantity_input_args', function($args, $product) {
    $args['min_value'] = 2;
    $args['max_value'] = 10;
    $args['step'] = 2;
    return $args;
}, 10, 2);`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '6 min',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Products', 'Cart'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Customize WooCommerce Product Quantity - Min, Max, Step Guide 2025',
      metaDescription: 'Set minimum, maximum, and step quantities in WooCommerce. Complete guide with code for wholesale, bulk, and custom quantity rules.',
      keywords: ['woocommerce quantity', 'woocommerce minimum quantity', 'woocommerce max quantity', 'quantity step woocommerce', 'custom quantity input'],
      canonical: 'https://shahmir.dev/blog/change-product-quantity',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Customize WooCommerce Product Quantity Inputs',
        description: 'Complete guide to modifying WooCommerce quantity inputs with minimum, maximum, and step values.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "How do I set decimal quantities for products sold by weight?",
        answer: "Set 'step' to decimal value in quantity args: $args['step'] = 0.5; $args['min_value'] = 0.5;. This allows quantities like 1.5, 2.0, 2.5. Ensure your theme CSS supports decimal display and that stock management handles decimals correctly with woocommerce_stock_amount filter."
      },
      {
        question: "Why isn't my quantity validation working in the cart?",
        answer: "Quantity filters only apply to input fields. For cart validation, use woocommerce_update_cart_validation or woocommerce_check_cart_items hooks. Check both $cart_item['quantity'] and product min/max settings. Return error with wc_add_notice() and prevent checkout."
      },
      {
        question: "Can I set different quantities for product variations?",
        answer: "Yes, quantity args are variation-specific. The $product parameter in woocommerce_quantity_input_args filter will be the variation object. Set custom fields on variations (_min_quantity_variation) and check: if($product->is_type('variation')) { //custom logic }."
      },
      {
        question: "How do I enforce maximum quantity per user (lifetime limit)?",
        answer: "Track purchases with user meta. On add to cart, check total purchased: $purchased = (int)get_user_meta($user_id, 'product_'.$product_id.'_purchased', true); if($purchased + $quantity > $max) { return false; }. Update meta after successful order with woocommerce_order_status_completed hook."
      },
      {
        question: "Will minimum quantity work with AJAX add to cart?",
        answer: "Frontend validation won't trigger with AJAX add to cart. Add JavaScript validation: jQuery('.single_add_to_cart_button').click(function(){ if($('.qty').val() < min){ alert('Minimum quantity is ' + min); return false; }}). Also add server-side validation with woocommerce_add_to_cart_validation filter as backup."
      }
    ]
  },
  {
    id: 58,
    slug: 'add-custom-checkout-field',
    title: 'Add Custom Checkout Fields in WooCommerce',
    excerpt: 'Learn how to add custom fields to WooCommerce checkout page, save the data, and display it in order details and emails.',
    content: `
      <h2>Why Add Custom Checkout Fields?</h2>
      <p>Custom checkout fields allow you to collect additional information from customers during checkout, such as delivery instructions, gift messages, or business-specific data.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Add custom field to checkout
add_action('woocommerce_after_order_notes', 'custom_checkout_field');
function custom_checkout_field($checkout) {
    echo '&lt;div id="custom_checkout_field"&gt;&lt;h3&gt;' . __('Additional Information') . '&lt;/h3&gt;';

    woocommerce_form_field('delivery_instructions', array(
        'type' => 'textarea',
        'class' => array('delivery-instructions form-row-wide'),
        'label' => __('Delivery Instructions'),
        'placeholder' => __('Any specific delivery instructions?'),
        'required' => false,
    ), $checkout->get_value('delivery_instructions'));

    echo '&lt;/div&gt;';
}

// Save custom field data
add_action('woocommerce_checkout_update_order_meta', 'save_custom_checkout_field');
function save_custom_checkout_field($order_id) {
    if (!empty($_POST['delivery_instructions'])) {
        update_post_meta($order_id, 'delivery_instructions',
            sanitize_text_field($_POST['delivery_instructions']));
    }
}

// Display custom field in order details
add_action('woocommerce_admin_order_data_after_billing_address', 'display_custom_field_in_admin');
function display_custom_field_in_admin($order) {
    $delivery_instructions = get_post_meta($order->get_id(), 'delivery_instructions', true);
    if ($delivery_instructions) {
        echo '&lt;p&gt;&lt;strong&gt;' . __('Delivery Instructions') . ':&lt;/strong&gt; ' .
             esc_html($delivery_instructions) . '&lt;/p&gt;';
    }
}

// Add custom field to order emails
add_filter('woocommerce_email_order_meta_fields', 'add_custom_field_to_emails', 10, 3);
function add_custom_field_to_emails($fields, $sent_to_admin, $order) {
    $fields['delivery_instructions'] = array(
        'label' => __('Delivery Instructions'),
        'value' => get_post_meta($order->get_id(), 'delivery_instructions', true),
    );
    return $fields;
}</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Add the code to your theme's functions.php or custom plugin</li>
        <li>Test the checkout page to ensure the field appears</li>
        <li>Complete a test order to verify data is saved</li>
        <li>Check order details in admin panel</li>
        <li>Review order confirmation email</li>
      </ol>

      <h3>Field Types Available</h3>
      <ul>
        <li><strong>text</strong> - Single line text input</li>
        <li><strong>textarea</strong> - Multi-line text area</li>
        <li><strong>select</strong> - Dropdown selection</li>
        <li><strong>checkbox</strong> - Checkbox field</li>
        <li><strong>radio</strong> - Radio buttons</li>
      </ul>

      <h3>Adding Required Validation</h3>
      <pre><code class="language-php">add_action('woocommerce_checkout_process', 'validate_custom_checkout_field');
function validate_custom_checkout_field() {
    if (empty($_POST['delivery_instructions'])) {
        wc_add_notice(__('Please provide delivery instructions.'), 'error');
    }
}</code></pre>

      <h3>Advanced: Multiple Custom Fields</h3>
      <pre><code class="language-php">$custom_fields = array(
    'delivery_instructions' => array(
        'type' => 'textarea',
        'label' => 'Delivery Instructions',
        'required' => false
    ),
    'gift_message' => array(
        'type' => 'textarea',
        'label' => 'Gift Message',
        'required' => false
    ),
    'preferred_delivery_date' => array(
        'type' => 'date',
        'label' => 'Preferred Delivery Date',
        'required' => false
    )
);

foreach ($custom_fields as $key => $field) {
    woocommerce_form_field($key, $field, $checkout->get_value($key));
}</code></pre>
    `,
    code: `add_action('woocommerce_after_order_notes', 'custom_checkout_field');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Checkout', 'Custom Fields', 'Order Management', 'Forms'],
    difficulty: 'Advanced',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Add Custom Checkout Fields WooCommerce (Complete Guide 2025)',
      metaDescription: 'Complete code snippet to add custom fields to WooCommerce checkout, save data, and display in orders and emails. No plugin required.',
      keywords: ['woocommerce custom checkout fields', 'woocommerce add field checkout', 'custom checkout woocommerce', 'woocommerce checkout customization', 'woocommerce order fields'],
      canonical: '/blog/add-custom-checkout-field',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Custom Checkout Fields in WooCommerce",
        "description": "Learn how to add custom fields to WooCommerce checkout page, save the data, and display it in order details and emails.",
        "proficiencyLevel": "Advanced",
        "dependencies": 'WooCommerce 3.0+'
      }
    },
    faqs: [
      {
        question: "Where should I add custom checkout fields in WooCommerce?",
        answer: "Use hooks like woocommerce_before_order_notes, woocommerce_after_order_notes, woocommerce_before_checkout_billing_form, or woocommerce_after_checkout_billing_form depending on where you want the fields to appear. The after_order_notes hook is most common as it places fields in a logical position."
      },
      {
        question: "How do I make a custom checkout field required?",
        answer: "Set 'required' => true in the field array and add validation using the woocommerce_checkout_process hook. In validation, check if the field is empty and use wc_add_notice() to display an error message that prevents checkout completion."
      },
      {
        question: "Will custom checkout fields appear in order emails?",
        answer: "Not automatically. You must use the woocommerce_email_order_meta_fields filter to add custom fields to order emails. Return an array with your field label and value from order meta to display it in customer and admin notification emails."
      },
      {
        question: "How do I add a dropdown select field to WooCommerce checkout?",
        answer: "Use type => 'select' and add an 'options' array with key-value pairs. For example: 'options' => array('' => 'Select option', 'option1' => 'Option 1', 'option2' => 'Option 2'). The first empty option serves as a placeholder."
      },
      {
        question: "Can I add custom fields to specific products only?",
        answer: "Yes, check the cart contents in your field display function. Use WC()->cart->get_cart() to loop through items and check product IDs or categories. Only call woocommerce_form_field() if specific products are in the cart."
      }
    ]
  },
  {
    id: 59,
    slug: 'product-badge-sale',
    title: 'Create Custom Sale Badge in WooCommerce',
    excerpt: 'Replace the default WooCommerce sale badge with custom text, percentage discounts, or styled badges that stand out.',
    content: `
      <h2>Why Customize Sale Badges?</h2>
      <p>Custom sale badges can show exact discount percentages, use compelling text, match your branding, and improve conversion rates by making deals more obvious to customers.</p>

      <h3>The Code Snippet - Percentage Badge</h3>
      <pre><code class="language-php">// Replace sale badge with percentage discount
add_filter('woocommerce_sale_flash', 'custom_sale_badge', 10, 3);
function custom_sale_badge($html, $post, $product) {
    if ($product->is_on_sale()) {
        if ($product->is_type('variable')) {
            $percentages = array();
            $prices = $product->get_variation_prices();

            foreach ($prices['price'] as $key => $price) {
                if ($prices['regular_price'][$key] !== $price) {
                    $percentages[] = round(100 - ($prices['sale_price'][$key] /
                                    $prices['regular_price'][$key] * 100));
                }
            }
            $percentage = max($percentages);
        } else {
            $regular_price = $product->get_regular_price();
            $sale_price = $product->get_sale_price();
            $percentage = round(100 - ($sale_price / $regular_price * 100));
        }

        return '&lt;span class="onsale"&gt;-' . $percentage . '%&lt;/span&gt;';
    }
    return $html;
}</code></pre>

      <h3>Custom Text Badge</h3>
      <pre><code class="language-php">add_filter('woocommerce_sale_flash', 'custom_sale_text');
function custom_sale_text($html) {
    return str_replace(__('Sale!', 'woocommerce'), __('Hot Deal!', 'woocommerce'), $html);
}</code></pre>

      <h3>Styled Badge with Savings Amount</h3>
      <pre><code class="language-php">add_filter('woocommerce_sale_flash', 'show_savings_amount', 10, 3);
function show_savings_amount($html, $post, $product) {
    if ($product->is_on_sale()) {
        $regular_price = $product->get_regular_price();
        $sale_price = $product->get_sale_price();
        $savings = $regular_price - $sale_price;

        $html = '&lt;span class="onsale"&gt;Save ' .
                wc_price($savings) . '&lt;/span&gt;';
    }
    return $html;
}</code></pre>

      <h3>CSS Styling for Custom Badges</h3>
      <pre><code class="language-css">.onsale {
    background: #ff0000;
    color: #fff;
    font-weight: bold;
    padding: 10px 15px;
    border-radius: 50%;
    font-size: 14px;
    line-height: 1;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.onsale:before {
    content: "🔥"; /* Fire emoji for hot deals */
    margin-right: 5px;
}</code></pre>

      <h3>Multiple Badge Types</h3>
      <pre><code class="language-php">add_filter('woocommerce_sale_flash', 'conditional_sale_badges', 10, 3);
function conditional_sale_badges($html, $post, $product) {
    if (!$product->is_on_sale()) return $html;

    $percentage = calculate_discount_percentage($product);

    if ($percentage >= 50) {
        $badge_text = 'MEGA SALE';
        $badge_class = 'mega-sale';
    } elseif ($percentage >= 25) {
        $badge_text = 'BIG SAVINGS';
        $badge_class = 'big-sale';
    } else {
        $badge_text = 'SALE';
        $badge_class = 'regular-sale';
    }

    return '&lt;span class="onsale ' . $badge_class . '"&gt;' .
           $badge_text . '&lt;/span&gt;';
}</code></pre>
    `,
    code: `add_filter('woocommerce_sale_flash', 'custom_sale_badge', 10, 3);`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '4 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Products', 'Sale Badge', 'UI Customization', 'Conversion'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Custom WooCommerce Sale Badge - Show Discount Percentage 2025',
      metaDescription: 'Replace default WooCommerce sale badges with custom text, percentage discounts, or savings amounts. Complete code snippets and styling guide.',
      keywords: ['woocommerce custom sale badge', 'woocommerce percentage discount badge', 'woocommerce sale flash', 'custom product badges', 'woocommerce discount display'],
      canonical: '/blog/product-badge-sale',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Create Custom Sale Badge in WooCommerce",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "How do I show percentage discount on WooCommerce sale badges?",
        answer: "Use the woocommerce_sale_flash filter to calculate the discount percentage from regular and sale prices. For variable products, calculate percentages for all variations and display the maximum discount to show the best available deal."
      },
      {
        question: "Can I show different badges based on discount amount?",
        answer: "Yes, calculate the discount percentage and use conditional logic to return different badge text or CSS classes. For example, show 'MEGA SALE' for 50%+ discounts, 'BIG SAVINGS' for 25-49%, and regular 'SALE' for smaller discounts."
      },
      {
        question: "How do I remove the sale badge completely in WooCommerce?",
        answer: "Return false or empty string from the woocommerce_sale_flash filter: add_filter('woocommerce_sale_flash', '__return_false'). Alternatively, hide it with CSS: .onsale { display: none; }."
      },
      {
        question: "Why doesn't my custom sale badge show the correct percentage for variable products?",
        answer: "Variable products need special handling. Use get_variation_prices() to get all variation prices, calculate discount for each variation, and display the maximum percentage. The code snippet handles this with the is_type('variable') check."
      },
      {
        question: "Can I add custom badges for non-sale products (like 'New' or 'Popular')?",
        answer: "Yes, use the woocommerce_get_product_tags hook or add custom meta fields to products. Display badges using woocommerce_before_shop_loop_item_title or woocommerce_before_single_product_summary hooks, checking for your custom conditions or tags."
      }
    ]
  },
  {
    id: 60,
    slug: 'remove-related-products',
    title: 'Hide Related Products in WooCommerce',
    excerpt: 'Remove or customize the related products section on WooCommerce product pages with simple code snippets.',
    content: `
      <h2>Why Remove Related Products?</h2>
      <p>Related products can distract customers from completing purchases, clutter your product pages, or show inappropriate product combinations. Removing them can improve focus and conversions.</p>

      <h3>The Code Snippet - Complete Removal</h3>
      <pre><code class="language-php">// Remove related products completely
remove_action('woocommerce_after_single_product_summary',
              'woocommerce_output_related_products', 20);
</code></pre>

      <h3>Alternative Method</h3>
      <pre><code class="language-php">add_filter('woocommerce_related_products', '__return_empty_array', 10);
</code></pre>

      <h3>Customize Number of Related Products</h3>
      <pre><code class="language-php">// Change number of related products shown
add_filter('woocommerce_output_related_products_args', 'custom_related_products_args');
function custom_related_products_args($args) {
    $args['posts_per_page'] = 3; // Change to desired number
    $args['columns'] = 3; // Number of columns
    return $args;
}
</code></pre>

      <h3>Show Related Products Only for Specific Categories</h3>
      <pre><code class="language-php">add_action('wp', 'conditional_remove_related_products');
function conditional_remove_related_products() {
    if (is_product()) {
        global $post;
        $product = wc_get_product($post->ID);
        $categories = $product->get_category_ids();

        // Remove if product is in category ID 15 (change as needed)
        if (in_array(15, $categories)) {
            remove_action('woocommerce_after_single_product_summary',
                         'woocommerce_output_related_products', 20);
        }
    }
}
</code></pre>

      <h3>Replace Related Products with Upsells</h3>
      <pre><code class="language-php">// Remove related products and show upsells instead
remove_action('woocommerce_after_single_product_summary',
              'woocommerce_output_related_products', 20);

add_action('woocommerce_after_single_product_summary',
           'woocommerce_upsell_display', 20);
</code></pre>

      <h3>Change Related Products Title</h3>
      <pre><code class="language-php">add_filter('woocommerce_product_related_products_heading', 'custom_related_products_title');
function custom_related_products_title($heading) {
    return 'You May Also Like';
}
</code></pre>

      <h3>CSS Method to Hide</h3>
      <pre><code class="language-css">/* Hide related products with CSS */
.related.products {
    display: none !important;
}
</code></pre>
    `,
    code: `remove_action('woocommerce_after_single_product_summary', 'woocommerce_output_related_products', 20);`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '3 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Products', 'Related Products', 'Customization', 'Product Pages'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Remove Related Products WooCommerce - Complete Guide 2025',
      metaDescription: 'Learn how to remove or customize related products in WooCommerce product pages. Simple code snippets to hide, limit, or conditionally show related items.',
      keywords: ['remove related products woocommerce', 'hide related products woocommerce', 'woocommerce disable related products', 'customize related products', 'woocommerce product page'],
      canonical: '/blog/remove-related-products',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Hide Related Products in WooCommerce",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the difference between remove_action and __return_empty_array for hiding related products?",
        answer: "remove_action prevents WooCommerce from displaying the related products section entirely, while __return_empty_array still runs the query but returns no results. remove_action is more efficient as it completely stops the functionality."
      },
      {
        question: "Will removing related products affect my SEO?",
        answer: "Removing related products has minimal SEO impact. However, related products can improve internal linking and user engagement. Consider replacing them with manually curated upsells or cross-sells that are more relevant to improve both UX and SEO."
      },
      {
        question: "Can I show related products only for certain product categories?",
        answer: "Yes, use conditional logic in the wp hook to check product categories with get_category_ids(). Remove the related products action only when the product belongs to specific categories you want to exclude."
      },
      {
        question: "How do I change the number of related products shown instead of removing them?",
        answer: "Use the woocommerce_output_related_products_args filter to modify posts_per_page and columns parameters. For example, set posts_per_page to 3 to show only 3 related products instead of the default number."
      },
      {
        question: "Why do I still see related products after adding the remove code?",
        answer: "Your theme might override the default WooCommerce template. Check if your theme has a custom single-product.php template. You may need to edit the template directly or use !important in CSS as a fallback solution."
      }
    ]
  },
  {
    id: 61,
    slug: 'change-products-per-page',
    title: 'Change Products Per Page in WooCommerce',
    excerpt: 'Customize how many products display on WooCommerce shop pages with simple code snippets. Improve pagination and user experience.',
    content: `
      <h2>Why Change Products Per Page?</h2>
      <p>The default WooCommerce setting shows 12-16 products per page. Adjusting this can improve page load times, reduce scrolling, or show more products based on your catalog size and customer preferences.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Change products per page to 24
add_filter('loop_shop_per_page', 'custom_products_per_page', 20);
function custom_products_per_page($cols) {
    return 24;
}
</code></pre>

      <h3>Let Users Choose Products Per Page</h3>
      <pre><code class="language-php">// Add products per page dropdown
add_action('woocommerce_before_shop_loop', 'products_per_page_dropdown', 25);
function products_per_page_dropdown() {
    if (!is_shop() && !is_product_category() && !is_product_tag()) return;

    $per_page_options = array(12, 24, 36, 48);
    $current = isset($_GET['per_page']) ? $_GET['per_page'] : 12;

    echo '&lt;div class="products-per-page"&gt;';
    echo '&lt;label&gt;Show:&lt;/label&gt;';
    echo '&lt;select onchange="window.location.href=this.value"&gt;';

    foreach ($per_page_options as $option) {
        $selected = ($current == $option) ? 'selected' : '';
        $link = add_query_arg('per_page', $option);
        echo '&lt;option value="' . $link . '" ' . $selected . '&gt;' .
             $option . '&lt;/option&gt;';
    }

    echo '&lt;/select&gt;&lt;/div&gt;';
}

// Apply user selection
add_filter('loop_shop_per_page', 'apply_products_per_page');
function apply_products_per_page($per_page) {
    if (isset($_GET['per_page'])) {
        return intval($_GET['per_page']);
    }
    return $per_page;
}
</code></pre>

      <h3>Different Counts for Different Pages</h3>
      <pre><code class="language-php">add_filter('loop_shop_per_page', 'custom_products_per_page_by_page', 20);
function custom_products_per_page_by_page($cols) {
    if (is_shop()) {
        return 24; // Shop page shows 24
    } elseif (is_product_category()) {
        return 36; // Category pages show 36
    } elseif (is_product_tag()) {
        return 12; // Tag pages show 12
    }
    return $cols;
}
</code></pre>

      <h3>Show All Products (No Pagination)</h3>
      <pre><code class="language-php">add_filter('loop_shop_per_page', 'show_all_products');
function show_all_products($per_page) {
    return 9999; // Show all products
}
</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Performance:</strong> Don't show too many products (50+) as it impacts load times</li>
        <li><strong>Mobile:</strong> Consider showing fewer products on mobile devices</li>
        <li><strong>Divisibility:</strong> Choose numbers divisible by your column count (e.g., 24 for 4 columns)</li>
        <li><strong>User Choice:</strong> Let users select their preference for better UX</li>
      </ul>

      <h3>Mobile-Responsive Count</h3>
      <pre><code class="language-php">add_filter('loop_shop_per_page', 'responsive_products_per_page', 20);
function responsive_products_per_page($cols) {
    if (wp_is_mobile()) {
        return 12; // Show fewer products on mobile
    }
    return 24; // Show more on desktop
}
</code></pre>
    `,
    code: `add_filter('loop_shop_per_page', 'custom_products_per_page', 20);`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '4 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Shop Page', 'Pagination', 'Performance', 'User Experience'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Change Products Per Page WooCommerce - Complete Guide 2025',
      metaDescription: 'Learn how to change the number of products displayed per page in WooCommerce. Code snippets for custom pagination and user selection options.',
      keywords: ['woocommerce products per page', 'change products per page woocommerce', 'woocommerce pagination', 'loop shop per page', 'woocommerce shop customization'],
      canonical: '/blog/change-products-per-page',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Change Products Per Page in WooCommerce",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What's the optimal number of products to show per page in WooCommerce?",
        answer: "The optimal number depends on your catalog and customer behavior. 24-36 products is common for most stores. Consider page load performance, mobile experience, and ensure the number is divisible by your column count for clean layout."
      },
      {
        question: "How do I let customers choose how many products to view?",
        answer: "Add a dropdown using the woocommerce_before_shop_loop hook with per_page URL parameter. Combine this with the loop_shop_per_page filter to read the parameter and adjust the products shown. The code snippet provides a complete implementation."
      },
      {
        question: "Will showing too many products per page hurt site performance?",
        answer: "Yes, showing 50+ products can significantly impact load times, especially with product images. This hurts user experience and SEO. If you need to show many products, implement lazy loading for images and consider AJAX pagination."
      },
      {
        question: "Can I show different product counts on shop page vs category pages?",
        answer: "Yes, use conditional checks in the loop_shop_per_page filter. Check is_shop() for main shop page, is_product_category() for category pages, and is_product_tag() for tag archives. Return different numbers for each."
      },
      {
        question: "How do I show all products without pagination?",
        answer: "Set loop_shop_per_page to a very high number like 9999. However, this is not recommended for large catalogs due to performance issues. Instead, increase the number moderately or use 'Load More' functionality with AJAX."
      }
    ]
  },
  {
    id: 62,
    slug: 'custom-email-subject',
    title: 'Customize WooCommerce Order Email Subject Lines',
    excerpt: 'Personalize WooCommerce email subject lines with custom text, order details, and dynamic content to improve open rates.',
    content: `
      <h2>Why Customize Email Subjects?</h2>
      <p>Custom email subjects can increase open rates, reduce confusion, add personalization with customer names or order numbers, and improve brand recognition.</p>

      <h3>The Code Snippet - New Order Email</h3>
      <pre><code class="language-php">// Customize new order email subject
add_filter('woocommerce_email_subject_new_order', 'custom_new_order_email_subject', 10, 2);
function custom_new_order_email_subject($subject, $order) {
    $order_id = $order->get_order_number();
    $subject = sprintf('[New Order #%s] Received from %s',
                      $order_id,
                      $order->get_billing_first_name());
    return $subject;
}
</code></pre>

      <h3>Customer Order Confirmation Subject</h3>
      <pre><code class="language-php">// Customize customer order confirmation subject
add_filter('woocommerce_email_subject_customer_processing_order',
           'custom_processing_order_subject', 10, 2);
function custom_processing_order_subject($subject, $order) {
    $customer_name = $order->get_billing_first_name();
    $order_total = $order->get_formatted_order_total();

    $subject = sprintf('Thank you %s! Your order of %s is being processed',
                      $customer_name,
                      $order_total);
    return $subject;
}
</code></pre>

      <h3>All Email Subjects at Once</h3>
      <pre><code class="language-php">// Customize multiple email subjects
add_filter('woocommerce_email_subject_customer_completed_order',
           'custom_email_subjects', 10, 2);
add_filter('woocommerce_email_subject_customer_processing_order',
           'custom_email_subjects', 10, 2);
add_filter('woocommerce_email_subject_customer_on_hold_order',
           'custom_email_subjects', 10, 2);

function custom_email_subjects($subject, $order) {
    $blogname = get_bloginfo('name');
    $order_number = $order->get_order_number();
    $customer_name = $order->get_billing_first_name();

    // Detect which email type
    $current_filter = current_filter();

    if (strpos($current_filter, 'completed') !== false) {
        $subject = sprintf('[%s] Order #%s Completed - Thank you %s!',
                          $blogname, $order_number, $customer_name);
    } elseif (strpos($current_filter, 'processing') !== false) {
        $subject = sprintf('[%s] Order #%s Confirmed',
                          $blogname, $order_number);
    } elseif (strpos($current_filter, 'on_hold') !== false) {
        $subject = sprintf('[%s] Order #%s On Hold',
                          $blogname, $order_number);
    }

    return $subject;
}
</code></pre>

      <h3>Available Email Hooks</h3>
      <ul>
        <li><code>woocommerce_email_subject_new_order</code> - Admin new order notification</li>
        <li><code>woocommerce_email_subject_customer_processing_order</code> - Order confirmation</li>
        <li><code>woocommerce_email_subject_customer_completed_order</code> - Order completed</li>
        <li><code>woocommerce_email_subject_customer_on_hold_order</code> - Order on hold</li>
        <li><code>woocommerce_email_subject_customer_refunded_order</code> - Order refunded</li>
        <li><code>woocommerce_email_subject_customer_invoice</code> - Customer invoice</li>
      </ul>

      <h3>Add Product Names to Subject</h3>
      <pre><code class="language-php">add_filter('woocommerce_email_subject_customer_processing_order',
           'add_products_to_subject', 10, 2);
function add_products_to_subject($subject, $order) {
    $items = $order->get_items();
    $product_names = array();

    foreach ($items as $item) {
        $product_names[] = $item->get_name();
    }

    $products_list = implode(', ', array_slice($product_names, 0, 2));
    $subject = sprintf('Your order for %s is confirmed!', $products_list);

    return $subject;
}
</code></pre>

      <h3>Include Shipping Method</h3>
      <pre><code class="language-php">add_filter('woocommerce_email_subject_customer_completed_order',
           'add_shipping_to_subject', 10, 2);
function add_shipping_to_subject($subject, $order) {
    $shipping_method = $order->get_shipping_method();
    $subject = sprintf('Your order is ready! Shipped via %s', $shipping_method);
    return $subject;
}
</code></pre>
    `,
    code: `add_filter('woocommerce_email_subject_new_order', 'custom_new_order_email_subject', 10, 2);`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Emails', 'Email Marketing', 'Customization', 'Order Management'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Customize WooCommerce Email Subject Lines - Complete Guide 2025',
      metaDescription: 'Personalize WooCommerce email subjects with order details, customer names, and custom text. Improve open rates with these code snippets.',
      keywords: ['woocommerce custom email subject', 'woocommerce email customization', 'personalize woocommerce emails', 'woocommerce order emails', 'email subject lines'],
      canonical: '/blog/custom-email-subject',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Customize WooCommerce Order Email Subject Lines",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Which WooCommerce email subject should I customize first?",
        answer: "Start with customer_processing_order (order confirmation) as it has the highest open rate. This email is sent immediately after purchase when customers are most engaged. Personalizing this subject can improve brand perception and reduce support inquiries."
      },
      {
        question: "Can I add emojis to WooCommerce email subject lines?",
        answer: "Yes, you can add emojis directly in the subject string, like '✅ Order Confirmed!'. However, test across different email clients as some may not render emojis properly. Use sparingly as they can trigger spam filters if overused."
      },
      {
        question: "How do I add the order number to email subjects?",
        answer: "Use $order->get_order_number() to retrieve the order number and include it in your custom subject with sprintf() or string concatenation. The order object is passed as the second parameter to all email subject filters."
      },
      {
        question: "Will customizing email subjects affect deliverability?",
        answer: "Generally no, but avoid spam trigger words like 'FREE', excessive caps, or too many special characters. Keep subjects clear and relevant. Including order numbers and store name can actually improve deliverability by looking more professional."
      },
      {
        question: "Can I use different subjects based on order total or products?",
        answer: "Yes, access order data with $order->get_total(), $order->get_items(), or $order->get_billing_country(). Use conditional logic to return different subjects based on these values, such as VIP treatment for high-value orders."
      }
    ]
  },
  {
    id: 63,
    slug: 'auto-complete-orders',
    title: 'Auto Complete Virtual Orders in WooCommerce',
    excerpt: 'Automatically complete WooCommerce orders for virtual and downloadable products without manual intervention.',
    content: `
      <h2>Why Auto Complete Orders?</h2>
      <p>Virtual and downloadable products don't require shipping, so orders can be completed automatically. This improves customer experience by providing instant access and reduces admin workload.</p>

      <h3>The Code Snippet - Virtual Products</h3>
      <pre><code class="language-php">// Auto complete virtual orders
add_action('woocommerce_thankyou', 'auto_complete_virtual_orders');
function auto_complete_virtual_orders($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);

    // Check if order contains only virtual products
    $has_virtual = false;
    $has_physical = false;

    foreach ($order->get_items() as $item) {
        $product = $item->get_product();
        if ($product->is_virtual()) {
            $has_virtual = true;
        } else {
            $has_physical = true;
        }
    }

    // Auto complete if all products are virtual
    if ($has_virtual && !$has_physical) {
        $order->update_status('completed');
    }
}
</code></pre>

      <h3>Downloadable Products Only</h3>
      <pre><code class="language-php">add_action('woocommerce_thankyou', 'auto_complete_downloadable_orders');
function auto_complete_downloadable_orders($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);
    $all_downloadable = true;

    foreach ($order->get_items() as $item) {
        $product = $item->get_product();
        if (!$product->is_downloadable()) {
            $all_downloadable = false;
            break;
        }
    }

    if ($all_downloadable && $order->has_status('processing')) {
        $order->update_status('completed');
    }
}
</code></pre>

      <h3>Combined Virtual and Downloadable</h3>
      <pre><code class="language-php">add_action('woocommerce_thankyou', 'auto_complete_digital_orders');
function auto_complete_digital_orders($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);

    // Skip if already completed
    if ($order->has_status('completed')) return;

    // Check all items
    $contains_physical = false;

    foreach ($order->get_items() as $item) {
        $product = $item->get_product();

        // If product is not virtual OR downloadable, it's physical
        if (!$product->is_virtual() && !$product->is_downloadable()) {
            $contains_physical = true;
            break;
        }
    }

    // Complete order if no physical products
    if (!$contains_physical) {
        $order->update_status('completed');
    }
}
</code></pre>

      <h3>Only for Specific Payment Methods</h3>
      <pre><code class="language-php">add_action('woocommerce_thankyou', 'auto_complete_paid_digital_orders');
function auto_complete_paid_digital_orders($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);
    $payment_method = $order->get_payment_method();

    // Only auto-complete for specific payment methods
    $allowed_methods = array('stripe', 'paypal', 'bacs'); // Add your payment method IDs

    if (!in_array($payment_method, $allowed_methods)) return;

    // Check if all products are virtual/downloadable
    $all_digital = true;
    foreach ($order->get_items() as $item) {
        $product = $item->get_product();
        if (!$product->is_virtual() && !$product->is_downloadable()) {
            $all_digital = false;
            break;
        }
    }

    if ($all_digital && $order->has_status('processing')) {
        $order->update_status('completed');
    }
}
</code></pre>

      <h3>Add Custom Order Note</h3>
      <pre><code class="language-php">add_action('woocommerce_thankyou', 'auto_complete_with_note');
function auto_complete_with_note($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);

    // Your auto-complete logic here...
    $all_virtual = true;
    foreach ($order->get_items() as $item) {
        if (!$item->get_product()->is_virtual()) {
            $all_virtual = false;
            break;
        }
    }

    if ($all_virtual) {
        $order->update_status('completed');
        $order->add_order_note('Order auto-completed (virtual products only).');
    }
}
</code></pre>

      <h3>Important Considerations</h3>
      <ul>
        <li><strong>Payment Verification:</strong> Ensure payment is received before auto-completing</li>
        <li><strong>Fraud Prevention:</strong> Consider manual review for high-value orders</li>
        <li><strong>Download Access:</strong> Completed orders immediately grant download access</li>
        <li><strong>Email Timing:</strong> Completion triggers "order completed" email to customer</li>
      </ul>
    `,
    code: `add_action('woocommerce_thankyou', 'auto_complete_virtual_orders');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Orders', 'Automation', 'Virtual Products', 'Downloadable'],
    difficulty: 'Intermediate',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Auto Complete WooCommerce Virtual Orders - Complete Guide 2025',
      metaDescription: 'Automatically complete WooCommerce orders for virtual and downloadable products. Improve customer experience with instant order completion.',
      keywords: ['woocommerce auto complete orders', 'auto complete virtual products', 'woocommerce downloadable products', 'automatic order completion', 'woocommerce automation'],
      canonical: '/blog/auto-complete-orders',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Auto Complete Virtual Orders in WooCommerce",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between virtual and downloadable products in WooCommerce?",
        answer: "Virtual products don't require shipping (like services or memberships). Downloadable products provide files for customers to download. A product can be both virtual and downloadable. Check both conditions to handle all digital products correctly."
      },
      {
        question: "Will auto-completing orders affect payment processing?",
        answer: "No, the woocommerce_thankyou hook fires after payment is processed and verified. However, for payment methods with delayed confirmation (like bank transfers), consider using woocommerce_payment_complete hook instead to ensure funds are received first."
      },
      {
        question: "Can I auto-complete orders with mixed virtual and physical products?",
        answer: "It's not recommended because physical products need shipping. The code examples check for this scenario and only auto-complete when ALL products are virtual/downloadable. Mixed orders should remain in 'processing' status until shipped."
      },
      {
        question: "What happens to download permissions when an order is auto-completed?",
        answer: "WooCommerce automatically grants download access when an order status changes to 'completed'. Auto-completing ensures customers get immediate access to downloadable files without manual intervention."
      },
      {
        question: "Should I auto-complete orders for all payment methods?",
        answer: "Not necessarily. For payment methods with fraud risk (like COD or check), you may want manual review. Use payment method conditions to auto-complete only for trusted payment gateways like Stripe or PayPal."
      }
    ]
  },
  {
    id: 64,
    slug: 'disable-guest-checkout',
    title: 'Disable Guest Checkout in WooCommerce',
    excerpt: 'Force customers to create accounts before checkout in WooCommerce to build your customer database and improve retention.',
    content: `
      <h2>Why Disable Guest Checkout?</h2>
      <p>Requiring account creation helps build your customer database, enables customer order history tracking, improves retention through email marketing, and reduces fraudulent orders.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Disable guest checkout
add_filter('woocommerce_checkout_registration_enabled', '__return_true');
add_filter('woocommerce_enable_guest_checkout', '__return_false');
</code></pre>

      <h3>Redirect to Login for Non-Logged Users</h3>
      <pre><code class="language-php">// Redirect guests to login page when accessing checkout
add_action('template_redirect', 'redirect_guests_from_checkout');
function redirect_guests_from_checkout() {
    if (is_checkout() && !is_user_logged_in()) {
        wp_redirect(wp_login_url(get_permalink(wc_get_page_id('checkout'))));
        exit;
    }
}
</code></pre>

      <h3>Custom Message on Checkout Page</h3>
      <pre><code class="language-php">// Show custom message requiring account creation
add_action('woocommerce_before_checkout_form', 'custom_checkout_login_message');
function custom_checkout_login_message() {
    if (!is_user_logged_in()) {
        wc_print_notice(
            'Please log in or create an account to complete your purchase.
            This allows you to track your orders and manage your account.',
            'notice'
        );
    }
}
</code></pre>

      <h3>Add Benefits Message</h3>
      <pre><code class="language-php">add_action('woocommerce_before_checkout_form', 'account_benefits_message');
function account_benefits_message() {
    if (!is_user_logged_in()) {
        echo '&lt;div class="woocommerce-info"&gt;';
        echo '&lt;h3&gt;Create an account and enjoy these benefits:&lt;/h3&gt;';
        echo '&lt;ul&gt;';
        echo '&lt;li&gt;✓ Track your orders&lt;/li&gt;';
        echo '&lt;li&gt;✓ View order history&lt;/li&gt;';
        echo '&lt;li&gt;✓ Faster checkout next time&lt;/li&gt;';
        echo '&lt;li&gt;✓ Exclusive member discounts&lt;/li&gt;';
        echo '&lt;/ul&gt;';
        echo '&lt;/div&gt;';
    }
}
</code></pre>

      <h3>Disable Guest Checkout for Specific Products</h3>
      <pre><code class="language-php">// Require login only for specific products
add_filter('woocommerce_enable_guest_checkout', 'conditional_guest_checkout');
function conditional_guest_checkout($guest_checkout) {
    // Product IDs that require login
    $require_login_products = array(123, 456, 789);

    foreach (WC()->cart->get_cart() as $cart_item) {
        if (in_array($cart_item['product_id'], $require_login_products)) {
            return false; // Disable guest checkout
        }
    }

    return $guest_checkout; // Allow guest checkout otherwise
}
</code></pre>

      <h3>Disable for Specific Product Categories</h3>
      <pre><code class="language-php">add_filter('woocommerce_enable_guest_checkout', 'disable_guest_for_categories');
function disable_guest_for_categories($guest_checkout) {
    // Category slugs that require login
    $require_login_categories = array('premium', 'membership', 'subscription');

    foreach (WC()->cart->get_cart() as $cart_item) {
        $product_id = $cart_item['product_id'];
        $terms = get_the_terms($product_id, 'product_cat');

        if ($terms) {
            foreach ($terms as $term) {
                if (in_array($term->slug, $require_login_categories)) {
                    return false;
                }
            }
        }
    }

    return $guest_checkout;
}
</code></pre>

      <h3>Add to Cart Restriction</h3>
      <pre><code class="language-php">// Prevent adding to cart if not logged in
add_filter('woocommerce_add_to_cart_validation', 'require_login_to_add_cart', 10, 2);
function require_login_to_add_cart($passed, $product_id) {
    if (!is_user_logged_in()) {
        wc_add_notice('Please log in to add products to your cart.', 'error');
        return false;
    }
    return $passed;
}
</code></pre>

      <h3>Pro Tips</h3>
      <ul>
        <li>Enable social login for easier registration</li>
        <li>Offer incentives for account creation (discounts, free shipping)</li>
        <li>Make registration form short and simple</li>
        <li>Explain benefits clearly to reduce cart abandonment</li>
        <li>Consider impact on conversion rates before implementing</li>
      </ul>
    `,
    code: `add_filter('woocommerce_enable_guest_checkout', '__return_false');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Checkout', 'User Accounts', 'Registration', 'Security'],
    difficulty: 'Beginner',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Disable Guest Checkout WooCommerce - Force Account Creation 2025',
      metaDescription: 'Learn how to disable guest checkout in WooCommerce and require customer accounts. Build your database and improve retention with code snippets.',
      keywords: ['disable guest checkout woocommerce', 'woocommerce require account', 'force login woocommerce', 'woocommerce registration required', 'disable guest purchase'],
      canonical: '/blog/disable-guest-checkout',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Disable Guest Checkout in WooCommerce",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "Will disabling guest checkout reduce my conversion rate?",
        answer: "Potentially yes. Forcing registration adds friction to the checkout process. However, it builds your customer database and improves long-term retention. Consider offering incentives like first-time discounts or free shipping to offset any conversion loss."
      },
      {
        question: "Can I disable guest checkout for specific products only?",
        answer: "Yes, check the cart contents in the woocommerce_enable_guest_checkout filter and return false only when specific products or categories are in the cart. This allows guest checkout for regular products while requiring login for premium items."
      },
      {
        question: "How do I make the registration process less annoying for customers?",
        answer: "Use social login options, minimize required fields (email and password only), enable 'Create account on checkout' option, pre-fill shipping information, and clearly communicate benefits like order tracking and exclusive discounts."
      },
      {
        question: "What's the difference between the two filters for disabling guest checkout?",
        answer: "woocommerce_checkout_registration_enabled shows the registration form on checkout, while woocommerce_enable_guest_checkout controls whether the 'Create an account?' checkbox appears. Use both filters together to fully disable guest checkout."
      },
      {
        question: "Should I redirect guests away from checkout or show the login form?",
        answer: "Showing the login form on the checkout page is better UX - it keeps users in the checkout flow. Redirecting to a separate login page adds extra steps. Use inline login/registration forms with clear benefit messaging for best results."
      }
    ]
  },
  {
    id: 65,
    slug: 'add-custom-payment-method',
    title: 'Create Custom Payment Gateway in WooCommerce',
    excerpt: 'Build a custom payment gateway for WooCommerce to integrate unique payment methods or regional payment providers.',
    content: `
      <h2>Why Create Custom Payment Gateway?</h2>
      <p>Custom payment gateways allow you to integrate regional payment providers, implement custom payment logic, support unique payment methods, or add specialized payment processing for your business needs.</p>

      <h3>The Code Snippet - Basic Gateway</h3>
      <pre><code class="language-php">// Add custom payment gateway
add_action('plugins_loaded', 'init_custom_payment_gateway');
function init_custom_payment_gateway() {
    class WC_Custom_Payment_Gateway extends WC_Payment_Gateway {

        public function __construct() {
            $this->id = 'custom_payment';
            $this->method_title = 'Custom Payment';
            $this->method_description = 'Custom payment gateway description';
            $this->has_fields = true;

            // Load settings
            $this->init_form_fields();
            $this->init_settings();

            // Define user settings
            $this->title = $this->get_option('title');
            $this->description = $this->get_option('description');
            $this->instructions = $this->get_option('instructions');
            $this->enabled = $this->get_option('enabled');

            // Actions
            add_action('woocommerce_update_options_payment_gateways_' . $this->id,
                      array($this, 'process_admin_options'));
            add_action('woocommerce_thankyou_' . $this->id,
                      array($this, 'thankyou_page'));
        }

        public function init_form_fields() {
            $this->form_fields = array(
                'enabled' => array(
                    'title' => 'Enable/Disable',
                    'type' => 'checkbox',
                    'label' => 'Enable Custom Payment',
                    'default' => 'no'
                ),
                'title' => array(
                    'title' => 'Title',
                    'type' => 'text',
                    'description' => 'Payment title shown to customers',
                    'default' => 'Custom Payment',
                    'desc_tip' => true
                ),
                'description' => array(
                    'title' => 'Description',
                    'type' => 'textarea',
                    'description' => 'Payment description shown to customers',
                    'default' => 'Pay using our custom payment method.'
                ),
                'instructions' => array(
                    'title' => 'Instructions',
                    'type' => 'textarea',
                    'description' => 'Instructions shown on thank you page',
                    'default' => 'Thank you for your order.'
                )
            );
        }

        public function payment_fields() {
            if ($this->description) {
                echo wpautop(wptexturize($this->description));
            }

            // Add custom fields here
            echo '&lt;div class="custom-payment-fields"&gt;';
            echo '&lt;p class="form-row form-row-wide"&gt;';
            echo '&lt;label&gt;Transaction ID &lt;span class="required"&gt;*&lt;/span&gt;&lt;/label&gt;';
            echo '&lt;input type="text" name="transaction_id" required&gt;';
            echo '&lt;/p&gt;';
            echo '&lt;/div&gt;';
        }

        public function process_payment($order_id) {
            $order = wc_get_order($order_id);

            // Get transaction ID from POST
            $transaction_id = sanitize_text_field($_POST['transaction_id']);

            // Validate transaction ID
            if (empty($transaction_id)) {
                wc_add_notice('Please enter transaction ID', 'error');
                return;
            }

            // Store transaction ID
            $order->update_meta_data('transaction_id', $transaction_id);
            $order->save();

            // Mark order as processing or completed
            $order->payment_complete($transaction_id);

            // Add order note
            $order->add_order_note('Payment received. Transaction ID: ' . $transaction_id);

            // Empty cart
            WC()->cart->empty_cart();

            // Redirect to thank you page
            return array(
                'result' => 'success',
                'redirect' => $this->get_return_url($order)
            );
        }

        public function thankyou_page($order_id) {
            if ($this->instructions) {
                echo wpautop(wptexturize($this->instructions));
            }
        }
    }
}

// Register the gateway
add_filter('woocommerce_payment_gateways', 'add_custom_payment_gateway');
function add_custom_payment_gateway($gateways) {
    $gateways[] = 'WC_Custom_Payment_Gateway';
    return $gateways;
}</code></pre>

      <h3>Advanced: With External API Integration</h3>
      <pre><code class="language-php">public function process_payment($order_id) {
    $order = wc_get_order($order_id);

    // Prepare API request
    $api_url = 'https://payment-provider.com/api/charge';
    $api_key = $this->get_option('api_key');

    $request_data = array(
        'amount' => $order->get_total(),
        'currency' => $order->get_currency(),
        'order_id' => $order->get_order_number(),
        'customer_email' => $order->get_billing_email()
    );

    $response = wp_remote_post($api_url, array(
        'headers' => array(
            'Authorization' => 'Bearer ' . $api_key,
            'Content-Type' => 'application/json'
        ),
        'body' => json_encode($request_data),
        'timeout' => 30
    ));

    if (is_wp_error($response)) {
        wc_add_notice('Payment error: ' . $response->get_error_message(), 'error');
        return;
    }

    $body = json_decode(wp_remote_retrieve_body($response));

    if ($body->status === 'success') {
        $order->payment_complete($body->transaction_id);
        return array(
            'result' => 'success',
            'redirect' => $this->get_return_url($order)
        );
    } else {
        wc_add_notice('Payment failed: ' . $body->message, 'error');
        return;
    }
}</code></pre>

      <h3>Add Admin Settings</h3>
      <pre><code class="language-php">public function init_form_fields() {
    $this->form_fields = array(
        'enabled' => array(/*...*/),
        'title' => array(/*...*/),
        'api_key' => array(
            'title' => 'API Key',
            'type' => 'password',
            'description' => 'Your payment provider API key'
        ),
        'test_mode' => array(
            'title' => 'Test Mode',
            'type' => 'checkbox',
            'label' => 'Enable test mode',
            'default' => 'yes'
        )
    );
}</code></pre>

      <h3>Key Components</h3>
      <ul>
        <li><strong>$this->id</strong> - Unique gateway ID</li>
        <li><strong>payment_fields()</strong> - Display checkout fields</li>
        <li><strong>process_payment()</strong> - Handle payment processing</li>
        <li><strong>init_form_fields()</strong> - Admin settings configuration</li>
        <li><strong>validate_fields()</strong> - Validate customer input</li>
      </ul>
    `,
    code: `add_action('plugins_loaded', 'init_custom_payment_gateway');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '8 min read',
    category: 'WooCommerce',
    tags: ['WooCommerce', 'Payment Gateway', 'Development', 'Custom Integration', 'Advanced'],
    difficulty: 'Advanced',
    compatibility: 'WooCommerce 3.0+',
    seo: {
      metaTitle: 'Create Custom Payment Gateway WooCommerce - Complete Guide 2025',
      metaDescription: 'Build a custom payment gateway for WooCommerce. Complete code tutorial for integrating custom payment methods and regional payment providers.',
      keywords: ['woocommerce custom payment gateway', 'create payment gateway woocommerce', 'custom payment method woocommerce', 'woocommerce payment integration', 'payment gateway development'],
      canonical: '/blog/add-custom-payment-method',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Create Custom Payment Gateway in WooCommerce",
        "proficiencyLevel": "Advanced"
      }
    },
    faqs: [
      {
        question: "What's required to create a custom WooCommerce payment gateway?",
        answer: "Extend the WC_Payment_Gateway class, define unique gateway ID, implement payment_fields() for checkout form, process_payment() for payment handling, and init_form_fields() for admin settings. Register the gateway with woocommerce_payment_gateways filter."
      },
      {
        question: "How do I integrate an external payment API in my custom gateway?",
        answer: "Use wp_remote_post() in the process_payment() method to send payment data to the API. Include authentication headers, handle the API response, validate the transaction, and call $order->payment_complete() on success or return error messages on failure."
      },
      {
        question: "Should I create a plugin or add code to functions.php?",
        answer: "Always create a separate plugin for custom payment gateways. This ensures the code persists across theme changes, makes updates easier, allows proper dependency management, and follows WordPress best practices for extensibility."
      },
      {
        question: "How do I handle payment validation and security?",
        answer: "Sanitize all user inputs with sanitize_text_field(), validate required fields in validate_fields() method, verify API responses, use nonce verification for AJAX requests, and implement proper error handling with wc_add_notice() for user feedback."
      },
      {
        question: "Can I add custom fields to the checkout for my payment method?",
        answer: "Yes, use the payment_fields() method to output custom HTML form fields. These fields will only appear when your gateway is selected. Access submitted values in process_payment() via $_POST array and store them as order meta data."
      }
    ]
  },
  {
    id: 66,
    slug: 'add-schema-markup',
    title: 'Add Schema Markup to WordPress Posts',
    excerpt: 'Implement JSON-LD schema markup for articles, blogs, and custom post types to improve SEO and rich snippets in search results.',
    content: `
      <h2>Why Add Schema Markup?</h2>
      <p>Schema markup helps search engines understand your content better, enables rich snippets in search results, improves click-through rates, and provides better SEO rankings through structured data.</p>

      <h3>The Code Snippet - Article Schema</h3>
      <pre><code class="language-php">// Add Article Schema to blog posts
add_action('wp_head', 'add_article_schema_markup');
function add_article_schema_markup() {
    if (is_single() && get_post_type() === 'post') {
        global $post;

        $schema = array(
            '@context' => 'https://schema.org',
            '@type' => 'Article',
            'headline' => get_the_title(),
            'description' => get_the_excerpt(),
            'image' => get_the_post_thumbnail_url($post->ID, 'full'),
            'author' => array(
                '@type' => 'Person',
                'name' => get_the_author()
            ),
            'publisher' => array(
                '@type' => 'Organization',
                'name' => get_bloginfo('name'),
                'logo' => array(
                    '@type' => 'ImageObject',
                    'url' => get_site_icon_url()
                )
            ),
            'datePublished' => get_the_date('c'),
            'dateModified' => get_the_modified_date('c')
        );

        echo '&lt;script type="application/ld+json"&gt;';
        echo json_encode($schema, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
        echo '&lt;/script&gt;';
    }
}</code></pre>

      <h3>BlogPosting Schema</h3>
      <pre><code class="language-php">function add_blog_posting_schema() {
    if (!is_single()) return;

    $schema = array(
        '@context' => 'https://schema.org',
        '@type' => 'BlogPosting',
        'mainEntityOfPage' => array(
            '@type' => 'WebPage',
            '@id' => get_permalink()
        ),
        'headline' => get_the_title(),
        'description' => wp_strip_all_tags(get_the_excerpt()),
        'image' => array(
            '@type' => 'ImageObject',
            'url' => get_the_post_thumbnail_url(get_the_ID(), 'full'),
            'width' => 1200,
            'height' => 630
        ),
        'author' => array(
            '@type' => 'Person',
            'name' => get_the_author(),
            'url' => get_author_posts_url(get_the_author_meta('ID'))
        ),
        'publisher' => array(
            '@type' => 'Organization',
            'name' => get_bloginfo('name'),
            'logo' => array(
                '@type' => 'ImageObject',
                'url' => get_site_icon_url()
            )
        ),
        'datePublished' => get_the_date('c'),
        'dateModified' => get_the_modified_date('c'),
        'wordCount' => str_word_count(strip_tags(get_the_content()))
    );

    echo '&lt;script type="application/ld+json"&gt;' .
         json_encode($schema, JSON_UNESCAPED_SLASHES) .
         '&lt;/script&gt;';
}
add_action('wp_head', 'add_blog_posting_schema');</code></pre>

      <h3>Organization Schema</h3>
      <pre><code class="language-php">// Add Organization schema to homepage
add_action('wp_head', 'add_organization_schema');
function add_organization_schema() {
    if (!is_front_page()) return;

    $schema = array(
        '@context' => 'https://schema.org',
        '@type' => 'Organization',
        'name' => get_bloginfo('name'),
        'url' => home_url(),
        'logo' => get_site_icon_url(),
        'description' => get_bloginfo('description')
    );

    echo '&lt;script type="application/ld+json"&gt;' .
         json_encode($schema) .
         '&lt;/script&gt;';
}</code></pre>

      <h3>Testing Schema Markup</h3>
      <ul>
        <li>Use Google's Rich Results Test</li>
        <li>Schema.org validator</li>
        <li>Check Google Search Console</li>
        <li>Test with structured data testing tool</li>
      </ul>
    `,
    code: `add_action('wp_head', 'add_article_schema_markup');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '7 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Schema Markup', 'Structured Data', 'JSON-LD', 'Rich Snippets'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Schema Markup to WordPress Posts - Complete Guide 2025',
      metaDescription: 'Implement JSON-LD schema markup for WordPress articles and posts. Improve SEO with structured data and rich snippets.',
      keywords: ['wordpress schema markup', 'add schema to wordpress', 'json-ld wordpress', 'structured data wordpress', 'article schema markup'],
      canonical: '/blog/add-schema-markup',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Schema Markup to WordPress Posts",
        "proficiencyLevel": "Advanced"
      }
    },
    faqs: [
      {
        question: "What's the difference between Article and BlogPosting schema?",
        answer: "Article is broader for news and journalistic content. BlogPosting is specific for blog posts with additional properties like wordCount. Use BlogPosting for blog content and Article for general articles."
      },
      {
        question: "Should I add schema markup manually or use a plugin?",
        answer: "Manual implementation gives complete control and avoids plugin bloat. Plugins like Yoast are easier for beginners. For custom needs, manual coding provides more flexibility."
      },
      {
        question: "How do I test if my schema markup is working?",
        answer: "Use Google's Rich Results Test at search.google.com/test/rich-results. Also check Google Search Console for structured data errors and use Schema.org validator."
      },
      {
        question: "Will schema markup immediately improve search rankings?",
        answer: "Schema doesn't directly improve rankings but helps search engines understand content, leading to rich snippets. Rich snippets improve CTR, which indirectly benefits SEO."
      },
      {
        question: "Can I add multiple schema types to the same page?",
        answer: "Yes, output separate JSON-LD script tags for each schema type like Article + Breadcrumb + Organization. Ensure they're all valid and don't conflict."
      }
    ]
  },
  {
    id: 67,
    slug: 'add-canonical-url',
    title: 'Add Canonical URLs in WordPress',
    excerpt: 'Implement canonical URLs to prevent duplicate content issues, consolidate link equity, and improve SEO rankings.',
    content: `
      <h2>Why Use Canonical URLs?</h2>
      <p>Canonical URLs tell search engines which version of a page is the primary one, preventing duplicate content penalties, consolidating page authority, and improving SEO performance.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Add canonical URL to head
add_action('wp_head', 'add_canonical_url');
function add_canonical_url() {
    if (is_singular()) {
        $canonical_url = get_permalink();
        echo '&lt;link rel="canonical" href="' . esc_url($canonical_url) . '" /&gt;' . "\n";
    } elseif (is_category()) {
        $canonical_url = get_category_link(get_queried_object_id());
        echo '&lt;link rel="canonical" href="' . esc_url($canonical_url) . '" /&gt;' . "\n";
    } elseif (is_tag()) {
        $canonical_url = get_tag_link(get_queried_object_id());
        echo '&lt;link rel="canonical" href="' . esc_url($canonical_url) . '" /&gt;' . "\n";
    } elseif (is_home() || is_front_page()) {
        echo '&lt;link rel="canonical" href="' . esc_url(home_url('/')) . '" /&gt;' . "\n";
    }
}</code></pre>

      <h3>Handle Paginated Pages</h3>
      <pre><code class="language-php">add_action('wp_head', 'add_canonical_with_pagination');
function add_canonical_with_pagination() {
    if (!is_singular()) return;

    global $wp_query;
    $paged = get_query_var('paged') ? get_query_var('paged') : 1;

    if ($paged > 1) {
        $canonical_url = get_permalink() . 'page/' . $paged . '/';
    } else {
        $canonical_url = get_permalink();
    }

    echo '&lt;link rel="canonical" href="' . esc_url($canonical_url) . '" /&gt;';
}</code></pre>

      <h3>Custom Post Types</h3>
      <pre><code class="language-php">add_action('wp_head', 'add_canonical_custom_post_types');
function add_canonical_custom_post_types() {
    if (is_singular(array('post', 'page', 'product', 'portfolio'))) {
        $canonical_url = get_permalink();

        // Remove query strings
        $canonical_url = strtok($canonical_url, '?');

        echo '&lt;link rel="canonical" href="' . esc_url($canonical_url) . '" /&gt;';
    }
}</code></pre>

      <h3>Handle URL Parameters</h3>
      <pre><code class="language-php">function get_clean_canonical_url() {
    $canonical_url = get_permalink();

    // Remove tracking parameters
    $params_to_remove = array('utm_source', 'utm_medium', 'utm_campaign', 'ref', 'fbclid');

    $url_parts = parse_url($canonical_url);
    if (isset($url_parts['query'])) {
        parse_str($url_parts['query'], $query_params);

        foreach ($params_to_remove as $param) {
            unset($query_params[$param]);
        }

        if (!empty($query_params)) {
            $canonical_url = $url_parts['scheme'] . '://' . $url_parts['host'] .
                           $url_parts['path'] . '?' . http_build_query($query_params);
        } else {
            $canonical_url = $url_parts['scheme'] . '://' . $url_parts['host'] .
                           $url_parts['path'];
        }
    }

    return $canonical_url;
}</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Always use absolute URLs</li>
        <li>Self-reference canonical on original pages</li>
        <li>Remove session IDs and tracking parameters</li>
        <li>Handle pagination correctly</li>
        <li>Use consistent protocol (HTTP/HTTPS)</li>
      </ul>
    `,
    code: `add_action('wp_head', 'add_canonical_url');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Canonical URLs', 'Duplicate Content', 'Link Equity', 'Search Optimization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Canonical URLs WordPress - Prevent Duplicate Content 2025',
      metaDescription: 'Implement canonical URLs in WordPress to prevent duplicate content issues. Complete guide with code snippets for better SEO.',
      keywords: ['wordpress canonical url', 'add canonical tag wordpress', 'prevent duplicate content', 'canonical link wordpress', 'seo canonical urls'],
      canonical: '/blog/add-canonical-url',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Canonical URLs in WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What is a canonical URL and why is it important?",
        answer: "A canonical URL is the preferred version of a web page when multiple URLs show similar content. It tells search engines which version to index, preventing duplicate content issues and consolidating page authority to improve SEO."
      },
      {
        question: "Should canonical URLs be absolute or relative?",
        answer: "Always use absolute URLs (https://example.com/page/) not relative (/page/). Absolute URLs prevent confusion for search engines and ensure the canonical reference is unambiguous across different contexts."
      },
      {
        question: "Does WordPress add canonical URLs automatically?",
        answer: "Modern WordPress (4.6+) adds basic canonical tags automatically. However, they may not handle all cases like custom post types, pagination, or URL parameters. Custom implementation gives you complete control."
      },
      {
        question: "How do I handle canonical URLs for paginated content?",
        answer: "For paginated archives, each page should have a self-referencing canonical URL (page 2 canonicals to page 2). For paginated single posts, point all pages to the first page or use rel=prev/next tags."
      },
      {
        question: "Should I remove UTM parameters from canonical URLs?",
        answer: "Yes, remove tracking parameters (utm_*, fbclid, ref, etc.) from canonical URLs. These don't change content but create duplicate URLs. Your canonical should point to the clean URL without tracking parameters."
      }
    ]
  },
  {
    id: 68,
    slug: 'custom-meta-descriptions',
    title: 'Add Custom Meta Descriptions in WordPress',
    excerpt: 'Create custom meta descriptions for posts and pages to improve click-through rates and search engine optimization.',
    content: `
      <h2>Why Custom Meta Descriptions Matter?</h2>
      <p>Meta descriptions appear in search results below your title, influencing click-through rates. Custom descriptions can improve CTR, provide relevant summaries, and boost SEO performance.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Add custom meta description field
add_action('add_meta_boxes', 'add_meta_description_box');
function add_meta_description_box() {
    add_meta_box(
        'meta_description_box',
        'SEO Meta Description',
        'render_meta_description_box',
        array('post', 'page'),
        'normal',
        'high'
    );
}

function render_meta_description_box($post) {
    $meta_description = get_post_meta($post->ID, '_meta_description', true);
    wp_nonce_field('save_meta_description', 'meta_description_nonce');
    ?&gt;
    &lt;textarea name="meta_description" rows="3" style="width:100%;"
              maxlength="160" placeholder="Enter meta description (max 160 characters)"&gt;&lt;?php
        echo esc_attr($meta_description);
    ?&gt;&lt;/textarea&gt;
    &lt;p&gt;&lt;small&gt;Character count: &lt;span id="char_count"&gt;0&lt;/span&gt;/160&lt;/small&gt;&lt;/p&gt;
    &lt;script&gt;
    jQuery(document).ready(function($) {
        var textarea = $('textarea[name="meta_description"]');
        var counter = $('#char_count');
        counter.text(textarea.val().length);
        textarea.on('input', function() {
            counter.text($(this).val().length);
        });
    });
    &lt;/script&gt;
    &lt;?php
}

// Save meta description
add_action('save_post', 'save_meta_description');
function save_meta_description($post_id) {
    if (!isset($_POST['meta_description_nonce'])) return;
    if (!wp_verify_nonce($_POST['meta_description_nonce'], 'save_meta_description')) return;
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
    if (!current_user_can('edit_post', $post_id)) return;

    if (isset($_POST['meta_description'])) {
        $meta_description = sanitize_text_field($_POST['meta_description']);
        update_post_meta($post_id, '_meta_description', $meta_description);
    }
}

// Output meta description in head
add_action('wp_head', 'output_meta_description');
function output_meta_description() {
    if (is_singular()) {
        $meta_description = get_post_meta(get_the_ID(), '_meta_description', true);

        if (empty($meta_description)) {
            // Fallback to excerpt
            $meta_description = get_the_excerpt();
            $meta_description = wp_strip_all_tags($meta_description);
            $meta_description = substr($meta_description, 0, 160);
        }

        if (!empty($meta_description)) {
            echo '&lt;meta name="description" content="' .
                 esc_attr($meta_description) . '" /&gt;' . "\n";
        }
    } elseif (is_home() || is_front_page()) {
        $description = get_bloginfo('description');
        echo '&lt;meta name="description" content="' .
             esc_attr($description) . '" /&gt;' . "\n";
    } elseif (is_category()) {
        $description = category_description();
        $description = wp_strip_all_tags($description);
        if (!empty($description)) {
            echo '&lt;meta name="description" content="' .
                 esc_attr($description) . '" /&gt;' . "\n";
        }
    }
}</code></pre>

      <h3>Auto-Generate from Content</h3>
      <pre><code class="language-php">function auto_generate_meta_description($post_id) {
    $existing = get_post_meta($post_id, '_meta_description', true);
    if (!empty($existing)) return; // Don't override existing

    $post = get_post($post_id);
    $content = $post->post_content;

    // Strip shortcodes and HTML
    $content = strip_shortcodes($content);
    $content = wp_strip_all_tags($content);

    // Get first 160 characters
    $meta_description = substr($content, 0, 157) . '...';

    update_post_meta($post_id, '_meta_description', $meta_description);
}
add_action('publish_post', 'auto_generate_meta_description');</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Keep between 150-160 characters</li>
        <li>Include target keywords naturally</li>
        <li>Make it compelling and action-oriented</li>
        <li>Avoid duplicate descriptions</li>
        <li>Accurately summarize page content</li>
      </ul>
    `,
    code: `add_action('wp_head', 'output_meta_description');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Meta Descriptions', 'Click-Through Rate', 'Search Optimization', 'Custom Fields'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Custom Meta Descriptions WordPress - Improve CTR 2025',
      metaDescription: 'Create custom meta descriptions for WordPress posts and pages. Improve search click-through rates with targeted descriptions.',
      keywords: ['wordpress meta description', 'custom meta description wordpress', 'add meta description wordpress', 'seo meta tags wordpress', 'improve ctr wordpress'],
      canonical: '/blog/custom-meta-descriptions',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Custom Meta Descriptions in WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What is the ideal length for meta descriptions?",
        answer: "Meta descriptions should be between 150-160 characters. Google typically displays up to 160 characters on desktop and slightly less on mobile. Longer descriptions get truncated with '...' in search results."
      },
      {
        question: "Do meta descriptions directly affect SEO rankings?",
        answer: "No, meta descriptions are not a direct ranking factor. However, they significantly impact click-through rates (CTR) from search results, and higher CTR can indirectly improve rankings by signaling relevance to search engines."
      },
      {
        question: "What happens if I don't add a meta description?",
        answer: "Google will auto-generate one from page content, often pulling text from the beginning of the article. Auto-generated descriptions may not be optimized or compelling, potentially reducing CTR."
      },
      {
        question: "Should I include keywords in meta descriptions?",
        answer: "Yes, include your target keyword naturally. While not a ranking factor, Google bolds matching keywords in search results, making your listing more noticeable and relevant to searchers."
      },
      {
        question: "Can I use the same meta description for multiple pages?",
        answer: "No, avoid duplicate meta descriptions. Each page should have a unique description that accurately reflects its specific content. Duplicate descriptions waste opportunities to attract clicks for different search queries."
      }
    ]
  },
  {
    id: 69,
    slug: 'add-open-graph-tags',
    title: 'Add Open Graph Meta Tags to WordPress',
    excerpt: 'Implement Open Graph tags to control how your content appears when shared on social media platforms like Facebook and LinkedIn.',
    content: `
      <h2>Why Use Open Graph Tags?</h2>
      <p>Open Graph tags control how your content displays on social media, ensuring proper titles, descriptions, and images appear when shared on Facebook, LinkedIn, Twitter, and other platforms.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Add Open Graph meta tags
add_action('wp_head', 'add_open_graph_tags');
function add_open_graph_tags() {
    if (!is_singular()) return;

    global $post;
    setup_postdata($post);

    // Basic OG tags
    echo '&lt;meta property="og:type" content="article" /&gt;' . "\n";
    echo '&lt;meta property="og:title" content="' . esc_attr(get_the_title()) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:url" content="' . esc_url(get_permalink()) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:site_name" content="' . esc_attr(get_bloginfo('name')) . '" /&gt;' . "\n";

    // Description
    $description = get_the_excerpt();
    $description = wp_strip_all_tags($description);
    if (!empty($description)) {
        echo '&lt;meta property="og:description" content="' . esc_attr($description) . '" /&gt;' . "\n";
    }

    // Image
    if (has_post_thumbnail()) {
        $thumbnail_url = get_the_post_thumbnail_url($post->ID, 'large');
        echo '&lt;meta property="og:image" content="' . esc_url($thumbnail_url) . '" /&gt;' . "\n";

        // Image dimensions
        $thumbnail_id = get_post_thumbnail_id($post->ID);
        $image_meta = wp_get_attachment_metadata($thumbnail_id);
        if ($image_meta) {
            echo '&lt;meta property="og:image:width" content="' . $image_meta['width'] . '" /&gt;' . "\n";
            echo '&lt;meta property="og:image:height" content="' . $image_meta['height'] . '" /&gt;' . "\n";
        }
    }

    // Article metadata
    echo '&lt;meta property="article:published_time" content="' .
         get_the_date('c') . '" /&gt;' . "\n";
    echo '&lt;meta property="article:modified_time" content="' .
         get_the_modified_date('c') . '" /&gt;' . "\n";

    // Author
    echo '&lt;meta property="article:author" content="' .
         esc_attr(get_the_author()) . '" /&gt;' . "\n";

    wp_reset_postdata();
}</code></pre>

      <h3>Enhanced Version with FB App ID</h3>
      <pre><code class="language-php">function add_enhanced_open_graph_tags() {
    if (!is_singular()) return;

    // Facebook App ID (optional but recommended)
    $fb_app_id = '1234567890'; // Replace with your FB App ID
    if ($fb_app_id) {
        echo '&lt;meta property="fb:app_id" content="' . $fb_app_id . '" /&gt;' . "\n";
    }

    echo '&lt;meta property="og:locale" content="' . get_locale() . '" /&gt;' . "\n";
    echo '&lt;meta property="og:type" content="article" /&gt;' . "\n";
    echo '&lt;meta property="og:title" content="' . esc_attr(get_the_title()) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:url" content="' . esc_url(get_permalink()) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:site_name" content="' .
         esc_attr(get_bloginfo('name')) . '" /&gt;' . "\n";

    // Custom excerpt or meta description
    $description = get_post_meta(get_the_ID(), '_meta_description', true);
    if (empty($description)) {
        $description = get_the_excerpt();
    }
    echo '&lt;meta property="og:description" content="' .
         esc_attr(wp_strip_all_tags($description)) . '" /&gt;' . "\n";

    // Featured image
    if (has_post_thumbnail()) {
        $image_url = get_the_post_thumbnail_url(get_the_ID(), 'full');
        echo '&lt;meta property="og:image" content="' . esc_url($image_url) . '" /&gt;' . "\n";
        echo '&lt;meta property="og:image:secure_url" content="' .
             esc_url(str_replace('http:', 'https:', $image_url)) . '" /&gt;' . "\n";
    }

    // Categories as tags
    $categories = get_the_category();
    foreach ($categories as $category) {
        echo '&lt;meta property="article:section" content="' .
             esc_attr($category->name) . '" /&gt;' . "\n";
    }

    // Tags
    $tags = get_the_tags();
    if ($tags) {
        foreach ($tags as $tag) {
            echo '&lt;meta property="article:tag" content="' .
                 esc_attr($tag->name) . '" /&gt;' . "\n";
        }
    }
}
add_action('wp_head', 'add_enhanced_open_graph_tags');</code></pre>

      <h3>Homepage Open Graph</h3>
      <pre><code class="language-php">add_action('wp_head', 'add_homepage_og_tags');
function add_homepage_og_tags() {
    if (!is_front_page()) return;

    echo '&lt;meta property="og:type" content="website" /&gt;' . "\n";
    echo '&lt;meta property="og:title" content="' .
         esc_attr(get_bloginfo('name')) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:description" content="' .
         esc_attr(get_bloginfo('description')) . '" /&gt;' . "\n";
    echo '&lt;meta property="og:url" content="' . esc_url(home_url('/')) . '" /&gt;' . "\n";

    // Site logo or custom image
    $logo_url = get_site_icon_url(512);
    if ($logo_url) {
        echo '&lt;meta property="og:image" content="' . esc_url($logo_url) . '" /&gt;' . "\n";
    }
}</code></pre>

      <h3>Image Requirements</h3>
      <ul>
        <li><strong>Minimum size:</strong> 200x200 pixels</li>
        <li><strong>Recommended:</strong> 1200x630 pixels</li>
        <li><strong>Aspect ratio:</strong> 1.91:1</li>
        <li><strong>Format:</strong> JPG or PNG</li>
        <li><strong>Max file size:</strong> 8MB</li>
      </ul>
    `,
    code: `add_action('wp_head', 'add_open_graph_tags');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Open Graph', 'Social Media', 'Facebook', 'Meta Tags'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Open Graph Tags WordPress - Social Media Optimization 2025',
      metaDescription: 'Implement Open Graph meta tags in WordPress to control social media sharing appearance on Facebook, LinkedIn, and other platforms.',
      keywords: ['wordpress open graph', 'add og tags wordpress', 'facebook meta tags wordpress', 'social media wordpress', 'open graph protocol'],
      canonical: '/blog/add-open-graph-tags',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Open Graph Meta Tags to WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What are Open Graph tags and why do I need them?",
        answer: "Open Graph tags are meta tags that control how your content appears when shared on social media platforms like Facebook, LinkedIn, and others. They ensure proper titles, descriptions, and images display, improving engagement and click-through rates from social shares."
      },
      {
        question: "What's the recommended image size for Open Graph?",
        answer: "Facebook recommends 1200x630 pixels (1.91:1 aspect ratio) for optimal display on all devices. Minimum is 200x200 pixels, but larger images ensure better quality across desktop and mobile platforms."
      },
      {
        question: "Do I need Open Graph tags if I already have Twitter Cards?",
        answer: "Twitter falls back to Open Graph tags if Twitter Card tags aren't present, but it's best practice to include both. Each platform has specific tag prefixes (og: for Open Graph, twitter: for Twitter Cards) for optimal control."
      },
      {
        question: "How can I test my Open Graph tags?",
        answer: "Use Facebook's Sharing Debugger (developers.facebook.com/tools/debug/) to test and clear cache. LinkedIn Post Inspector and other social platform debugging tools also validate OG tags and show preview appearances."
      },
      {
        question: "Why doesn't my updated image appear when sharing?",
        answer: "Social platforms cache Open Graph data. Use Facebook's Sharing Debugger to scrape and refresh the cache. After updating OG tags, always use debugging tools to clear cached data and see updated previews."
      }
    ]
  },
  {
    id: 70,
    slug: 'generate-xml-sitemap',
    title: 'Generate XML Sitemap in WordPress',
    excerpt: 'Create a dynamic XML sitemap to help search engines discover and index your WordPress content more efficiently.',
    content: `
      <h2>Why Generate an XML Sitemap?</h2>
      <p>XML sitemaps help search engines discover all your pages, improve indexing efficiency, prioritize important content, and keep search engines updated when you publish new content.</p>

      <h3>The Code Snippet - Basic Sitemap</h3>
      <pre><code class="language-php">// Generate XML Sitemap
add_action('init', 'register_sitemap_rewrite');
function register_sitemap_rewrite() {
    add_rewrite_rule('^sitemap\.xml$', 'index.php?custom_sitemap=1', 'top');
}

add_filter('query_vars', 'add_sitemap_query_var');
function add_sitemap_query_var($vars) {
    $vars[] = 'custom_sitemap';
    return $vars;
}

add_action('template_redirect', 'generate_xml_sitemap');
function generate_xml_sitemap() {
    if (!get_query_var('custom_sitemap')) return;

    header('Content-Type: application/xml; charset=utf-8');
    echo '&lt;?xml version="1.0" encoding="UTF-8"?&gt;';
    echo '&lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;';

    // Homepage
    echo '&lt;url&gt;';
    echo '&lt;loc&gt;' . esc_url(home_url('/')) . '&lt;/loc&gt;';
    echo '&lt;lastmod&gt;' . date('c') . '&lt;/lastmod&gt;';
    echo '&lt;changefreq&gt;daily&lt;/changefreq&gt;';
    echo '&lt;priority&gt;1.0&lt;/priority&gt;';
    echo '&lt;/url&gt;';

    // Posts
    $posts = get_posts(array(
        'post_type' => 'post',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'orderby' => 'modified',
        'order' => 'DESC'
    ));

    foreach ($posts as $post) {
        echo '&lt;url&gt;';
        echo '&lt;loc&gt;' . esc_url(get_permalink($post->ID)) . '&lt;/loc&gt;';
        echo '&lt;lastmod&gt;' . date('c', strtotime($post->post_modified)) . '&lt;/lastmod&gt;';
        echo '&lt;changefreq&gt;weekly&lt;/changefreq&gt;';
        echo '&lt;priority&gt;0.8&lt;/priority&gt;';
        echo '&lt;/url&gt;';
    }

    // Pages
    $pages = get_posts(array(
        'post_type' => 'page',
        'post_status' => 'publish',
        'posts_per_page' => -1
    ));

    foreach ($pages as $page) {
        echo '&lt;url&gt;';
        echo '&lt;loc&gt;' . esc_url(get_permalink($page->ID)) . '&lt;/loc&gt;';
        echo '&lt;lastmod&gt;' . date('c', strtotime($page->post_modified)) . '&lt;/lastmod&gt;';
        echo '&lt;changefreq&gt;monthly&lt;/changefreq&gt;';
        echo '&lt;priority&gt;0.6&lt;/priority&gt;';
        echo '&lt;/url&gt;';
    }

    echo '&lt;/urlset&gt;';
    exit;
}

// Flush rewrite rules on activation
register_activation_hook(__FILE__, 'flush_rewrite_rules');</code></pre>

      <h3>Include Custom Post Types</h3>
      <pre><code class="language-php">// Add custom post types to sitemap
$custom_post_types = array('portfolio', 'testimonials', 'products');

foreach ($custom_post_types as $post_type) {
    $cpt_posts = get_posts(array(
        'post_type' => $post_type,
        'post_status' => 'publish',
        'posts_per_page' => -1
    ));

    foreach ($cpt_posts as $cpt) {
        echo '&lt;url&gt;';
        echo '&lt;loc&gt;' . esc_url(get_permalink($cpt->ID)) . '&lt;/loc&gt;';
        echo '&lt;lastmod&gt;' . date('c', strtotime($cpt->post_modified)) . '&lt;/lastmod&gt;';
        echo '&lt;priority&gt;0.7&lt;/priority&gt;';
        echo '&lt;/url&gt;';
    }
}</code></pre>

      <h3>Add Taxonomies</h3>
      <pre><code class="language-php">// Add categories to sitemap
$categories = get_categories(array('hide_empty' => true));
foreach ($categories as $category) {
    echo '&lt;url&gt;';
    echo '&lt;loc&gt;' . esc_url(get_category_link($category->term_id)) . '&lt;/loc&gt;';
    echo '&lt;changefreq&gt;weekly&lt;/changefreq&gt;';
    echo '&lt;priority&gt;0.5&lt;/priority&gt;';
    echo '&lt;/url&gt;';
}

// Add tags
$tags = get_tags(array('hide_empty' => true));
foreach ($tags as $tag) {
    echo '&lt;url&gt;';
    echo '&lt;loc&gt;' . esc_url(get_tag_link($tag->term_id)) . '&lt;/loc&gt;';
    echo '&lt;changefreq&gt;weekly&lt;/changefreq&gt;';
    echo '&lt;priority&gt;0.4&lt;/priority&gt;';
    echo '&lt;/url&gt;';
}</code></pre>

      <h3>Priority Guidelines</h3>
      <ul>
        <li><strong>1.0</strong> - Homepage</li>
        <li><strong>0.8-0.9</strong> - Important pages, recent posts</li>
        <li><strong>0.6-0.7</strong> - Regular pages, custom post types</li>
        <li><strong>0.4-0.5</strong> - Categories, tags, archives</li>
      </ul>

      <h3>Submit to Search Engines</h3>
      <p>After generating your sitemap at yourdomain.com/sitemap.xml:</p>
      <ol>
        <li>Submit to Google Search Console</li>
        <li>Submit to Bing Webmaster Tools</li>
        <li>Add sitemap URL to robots.txt</li>
        <li>Monitor indexing status regularly</li>
      </ol>
    `,
    code: `add_action('template_redirect', 'generate_xml_sitemap');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '7 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'XML Sitemap', 'Search Engines', 'Indexing', 'Site Structure'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Generate XML Sitemap WordPress - Improve Indexing 2025',
      metaDescription: 'Create a dynamic XML sitemap in WordPress to help search engines discover and index your content efficiently. Complete code guide.',
      keywords: ['wordpress xml sitemap', 'generate sitemap wordpress', 'create xml sitemap', 'wordpress seo sitemap', 'sitemap generator code'],
      canonical: '/blog/generate-xml-sitemap',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Generate XML Sitemap in WordPress",
        "proficiencyLevel": "Advanced"
      }
    },
    faqs: [
      {
        question: "Does WordPress generate sitemaps automatically?",
        answer: "WordPress 5.5+ includes basic XML sitemaps at /wp-sitemap.xml. However, custom sitemaps offer more control over priorities, change frequencies, excluded content, and custom post types not included in default sitemaps."
      },
      {
        question: "What's the difference between priority and changefreq in sitemaps?",
        answer: "Priority (0.0-1.0) indicates relative importance of pages on your site. Changefreq suggests how often pages update (daily, weekly, monthly). Both are hints to search engines, not guarantees of crawl frequency or ranking."
      },
      {
        question: "Should I include all pages in my sitemap?",
        answer: "No, exclude low-value pages like thank-you pages, admin pages, duplicate content, or paginated archives. Focus on high-quality, indexable content you want search engines to prioritize."
      },
      {
        question: "How often should sitemaps be updated?",
        answer: "Dynamic sitemaps (like this code) update automatically. Submit updated sitemaps to Search Console when making major site changes. Search engines typically re-crawl sitemaps based on update frequency observed over time."
      },
      {
        question: "Can I have multiple sitemaps?",
        answer: "Yes, use a sitemap index file for large sites (50,000+ URLs). Create separate sitemaps for posts, pages, categories, and products, then reference them in a sitemap index at /sitemap_index.xml."
      }
    ]
  },
  {
    id: 71,
    slug: 'add-nofollow-external-links',
    title: 'Add Nofollow to External Links in WordPress',
    excerpt: 'Automatically add rel="nofollow" attributes to external links to control link equity and comply with Google guidelines.',
    content: `
      <h2>Why Use Nofollow on External Links?</h2>
      <p>Nofollow attributes tell search engines not to pass link equity to external sites, helping preserve your site's authority, comply with sponsored content guidelines, and control link flow.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Add nofollow to all external links
add_filter('the_content', 'add_nofollow_to_external_links');
function add_nofollow_to_external_links($content) {
    $regexp = '&lt;a\s[^&gt;]*href=("??)([^" &gt;]*?)\\1[^&gt;]*&gt;';

    if (preg_match_all("/$regexp/siU", $content, $matches, PREG_SET_ORDER)) {
        if (!empty($matches)) {
            $site_url = get_option('siteurl');

            for ($i = 0; $i &lt; count($matches); $i++) {
                $tag = $matches[$i][0];
                $url = $matches[$i][2];

                // Check if external link
                if (strpos($url, $site_url) === false &&
                    strpos($url, 'http') === 0) {

                    // Check if already has rel attribute
                    if (preg_match('/rel\s*=/', $tag)) {
                        // Add to existing rel
                        $new_tag = preg_replace('/rel="([^"]*)"/',
                                               'rel="$1 nofollow"', $tag);
                    } else {
                        // Add new rel attribute
                        $new_tag = str_replace('&gt;', ' rel="nofollow"&gt;', $tag);
                    }

                    $content = str_replace($tag, $new_tag, $content);
                }
            }
        }
    }

    return $content;
}</code></pre>

      <h3>Add Nofollow with Target Blank</h3>
      <pre><code class="language-php">add_filter('the_content', 'add_nofollow_and_target_blank');
function add_nofollow_and_target_blank($content) {
    $internal_host = parse_url(home_url(), PHP_URL_HOST);

    $dom = new DOMDocument();
    @$dom->loadHTML(mb_convert_encoding($content, 'HTML-ENTITIES', 'UTF-8'),
                    LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

    $links = $dom->getElementsByTagName('a');

    foreach ($links as $link) {
        $href = $link->getAttribute('href');
        $link_host = parse_url($href, PHP_URL_HOST);

        // Check if external
        if ($link_host && $link_host !== $internal_host) {
            // Add nofollow
            $rel = $link->getAttribute('rel');
            if ($rel && strpos($rel, 'nofollow') === false) {
                $link->setAttribute('rel', $rel . ' nofollow');
            } else if (!$rel) {
                $link->setAttribute('rel', 'nofollow');
            }

            // Add target blank
            if (!$link->getAttribute('target')) {
                $link->setAttribute('target', '_blank');
            }

            // Add noreferrer for security
            $rel = $link->getAttribute('rel');
            if (strpos($rel, 'noreferrer') === false) {
                $link->setAttribute('rel', $rel . ' noreferrer');
            }
        }
    }

    return $dom->saveHTML();
}</code></pre>

      <h3>Exclude Specific Domains</h3>
      <pre><code class="language-php">function add_nofollow_except_trusted($content) {
    // Trusted domains that should not get nofollow
    $trusted_domains = array(
        'youtube.com',
        'wikipedia.org',
        'github.com'
    );

    $internal_host = parse_url(home_url(), PHP_URL_HOST);

    $dom = new DOMDocument();
    @$dom->loadHTML($content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

    foreach ($dom->getElementsByTagName('a') as $link) {
        $href = $link->getAttribute('href');
        $link_host = parse_url($href, PHP_URL_HOST);

        if ($link_host && $link_host !== $internal_host) {
            $is_trusted = false;

            foreach ($trusted_domains as $domain) {
                if (strpos($link_host, $domain) !== false) {
                    $is_trusted = true;
                    break;
                }
            }

            if (!$is_trusted) {
                $rel = $link->getAttribute('rel');
                $link->setAttribute('rel', trim($rel . ' nofollow'));
            }
        }
    }

    return $dom->saveHTML();
}
add_filter('the_content', 'add_nofollow_except_trusted');</code></pre>

      <h3>When to Use Nofollow</h3>
      <ul>
        <li><strong>Sponsored/Paid Links:</strong> Required by Google</li>
        <li><strong>User-Generated Content:</strong> Comments, forum posts</li>
        <li><strong>Untrusted Content:</strong> Links you don't fully endorse</li>
        <li><strong>Login/Registration Pages:</strong> No need to pass link equity</li>
      </ul>

      <h3>When NOT to Use Nofollow</h3>
      <ul>
        <li>Links to your own content (internal links)</li>
        <li>Editorial links to quality sources</li>
        <li>Links that add value to readers</li>
        <li>Trusted partner sites</li>
      </ul>
    `,
    code: `add_filter('the_content', 'add_nofollow_to_external_links');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'External Links', 'Nofollow', 'Link Equity', 'PageRank'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Nofollow to External Links WordPress - SEO Guide 2025',
      metaDescription: 'Automatically add rel="nofollow" to external links in WordPress. Control link equity and comply with Google guidelines with code snippets.',
      keywords: ['wordpress nofollow external links', 'add nofollow wordpress', 'nofollow attribute wordpress', 'external links seo', 'rel nofollow wordpress'],
      canonical: '/blog/add-nofollow-external-links',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Nofollow to External Links in WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What does the nofollow attribute do?",
        answer: "Nofollow tells search engines not to follow the link or pass PageRank/link equity to the destination. It's used for untrusted content, paid links, or when you don't want to vouch for the linked site."
      },
      {
        question: "Should I nofollow all external links?",
        answer: "No, only nofollow external links when necessary (sponsored, untrusted, or user-generated content). Natural editorial links to quality sources are valuable for users and generally don't need nofollow."
      },
      {
        question: "What's the difference between nofollow and ugc?",
        answer: "Nofollow is general 'don't follow'. UGC (user-generated content) is specific for comments/forums. Sponsored is for paid/affiliate links. Use the most specific attribute - Google treats them similarly but they provide better context."
      },
      {
        question: "Does nofollow hurt my SEO?",
        answer: "No, using nofollow on external links doesn't hurt your SEO. It's a best practice for certain link types. However, over-using nofollow on editorial links can make your site seem less trustworthy and reduce its usefulness."
      },
      {
        question: "Should I add nofollow to internal links?",
        answer: "Never add nofollow to internal links unless you specifically don't want a page indexed (like thank-you pages). Internal links pass authority to important pages and help search engines understand site structure."
      }
    ]
  },
  {
    id: 72,
    slug: 'redirect-attachment-pages',
    title: 'Redirect Attachment Pages to Parent Post',
    excerpt: 'Redirect WordPress attachment pages to parent posts or media files to improve SEO and user experience.',
    content: `
      <h2>Why Redirect Attachment Pages?</h2>
      <p>WordPress creates dedicated pages for media attachments, which offer little value to users and can create thin content issues. Redirecting them improves SEO and provides better user experience.</p>

      <h3>The Code Snippet - Redirect to Parent</h3>
      <pre><code class="language-php">// Redirect attachment pages to parent post
add_action('template_redirect', 'redirect_attachment_to_parent');
function redirect_attachment_to_parent() {
    if (is_attachment()) {
        global $post;

        if ($post->post_parent) {
            // Redirect to parent post
            $parent_url = get_permalink($post->post_parent);
            wp_redirect($parent_url, 301);
            exit;
        } else {
            // No parent, redirect to homepage
            wp_redirect(home_url(), 301);
            exit;
        }
    }
}</code></pre>

      <h3>Redirect to Media File</h3>
      <pre><code class="language-php">// Redirect to actual media file
add_action('template_redirect', 'redirect_attachment_to_file');
function redirect_attachment_to_file() {
    if (is_attachment()) {
        global $post;

        $attachment_url = wp_get_attachment_url($post->ID);

        if ($attachment_url) {
            wp_redirect($attachment_url, 301);
            exit;
        }
    }
}</code></pre>

      <h3>Smart Redirect Logic</h3>
      <pre><code class="language-php">add_action('template_redirect', 'smart_attachment_redirect');
function smart_attachment_redirect() {
    if (!is_attachment()) return;

    global $post;

    // Priority 1: Redirect to parent post
    if ($post->post_parent) {
        $parent_url = get_permalink($post->post_parent);
        wp_redirect($parent_url, 301);
        exit;
    }

    // Priority 2: Redirect to media file (for images, PDFs)
    $mime_type = get_post_mime_type($post->ID);
    $viewable_types = array('image/', 'application/pdf', 'video/', 'audio/');

    foreach ($viewable_types as $type) {
        if (strpos($mime_type, $type) === 0) {
            $attachment_url = wp_get_attachment_url($post->ID);
            if ($attachment_url) {
                wp_redirect($attachment_url, 301);
                exit;
            }
        }
    }

    // Priority 3: Redirect to homepage
    wp_redirect(home_url(), 301);
    exit;
}</code></pre>

      <h3>Exclude Specific Attachments</h3>
      <pre><code class="language-php">add_action('template_redirect', 'conditional_attachment_redirect');
function conditional_attachment_redirect() {
    if (!is_attachment()) return;

    global $post;

    // Don't redirect if attachment has custom field "keep_page"
    if (get_post_meta($post->ID, 'keep_attachment_page', true)) {
        return;
    }

    // Don't redirect PDFs or downloadable files
    $mime_type = get_post_mime_type($post->ID);
    if (strpos($mime_type, 'application/') === 0) {
        return;
    }

    // Redirect images to parent
    if ($post->post_parent) {
        wp_redirect(get_permalink($post->post_parent), 301);
        exit;
    }
}</code></pre>

      <h3>Remove Attachment Pages from Sitemap</h3>
      <pre><code class="language-php">// Prevent attachment pages from appearing in sitemap
add_filter('wp_sitemaps_post_types', 'remove_attachments_from_sitemap');
function remove_attachments_from_sitemap($post_types) {
    unset($post_types['attachment']);
    return $post_types;
}</code></pre>

      <h3>SEO Benefits</h3>
      <ul>
        <li>Eliminates thin content pages</li>
        <li>Improves crawl efficiency</li>
        <li>Better user experience</li>
        <li>Prevents duplicate content issues</li>
        <li>Consolidates link equity</li>
      </ul>
    `,
    code: `add_action('template_redirect', 'redirect_attachment_to_parent');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '4 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Redirects', 'Attachment Pages', 'Media', 'User Experience'],
    difficulty: 'Beginner',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Redirect WordPress Attachment Pages - Fix Thin Content 2025',
      metaDescription: 'Redirect WordPress attachment pages to parent posts or media files. Eliminate thin content and improve SEO with simple code snippets.',
      keywords: ['wordpress attachment redirect', 'redirect attachment pages', 'wordpress media pages', 'attachment seo wordpress', 'disable attachment pages'],
      canonical: '/blog/redirect-attachment-pages',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Redirect Attachment Pages to Parent Post",
        "proficiencyLevel": "Beginner"
      }
    },
    faqs: [
      {
        question: "What are WordPress attachment pages and why are they problematic?",
        answer: "WordPress creates individual pages for uploaded media files (images, PDFs, etc.). These pages often have minimal content, creating thin content issues for SEO. Users also rarely want to land on an image attachment page rather than the actual post."
      },
      {
        question: "Should I redirect to parent post or media file?",
        answer: "Redirect to parent post when the media is part of blog content, providing context for the user. Redirect to the file itself for standalone media like wallpapers or downloads. Choose based on how users would want to access the media."
      },
      {
        question: "Will redirecting attachment pages break image SEO?",
        answer: "No, image SEO relies on the actual image file, alt text, filename, and surrounding content - not the attachment page. Redirecting attachment pages doesn't affect how images appear in Google Image Search."
      },
      {
        question: "What redirect status code should I use?",
        answer: "Use 301 (permanent redirect) for attachment pages. This tells search engines the attachment page is permanently moved, consolidates any existing link equity, and prevents re-indexing of attachment pages."
      },
      {
        question: "Can I keep attachment pages for certain media types?",
        answer: "Yes, use conditional logic to keep attachment pages for specific mime types (like PDFs or videos) where a dedicated page provides value, while redirecting image attachment pages."
      }
    ]
  },
  {
    id: 73,
    slug: 'remove-category-from-url',
    title: 'Remove Category from WordPress URLs',
    excerpt: 'Remove the /category/ slug from WordPress category URLs for cleaner permalinks and better SEO.',
    content: `
      <h2>Why Remove Category Slug?</h2>
      <p>By default, WordPress adds /category/ to category URLs. Removing it creates shorter, cleaner URLs, improves user experience, and can help with SEO by making URLs more concise.</p>

      <h3>The Code Snippet</h3>
      <pre><code class="language-php">// Remove /category/ from URLs
add_action('init', 'remove_category_url');
function remove_category_url() {
    global $wp_rewrite;
    $wp_rewrite->extra_permastructs['category']['struct'] = '/%category%';
}

add_filter('category_link', 'remove_category_from_url', 10, 2);
function remove_category_from_url($catlink, $category_id) {
    $category = get_category($category_id);
    $category_nicename = $category->slug;

    if (substr($catlink, -1) === '/') {
        $catlink = substr($catlink, 0, -1);
    }

    $catlink = str_replace('/category/', '/', $catlink);

    return trailingslashit($catlink);
}

// Redirect old category URLs
add_action('template_redirect', 'redirect_old_category_urls');
function redirect_old_category_urls() {
    if (strpos($_SERVER['REQUEST_URI'], '/category/') !== false) {
        $redirect_url = str_replace('/category/', '/', $_SERVER['REQUEST_URI']);
        wp_redirect(home_url($redirect_url), 301);
        exit;
    }
}

// Prevent conflicts with pages
add_filter('parse_request', 'prevent_category_page_conflicts');
function prevent_category_page_conflicts($query) {
    if (!$query->is_main_query()) return $query;

    if (isset($query->query_vars['name'])) {
        $slug = $query->query_vars['name'];

        // Check if a page exists with this slug
        $page = get_page_by_path($slug);
        if ($page) {
            $query->query_vars['page'] = '';
            $query->query_vars['pagename'] = $slug;
        }
    }

    return $query;
}

// Flush rewrite rules (run once)
register_activation_hook(__FILE__, 'flush_rewrite_rules');</code></pre>

      <h3>Alternative Method</h3>
      <pre><code class="language-php">// Simpler approach using filter
add_filter('request', 'change_category_request', 1, 1);
function change_category_request($query) {
    if (isset($query['category_name'])) {
        // Already a category
        return $query;
    }

    // Check if this could be a category
    if (isset($query['name'])) {
        $category = get_category_by_slug($query['name']);
        if ($category) {
            $query['category_name'] = $query['name'];
            unset($query['name']);
        }
    }

    return $query;
}

add_filter('category_link', 'remove_category_slug', 10, 2);
function remove_category_slug($link, $category_id) {
    return str_replace('/category/', '/', $link);
}</code></pre>

      <h3>Handle Subcategories</h3>
      <pre><code class="language-php">add_filter('category_link', 'custom_category_permalink', 10, 2);
function custom_category_permalink($catlink, $category_id) {
    $category = get_category($category_id);

    // Build the full category hierarchy
    $category_slug = '';
    if ($category->parent != 0) {
        $parent_slugs = array();
        $parent_cat = $category;

        while ($parent_cat->parent != 0) {
            $parent_cat = get_category($parent_cat->parent);
            $parent_slugs[] = $parent_cat->slug;
        }

        $parent_slugs = array_reverse($parent_slugs);
        $category_slug = implode('/', $parent_slugs) . '/';
    }

    $category_slug .= $category->slug;

    // Remove /category/ and use custom structure
    $catlink = trailingslashit(home_url($category_slug));

    return $catlink;
}</code></pre>

      <h3>Important Considerations</h3>
      <ul>
        <li><strong>Flush Rules:</strong> Visit Settings → Permalinks after implementing</li>
        <li><strong>Check Conflicts:</strong> Ensure no pages have same slug as categories</li>
        <li><strong>301 Redirects:</strong> Redirect old URLs to prevent 404 errors</li>
        <li><strong>Sitemap Update:</strong> Regenerate sitemap with new URLs</li>
        <li><strong>Search Console:</strong> Update Google about URL changes</li>
      </ul>

      <h3>Troubleshooting</h3>
      <ul>
        <li>If getting 404 errors, flush permalinks</li>
        <li>Check for conflicting plugins</li>
        <li>Verify .htaccess is writable</li>
        <li>Test with default WordPress theme</li>
      </ul>
    `,
    code: `add_action('init', 'remove_category_url');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'URLs', 'Permalinks', 'Categories', 'Clean URLs'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Remove Category from WordPress URLs - Clean Permalinks 2025',
      metaDescription: 'Remove /category/ slug from WordPress URLs for cleaner permalinks. Complete guide with code snippets and redirect handling.',
      keywords: ['remove category wordpress url', 'wordpress category slug', 'clean category urls wordpress', 'remove category base', 'wordpress permalinks'],
      canonical: '/blog/remove-category-from-url',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Remove Category from WordPress URLs",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "Is it safe to remove the category base from URLs?",
        answer: "Yes, but requires careful implementation. You must prevent conflicts between category slugs and page/post slugs, implement 301 redirects for old URLs, and flush permalinks after making changes."
      },
      {
        question: "Will removing /category/ hurt my SEO?",
        answer: "No, it won't hurt SEO if done correctly with 301 redirects. Cleaner URLs can actually improve CTR. However, improper implementation causing 404 errors or redirect chains will hurt SEO."
      },
      {
        question: "What happens if a page and category have the same slug?",
        answer: "This creates conflicts. WordPress will prioritize one over the other, usually pages. Use the conflict prevention code provided, or ensure unique slugs across pages, posts, and categories."
      },
      {
        question: "Do I need to update Google after removing category base?",
        answer: "Yes, submit updated sitemap to Google Search Console, set up 301 redirects from old URLs, and update internal links. Google will eventually recognize the change, but proper migration speeds up the process."
      },
      {
        question: "Why am I getting 404 errors after implementing this?",
        answer: "Most common cause: permalinks not flushed. Go to Settings → Permalinks and click Save. If that doesn't work, check for plugin conflicts, verify .htaccess is writable, and ensure code is in the right location."
      }
    ]
  },
  {
    id: 74,
    slug: 'add-alt-text-images',
    title: 'Auto Add Alt Text to Images in WordPress',
    excerpt: 'Automatically generate and add alt text to images for better SEO and accessibility compliance.',
    content: `
      <h2>Why Alt Text Matters?</h2>
      <p>Alt text improves accessibility for screen readers, helps search engines understand images, provides context when images fail to load, and is crucial for image SEO optimization.</p>

      <h3>The Code Snippet - Auto Generate from Filename</h3>
      <pre><code class="language-php">// Auto-generate alt text on image upload
add_action('add_attachment', 'auto_add_alt_text_to_images');
function auto_add_alt_text_to_images($attachment_id) {
    // Only process images
    if (!wp_attachment_is_image($attachment_id)) return;

    // Check if alt text already exists
    $existing_alt = get_post_meta($attachment_id, '_wp_attachment_image_alt', true);
    if ($existing_alt) return;

    // Get image title
    $attachment = get_post($attachment_id);
    $title = $attachment->post_title;

    // Clean up filename
    $alt_text = str_replace(array('-', '_'), ' ', $title);
    $alt_text = ucwords($alt_text);

    // Save as alt text
    update_post_meta($attachment_id, '_wp_attachment_image_alt', $alt_text);
}</code></pre>

      <h3>Generate from Post Title</h3>
      <pre><code class="language-php">add_filter('wp_get_attachment_image_attributes', 'add_alt_from_post_title', 10, 2);
function add_alt_from_post_title($attr, $attachment) {
    // If alt already exists, use it
    if (isset($attr['alt']) && !empty($attr['alt'])) {
        return $attr;
    }

    // Get post where image is used
    global $post;
    if ($post) {
        $attr['alt'] = get_the_title($post->ID);
    } else {
        // Fallback to image title
        $attachment_post = get_post($attachment->ID);
        $attr['alt'] = $attachment_post->post_title;
    }

    return $attr;
}</code></pre>

      <h3>Use Image Caption as Alt Text</h3>
      <pre><code class="language-php">add_filter('wp_get_attachment_image_attributes', 'use_caption_as_alt', 10, 2);
function use_caption_as_alt($attr, $attachment) {
    if (isset($attr['alt']) && !empty($attr['alt'])) {
        return $attr;
    }

    // Try to use caption
    $caption = wp_get_attachment_caption($attachment->ID);
    if ($caption) {
        $attr['alt'] = wp_strip_all_tags($caption);
    } else {
        // Fallback to title
        $attr['alt'] = get_the_title($attachment->ID);
    }

    return $attr;
}</code></pre>

      <h3>Bulk Add Alt Text to Existing Images</h3>
      <pre><code class="language-php">// Bulk update alt text for existing images (run once)
function bulk_add_alt_text_to_existing_images() {
    $args = array(
        'post_type' => 'attachment',
        'post_mime_type' => 'image',
        'post_status' => 'inherit',
        'posts_per_page' => -1,
        'meta_query' => array(
            'relation' => 'OR',
            array(
                'key' => '_wp_attachment_image_alt',
                'compare' => 'NOT EXISTS'
            ),
            array(
                'key' => '_wp_attachment_image_alt',
                'value' => '',
                'compare' => '='
            )
        )
    );

    $images = get_posts($args);

    foreach ($images as $image) {
        // Generate alt text from title
        $alt_text = $image->post_title;
        $alt_text = str_replace(array('-', '_'), ' ', $alt_text);
        $alt_text = ucwords($alt_text);

        // Update alt text
        update_post_meta($image->ID, '_wp_attachment_image_alt', $alt_text);
    }

    echo 'Updated ' . count($images) . ' images';
}
// Run once via admin page or WP-CLI</code></pre>

      <h3>Add Alt Text Admin Column</h3>
      <pre><code class="language-php">// Show alt text in media library
add_filter('manage_media_columns', 'add_alt_text_column');
function add_alt_text_column($columns) {
    $columns['alt_text'] = 'Alt Text';
    return $columns;
}

add_action('manage_media_custom_column', 'display_alt_text_column', 10, 2);
function display_alt_text_column($column_name, $post_id) {
    if ($column_name === 'alt_text') {
        $alt_text = get_post_meta($post_id, '_wp_attachment_image_alt', true);
        echo $alt_text ? esc_html($alt_text) : '&lt;span style="color:red;"&gt;Missing&lt;/span&gt;';
    }
}</code></pre>

      <h3>Best Practices</h3>
      <ul>
        <li>Describe the image content specifically</li>
        <li>Keep alt text under 125 characters</li>
        <li>Don't start with "image of" or "picture of"</li>
        <li>Include keywords naturally, not spammy</li>
        <li>Leave alt empty for decorative images</li>
      </ul>
    `,
    code: `add_action('add_attachment', 'auto_add_alt_text_to_images');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '5 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Accessibility', 'Images', 'Alt Text', 'Image Optimization'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Auto Add Alt Text to WordPress Images - SEO & Accessibility 2025',
      metaDescription: 'Automatically generate and add alt text to WordPress images. Improve SEO and accessibility with these code snippets.',
      keywords: ['wordpress alt text', 'add alt text images wordpress', 'image seo wordpress', 'alt attribute wordpress', 'accessibility wordpress'],
      canonical: '/blog/add-alt-text-images',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Auto Add Alt Text to Images in WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What is alt text and why is it important?",
        answer: "Alt text (alternative text) describes images for screen readers and appears when images fail to load. It's crucial for accessibility (helping visually impaired users) and SEO (helping search engines understand image content)."
      },
      {
        question: "Does alt text affect image SEO?",
        answer: "Yes, alt text is a ranking factor for Google Image Search. It helps search engines understand what the image depicts, improves chances of ranking for relevant image queries, and provides context for how the image relates to page content."
      },
      {
        question: "Should I use keywords in alt text?",
        answer: "Include keywords naturally if they accurately describe the image. Never keyword stuff alt text - it hurts accessibility, violates WCAG guidelines, and can result in SEO penalties. Prioritize accurate description over SEO."
      },
      {
        question: "What's the difference between alt text and image title?",
        answer: "Alt text is for accessibility and SEO (read by screen readers). Image title appears on hover and provides additional context. Alt text is required for accessibility; title is optional and less important."
      },
      {
        question: "Can I bulk add alt text to existing images?",
        answer: "Yes, use the bulk update function provided. However, auto-generated alt text from filenames may not be optimal. Ideally, manually review and improve alt text for important images to ensure accuracy and relevance."
      }
    ]
  },
  {
    id: 75,
    slug: 'add-twitter-cards',
    title: 'Add Twitter Card Meta Tags to WordPress',
    excerpt: 'Implement Twitter Card tags to control how your content appears when shared on Twitter with rich media previews.',
    content: `
      <h2>Why Use Twitter Cards?</h2>
      <p>Twitter Cards create rich media previews when your content is shared on Twitter, increasing engagement, click-through rates, and providing better control over how your content appears.</p>

      <h3>The Code Snippet - Summary Card</h3>
      <pre><code class="language-php">// Add Twitter Card meta tags
add_action('wp_head', 'add_twitter_card_tags');
function add_twitter_card_tags() {
    if (!is_singular()) return;

    // Card type
    echo '&lt;meta name="twitter:card" content="summary_large_image" /&gt;' . "\n";

    // Twitter handle
    $twitter_site = '@yourusername'; // Replace with your Twitter handle
    echo '&lt;meta name="twitter:site" content="' . esc_attr($twitter_site) . '" /&gt;' . "\n";

    // Title
    echo '&lt;meta name="twitter:title" content="' . esc_attr(get_the_title()) . '" /&gt;' . "\n";

    // Description
    $description = get_the_excerpt();
    $description = wp_strip_all_tags($description);
    if (!empty($description)) {
        echo '&lt;meta name="twitter:description" content="' .
             esc_attr($description) . '" /&gt;' . "\n";
    }

    // Image
    if (has_post_thumbnail()) {
        $image_url = get_the_post_thumbnail_url(get_the_ID(), 'full');
        echo '&lt;meta name="twitter:image" content="' . esc_url($image_url) . '" /&gt;' . "\n";

        // Image alt text
        $thumbnail_id = get_post_thumbnail_id(get_the_ID());
        $image_alt = get_post_meta($thumbnail_id, '_wp_attachment_image_alt', true);
        if ($image_alt) {
            echo '&lt;meta name="twitter:image:alt" content="' .
                 esc_attr($image_alt) . '" /&gt;' . "\n";
        }
    }

    // Author Twitter handle (if available)
    $author_twitter = get_the_author_meta('twitter');
    if ($author_twitter) {
        echo '&lt;meta name="twitter:creator" content="@' .
             esc_attr($author_twitter) . '" /&gt;' . "\n";
    }
}</code></pre>

      <h3>Enhanced with Custom Meta Description</h3>
      <pre><code class="language-php">add_action('wp_head', 'add_enhanced_twitter_cards');
function add_enhanced_twitter_cards() {
    if (!is_singular()) return;

    // Determine card type based on content
    $card_type = has_post_thumbnail() ? 'summary_large_image' : 'summary';
    echo '&lt;meta name="twitter:card" content="' . $card_type . '" /&gt;' . "\n";

    echo '&lt;meta name="twitter:site" content="@yourusername" /&gt;' . "\n";
    echo '&lt;meta name="twitter:title" content="' .
         esc_attr(get_the_title()) . '" /&gt;' . "\n";

    // Try custom meta description first
    $description = get_post_meta(get_the_ID(), '_meta_description', true);
    if (empty($description)) {
        $description = get_the_excerpt();
    }
    $description = wp_strip_all_tags($description);
    $description = substr($description, 0, 200); // Twitter limit

    echo '&lt;meta name="twitter:description" content="' .
         esc_attr($description) . '" /&gt;' . "\n";

    if (has_post_thumbnail()) {
        $image_url = get_the_post_thumbnail_url(get_the_ID(), 'large');
        echo '&lt;meta name="twitter:image" content="' . esc_url($image_url) . '" /&gt;' . "\n";
    }
}</code></pre>

      <h3>Add Author Twitter Field</h3>
      <pre><code class="language-php">// Add Twitter field to user profile
add_action('show_user_profile', 'add_twitter_profile_field');
add_action('edit_user_profile', 'add_twitter_profile_field');
function add_twitter_profile_field($user) {
    ?&gt;
    &lt;h3&gt;Social Media&lt;/h3&gt;
    &lt;table class="form-table"&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;label for="twitter"&gt;Twitter Handle&lt;/label&gt;&lt;/th&gt;
            &lt;td&gt;
                &lt;input type="text" name="twitter" id="twitter"
                       value="&lt;?php echo esc_attr(get_user_meta($user->ID, 'twitter', true)); ?&gt;"
                       class="regular-text" placeholder="yourusername" /&gt;
                &lt;p class="description"&gt;Your Twitter username without @&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
    &lt;?php
}

// Save Twitter field
add_action('personal_options_update', 'save_twitter_profile_field');
add_action('edit_user_profile_update', 'save_twitter_profile_field');
function save_twitter_profile_field($user_id) {
    if (!current_user_can('edit_user', $user_id)) return;

    if (isset($_POST['twitter'])) {
        update_user_meta($user_id, 'twitter', sanitize_text_field($_POST['twitter']));
    }
}</code></pre>

      <h3>Card Types</h3>
      <ul>
        <li><strong>summary:</strong> Title, description, thumbnail (minimum 120x120px)</li>
        <li><strong>summary_large_image:</strong> Prominent image (minimum 300x157px, recommended 1200x628px)</li>
        <li><strong>app:</strong> For mobile apps</li>
        <li><strong>player:</strong> For video/audio content</li>
      </ul>

      <h3>Image Requirements</h3>
      <ul>
        <li><strong>File size:</strong> Less than 5MB</li>
        <li><strong>Format:</strong> JPG, PNG, WEBP, GIF</li>
        <li><strong>Aspect ratio:</strong> 2:1 (1200x600) or 1:1 (600x600)</li>
        <li><strong>Recommended:</strong> 1200x628 pixels</li>
      </ul>

      <h3>Testing Twitter Cards</h3>
      <p>Use Twitter's Card Validator: cards-dev.twitter.com/validator</p>
    `,
    code: `add_action('wp_head', 'add_twitter_card_tags');`,
    author: 'Shahmir Khan',
    date: '2025-01-20',
    readTime: '6 min read',
    category: 'WordPress SEO',
    tags: ['SEO', 'Twitter Cards', 'Social Media', 'Meta Tags', 'Social Sharing'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Add Twitter Card Tags WordPress - Social Media Optimization 2025',
      metaDescription: 'Implement Twitter Card meta tags in WordPress for rich media previews. Improve engagement with proper social sharing setup.',
      keywords: ['wordpress twitter cards', 'add twitter meta tags wordpress', 'twitter card wordpress', 'social media wordpress', 'twitter preview'],
      canonical: '/blog/add-twitter-cards',
      schema: {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Add Twitter Card Meta Tags to WordPress",
        "proficiencyLevel": "Intermediate"
      }
    },
    faqs: [
      {
        question: "What's the difference between Twitter Cards and Open Graph?",
        answer: "Twitter Cards are Twitter-specific, while Open Graph is Facebook's standard. Twitter falls back to Open Graph if Twitter Card tags aren't present, but Twitter Cards provide better control over Twitter-specific display."
      },
      {
        question: "Do I need both Twitter Cards and Open Graph tags?",
        answer: "Yes, implement both. Twitter Cards for Twitter, Open Graph for Facebook/LinkedIn. Some tags overlap, but having both ensures optimal display across all social platforms."
      },
      {
        question: "What's the difference between summary and summary_large_image cards?",
        answer: "Summary displays a small thumbnail beside text. Summary_large_image shows a prominent banner image above text, taking up more space and attracting more attention. Use summary_large_image for visual content."
      },
      {
        question: "Why doesn't my Twitter Card image show up?",
        answer: "Common issues: image too small (minimum 300x157px), file size over 5MB, incorrect URL, or cached old data. Use Twitter's Card Validator to test and clear cache after updating images."
      },
      {
        question: "Do I need to apply for Twitter Card approval?",
        answer: "No, Twitter removed the approval requirement. Just add the meta tags and validate with the Card Validator. Your cards will work immediately once Twitter crawls your page."
      }
    ]
  },
  {
    id: 76,
    slug: 'custom-admin-logo',
    title: 'Change WordPress Login Logo',
    excerpt: 'Replace the default WordPress logo on the login page with your own custom branding.',
    content: `&lt;h2&gt;Why Customize the WordPress Login Logo?&lt;/h2&gt;
&lt;p&gt;The WordPress login page displays the WordPress logo by default. Customizing it with your own logo creates a more professional, branded experience for users logging into your site.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add this code to your theme's functions.php file&lt;/li&gt;
  &lt;li&gt;Upload your custom logo to your theme folder&lt;/li&gt;
  &lt;li&gt;Update the logo URL in the code&lt;/li&gt;
  &lt;li&gt;Adjust dimensions as needed&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Logo Specifications&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Recommended size: 320×80 pixels&lt;/li&gt;
  &lt;li&gt;Format: PNG with transparency&lt;/li&gt;
  &lt;li&gt;Maximum width: 320px (scales down automatically)&lt;/li&gt;
  &lt;li&gt;Keep file size under 100KB for fast loading&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use high-quality images that look good on retina displays&lt;/li&gt;
  &lt;li&gt;Test on different screen sizes&lt;/li&gt;
  &lt;li&gt;Ensure the logo link points to your homepage&lt;/li&gt;
  &lt;li&gt;Consider using SVG for better scaling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Advanced Customization&lt;/h2&gt;
&lt;p&gt;You can also customize the login page colors, background, and form styling using custom CSS in your theme or a custom login plugin.&lt;/p&gt;`,
    code: `// Change login logo
function custom_login_logo() {
    echo '&lt;style type="text/css"&gt;
        #login h1 a {
            background-image: url(' . get_stylesheet_directory_uri() . '/images/custom-logo.png);
            background-size: contain;
            width: 320px;
            height: 80px;
        }
    &lt;/style&gt;';
}
add_action('login_enqueue_scripts', 'custom_login_logo');

// Change login logo URL
function custom_login_logo_url() {
    return home_url();
}
add_filter('login_headerurl', 'custom_login_logo_url');

// Change login logo title
function custom_login_logo_url_title() {
    return get_bloginfo('name');
}
add_filter('login_headertext', 'custom_login_logo_url_title');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '4 min',
    category: 'Admin Customization',
    tags: ['admin', 'branding', 'login', 'logo', 'customization'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Change WordPress Login Logo - Custom Branding Tutorial',
      metaDescription: 'Learn how to replace the default WordPress login logo with your own custom branding. Step-by-step guide with code examples.',
      keywords: ['wordpress login logo', 'custom login page', 'wordpress branding', 'change wp logo', 'login customization'],
      canonical: 'https://shahmir.dev/snippets/custom-admin-logo',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Change WordPress Login Logo',
        description: 'Replace the default WordPress logo on the login page with your own custom branding.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "What size should my custom login logo be?",
        answer: "The recommended size is 320×80 pixels. The login page will automatically scale larger images down to fit, but starting with the correct dimensions ensures better quality and faster loading."
      },
      {
        question: "Can I use an SVG file for the login logo?",
        answer: "Yes, SVG files work great for login logos as they scale perfectly on all screen sizes including retina displays. Just update the file extension in the code from .png to .svg."
      },
      {
        question: "Will this work with custom login page plugins?",
        answer: "Most custom login plugins have their own logo settings. This code works best with the default WordPress login page. Check your plugin's settings before adding custom code."
      },
      {
        question: "How do I change where the logo links to?",
        answer: "The code includes a filter for 'login_headerurl' that sets it to your homepage. You can change home_url() to any URL you want the logo to link to."
      },
      {
        question: "Can I add CSS to further customize the login page?",
        answer: "Absolutely! You can add more CSS within the &lt;style&gt; tags to customize background colors, form styling, button colors, and more. Just target the #login selector and its child elements."
      }
    ]
  },
  {
    id: 77,
    slug: 'custom-dashboard-widgets',
    title: 'Add Custom Dashboard Widgets',
    excerpt: 'Create custom widgets for the WordPress admin dashboard to display important information and quick access tools.',
    content: `&lt;h2&gt;Why Add Custom Dashboard Widgets?&lt;/h2&gt;
&lt;p&gt;Custom dashboard widgets allow you to display important information, quick statistics, helpful links, or custom tools right on the WordPress admin dashboard where users see them first.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add the widget registration code to functions.php&lt;/li&gt;
  &lt;li&gt;Create the callback function for widget content&lt;/li&gt;
  &lt;li&gt;Customize the content and styling&lt;/li&gt;
  &lt;li&gt;Test the widget appears on the dashboard&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Widget Content Ideas&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Site statistics and analytics overview&lt;/li&gt;
  &lt;li&gt;Quick links to important pages&lt;/li&gt;
  &lt;li&gt;Recent activity or notifications&lt;/li&gt;
  &lt;li&gt;Support contact information&lt;/li&gt;
  &lt;li&gt;Custom tools or calculators&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep widgets concise and focused on one purpose&lt;/li&gt;
  &lt;li&gt;Use appropriate WordPress admin styling&lt;/li&gt;
  &lt;li&gt;Consider user roles when displaying sensitive data&lt;/li&gt;
  &lt;li&gt;Allow users to hide/show widgets if not critical&lt;/li&gt;
  &lt;li&gt;Optimize database queries to avoid slowing down the dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Advanced Features&lt;/h2&gt;
&lt;p&gt;You can add AJAX functionality to update widget content without page reload, include charts using JavaScript libraries, or create interactive forms within widgets.&lt;/p&gt;`,
    code: `// Add custom dashboard widget
function add_custom_dashboard_widget() {
    wp_add_dashboard_widget(
        'custom_dashboard_widget',
        'Welcome to Your Site',
        'custom_dashboard_widget_content'
    );
}
add_action('wp_dashboard_setup', 'add_custom_dashboard_widget');

// Widget content callback
function custom_dashboard_widget_content() {
    $current_user = wp_get_current_user();
    echo '&lt;div class="custom-widget-content"&gt;';
    echo '&lt;h3&gt;Hello, ' . esc_html($current_user-&gt;display_name) . '!&lt;/h3&gt;';
    echo '&lt;p&gt;Welcome to your WordPress dashboard.&lt;/p&gt;';

    // Quick stats
    $post_count = wp_count_posts('post')-&gt;publish;
    $page_count = wp_count_posts('page')-&gt;publish;

    echo '&lt;ul&gt;';
    echo '&lt;li&gt;Published Posts: ' . $post_count . '&lt;/li&gt;';
    echo '&lt;li&gt;Published Pages: ' . $page_count . '&lt;/li&gt;';
    echo '&lt;/ul&gt;';

    // Quick links
    echo '&lt;h4&gt;Quick Links&lt;/h4&gt;';
    echo '&lt;ul&gt;';
    echo '&lt;li&gt;&lt;a href="' . admin_url('post-new.php') . '"&gt;Create New Post&lt;/a&gt;&lt;/li&gt;';
    echo '&lt;li&gt;&lt;a href="' . admin_url('edit.php') . '"&gt;View All Posts&lt;/a&gt;&lt;/li&gt;';
    echo '&lt;/ul&gt;';
    echo '&lt;/div&gt;';
}

// Optional: Add custom styles
function custom_dashboard_widget_styles() {
    echo '&lt;style&gt;
        .custom-widget-content h3 {
            color: #0073aa;
        }
        .custom-widget-content ul {
            margin-left: 20px;
        }
    &lt;/style&gt;';
}
add_action('admin_head', 'custom_dashboard_widget_styles');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '5 min',
    category: 'Admin Customization',
    tags: ['admin', 'dashboard', 'widgets', 'customization', 'user-interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Add Custom Dashboard Widgets in WordPress - Complete Guide',
      metaDescription: 'Learn how to create custom WordPress dashboard widgets to display important information and tools. Includes code examples and best practices.',
      keywords: ['wordpress dashboard widgets', 'custom admin widgets', 'wp_add_dashboard_widget', 'dashboard customization', 'admin interface'],
      canonical: 'https://shahmir.dev/snippets/custom-dashboard-widgets',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Custom Dashboard Widgets',
        description: 'Create custom widgets for the WordPress admin dashboard to display important information and quick access tools.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "Can I control which users see my custom dashboard widget?",
        answer: "Yes, you can add capability checks within your widget registration function. Use current_user_can() to check for specific capabilities before calling wp_add_dashboard_widget()."
      },
      {
        question: "How do I remove default WordPress dashboard widgets?",
        answer: "Use remove_meta_box() function hooked to 'wp_dashboard_setup'. For example: remove_meta_box('dashboard_quick_press', 'dashboard', 'side'); removes the Quick Draft widget."
      },
      {
        question: "Can dashboard widgets include forms?",
        answer: "Absolutely! You can include HTML forms in your widget content. Just make sure to handle form submission properly using WordPress nonces and appropriate security checks."
      },
      {
        question: "How do I make my widget appear in a specific location?",
        answer: "WordPress places widgets automatically, but you can use the 'normal' or 'side' context parameter in wp_add_dashboard_widget(), and adjust priority. Users can also drag widgets to rearrange them."
      },
      {
        question: "Can I add AJAX functionality to dashboard widgets?",
        answer: "Yes! You can use wp_localize_script() to pass AJAX URL and nonces to your JavaScript, then use jQuery to update widget content dynamically. This is great for real-time stats or live feeds."
      }
    ]
  },
  {
    id: 78,
    slug: 'remove-admin-menu-items',
    title: 'Remove Admin Menu Items',
    excerpt: 'Simplify the WordPress admin by removing unnecessary menu items based on user roles and site requirements.',
    content: `&lt;h2&gt;Why Remove Admin Menu Items?&lt;/h2&gt;
&lt;p&gt;Removing unnecessary admin menu items creates a cleaner, more focused admin interface. This is especially useful for client sites or when you want to prevent users from accessing certain areas.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Identify menu items you want to remove&lt;/li&gt;
  &lt;li&gt;Add the code to functions.php&lt;/li&gt;
  &lt;li&gt;Customize based on user roles if needed&lt;/li&gt;
  &lt;li&gt;Test with different user accounts&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Common Menu Items to Remove&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Posts (if running a static site)&lt;/li&gt;
  &lt;li&gt;Comments (if disabled)&lt;/li&gt;
  &lt;li&gt;Tools (for basic users)&lt;/li&gt;
  &lt;li&gt;Plugins (for non-admins)&lt;/li&gt;
  &lt;li&gt;Themes (for editors)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Only remove items users don't need access to&lt;/li&gt;
  &lt;li&gt;Don't remove items you might need later&lt;/li&gt;
  &lt;li&gt;Use role-based conditions for better control&lt;/li&gt;
  &lt;li&gt;Document which items you've removed&lt;/li&gt;
  &lt;li&gt;Test thoroughly with different user roles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Menu Slug Reference&lt;/h2&gt;
&lt;p&gt;Common menu slugs: 'index.php' (Dashboard), 'edit.php' (Posts), 'upload.php' (Media), 'edit.php?post_type=page' (Pages), 'edit-comments.php' (Comments), 'themes.php' (Appearance), 'plugins.php' (Plugins), 'users.php' (Users), 'tools.php' (Tools), 'options-general.php' (Settings).&lt;/p&gt;`,
    code: `// Remove admin menu items
function remove_admin_menu_items() {
    // Remove for all users
    remove_menu_page('edit-comments.php');  // Comments
    remove_menu_page('tools.php');           // Tools

    // Remove for non-admins only
    if (!current_user_can('manage_options')) {
        remove_menu_page('plugins.php');     // Plugins
        remove_menu_page('themes.php');      // Appearance
        remove_menu_page('users.php');       // Users
        remove_menu_page('options-general.php'); // Settings
    }
}
add_action('admin_menu', 'remove_admin_menu_items', 999);

// Remove submenu items
function remove_admin_submenu_items() {
    // Remove specific submenu items
    remove_submenu_page('themes.php', 'theme-editor.php'); // Theme Editor
    remove_submenu_page('plugins.php', 'plugin-editor.php'); // Plugin Editor

    // Remove for non-admins
    if (!current_user_can('manage_options')) {
        remove_submenu_page('options-general.php', 'options-permalink.php'); // Permalinks
    }
}
add_action('admin_menu', 'remove_admin_submenu_items', 999);

// Hide menu items with CSS (alternative method)
function hide_admin_menu_items_css() {
    if (!current_user_can('manage_options')) {
        echo '&lt;style&gt;
            #menu-tools,
            #menu-comments {
                display: none !important;
            }
        &lt;/style&gt;';
    }
}
add_action('admin_head', 'hide_admin_menu_items_css');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '4 min',
    category: 'Admin Customization',
    tags: ['admin', 'menu', 'user-roles', 'permissions', 'interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Remove WordPress Admin Menu Items - Simplify Admin Interface',
      metaDescription: 'Learn how to remove unnecessary WordPress admin menu items to create a cleaner interface. Role-based customization included.',
      keywords: ['remove wordpress menu', 'hide admin menu', 'remove_menu_page', 'admin customization', 'user roles'],
      canonical: 'https://shahmir.dev/snippets/remove-admin-menu-items',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Remove Admin Menu Items',
        description: 'Simplify the WordPress admin by removing unnecessary menu items based on user roles and site requirements.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "Will removing menu items affect site functionality?",
        answer: "No, removing menu items only hides the admin interface links. The actual functionality remains intact. Users just won't see those options in the menu."
      },
      {
        question: "Can users still access removed pages by direct URL?",
        answer: "Yes, hiding menu items doesn't restrict access. If you need to prevent access entirely, you should also implement capability checks or use a user role management plugin."
      },
      {
        question: "What's the difference between remove_menu_page() and CSS hiding?",
        answer: "remove_menu_page() completely removes the menu item from WordPress, while CSS just hides it visually. remove_menu_page() is the proper method, but CSS can be useful for quick testing."
      },
      {
        question: "How do I find the slug for a custom post type menu?",
        answer: "Custom post type menu slugs follow the pattern 'edit.php?post_type=your_post_type'. For example, 'edit.php?post_type=product' for WooCommerce products."
      },
      {
        question: "Can I restore removed menu items later?",
        answer: "Yes, simply remove or comment out the code that removes the menu items. WordPress will immediately show them again. No permanent changes are made to the database."
      }
    ]
  },
  {
    id: 79,
    slug: 'custom-admin-footer',
    title: 'Change Admin Footer Text',
    excerpt: 'Replace the default WordPress admin footer text with custom branding, support information, or helpful links.',
    content: `&lt;h2&gt;Why Change Admin Footer Text?&lt;/h2&gt;
&lt;p&gt;The WordPress admin footer displays "Thank you for creating with WordPress" by default. Customizing this text allows you to add your branding, support links, version information, or helpful messages for your team.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add the filter code to functions.php&lt;/li&gt;
  &lt;li&gt;Customize the text content&lt;/li&gt;
  &lt;li&gt;Optionally add HTML and links&lt;/li&gt;
  &lt;li&gt;Test appearance on different admin pages&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Footer Content Ideas&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Company name and copyright&lt;/li&gt;
  &lt;li&gt;Support contact information&lt;/li&gt;
  &lt;li&gt;Link to documentation or help desk&lt;/li&gt;
  &lt;li&gt;Developer credits&lt;/li&gt;
  &lt;li&gt;Version or last updated date&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep text concise and readable&lt;/li&gt;
  &lt;li&gt;Include helpful links that make sense for your users&lt;/li&gt;
  &lt;li&gt;Use proper HTML escaping for security&lt;/li&gt;
  &lt;li&gt;Test on mobile devices as footer wraps on small screens&lt;/li&gt;
  &lt;li&gt;Consider adding both left and right footer text&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Styling Options&lt;/h2&gt;
&lt;p&gt;You can add custom CSS to style the footer text, change colors, or add icons. The footer uses the #wpfooter selector for styling.&lt;/p&gt;`,
    code: `// Change left admin footer text
function custom_admin_footer_text() {
    $text = '&lt;span id="footer-thankyou"&gt;';
    $text .= 'Developed by &lt;a href="https://shahmir.dev" target="_blank"&gt;Shahmir Khaliq&lt;/a&gt; | ';
    $text .= '&lt;a href="mailto:support@example.com"&gt;Support&lt;/a&gt; | ';
    $text .= '&lt;a href="https://docs.example.com" target="_blank"&gt;Documentation&lt;/a&gt;';
    $text .= '&lt;/span&gt;';
    return $text;
}
add_filter('admin_footer_text', 'custom_admin_footer_text');

// Change right admin footer text (WordPress version)
function custom_admin_footer_version() {
    return 'Version 2.0 | Last Updated: ' . date('F Y');
}
add_filter('update_footer', 'custom_admin_footer_version', 11);

// Conditional footer based on user role
function role_based_admin_footer() {
    $current_user = wp_get_current_user();

    if (current_user_can('manage_options')) {
        return 'Admin View | &lt;a href="' . home_url() . '" target="_blank"&gt;View Site&lt;/a&gt;';
    } else {
        return 'Need help? Contact &lt;a href="mailto:support@example.com"&gt;support@example.com&lt;/a&gt;';
    }
}
add_filter('admin_footer_text', 'role_based_admin_footer');

// Add custom styling to footer
function custom_admin_footer_styles() {
    echo '&lt;style&gt;
        #wpfooter {
            background: #f0f0f1;
            padding: 10px;
        }
        #footer-thankyou a {
            color: #2271b1;
            font-weight: 600;
        }
    &lt;/style&gt;';
}
add_action('admin_head', 'custom_admin_footer_styles');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '3 min',
    category: 'Admin Customization',
    tags: ['admin', 'footer', 'branding', 'customization', 'interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Change WordPress Admin Footer Text - Custom Branding Guide',
      metaDescription: 'Learn how to customize WordPress admin footer text with your own branding, support links, and helpful information.',
      keywords: ['wordpress admin footer', 'admin_footer_text', 'custom admin footer', 'wordpress branding', 'admin customization'],
      canonical: 'https://shahmir.dev/snippets/custom-admin-footer',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Change Admin Footer Text',
        description: 'Replace the default WordPress admin footer text with custom branding, support information, or helpful links.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "What's the difference between admin_footer_text and update_footer filters?",
        answer: "admin_footer_text controls the left side of the admin footer (where 'Thank you for creating with WordPress' appears), while update_footer controls the right side (where the WordPress version is displayed)."
      },
      {
        question: "Can I use HTML in the custom footer text?",
        answer: "Yes, you can use HTML including links, spans, and basic formatting. Just make sure to properly escape any dynamic content for security using esc_html(), esc_url(), etc."
      },
      {
        question: "Will custom footer text appear on all admin pages?",
        answer: "Yes, the custom footer text appears on all admin pages. If you want different text on different pages, you can check the current screen using get_current_screen() within your function."
      },
      {
        question: "Can I completely remove the admin footer?",
        answer: "While you can return an empty string to hide the text, it's not recommended as the footer provides useful information. However, you can hide it with CSS: #wpfooter { display: none; }"
      },
      {
        question: "How do I show different footer text for different user roles?",
        answer: "Use current_user_can() within your filter function to check capabilities and return different text based on the user's role. The example code includes a role-based footer function."
      }
    ]
  },
  {
    id: 80,
    slug: 'add-admin-notice',
    title: 'Display Admin Notices',
    excerpt: 'Show custom notification messages in the WordPress admin area for important updates, warnings, or information.',
    content: `&lt;h2&gt;Why Display Admin Notices?&lt;/h2&gt;
&lt;p&gt;Admin notices are great for alerting users about important information like pending tasks, configuration requirements, updates, or warnings. They appear at the top of admin pages and grab attention.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add the notice function to functions.php&lt;/li&gt;
  &lt;li&gt;Choose the appropriate notice type&lt;/li&gt;
  &lt;li&gt;Add conditions for when to show the notice&lt;/li&gt;
  &lt;li&gt;Optionally make notices dismissible&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Notice Types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;success:&lt;/strong&gt; Green - for successful operations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;error:&lt;/strong&gt; Red - for errors and critical issues&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;warning:&lt;/strong&gt; Yellow/Orange - for warnings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;info:&lt;/strong&gt; Blue - for general information&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use appropriate notice types for the message severity&lt;/li&gt;
  &lt;li&gt;Keep messages clear and actionable&lt;/li&gt;
  &lt;li&gt;Make non-critical notices dismissible&lt;/li&gt;
  &lt;li&gt;Don't show too many notices at once&lt;/li&gt;
  &lt;li&gt;Store dismissed notice state in user meta&lt;/li&gt;
  &lt;li&gt;Only show notices to users who need to see them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Common Use Cases&lt;/h2&gt;
&lt;p&gt;Display notices for plugin configuration requirements, pending updates, security warnings, feature announcements, data migration status, or action confirmations.&lt;/p&gt;`,
    code: `// Basic admin notice
function custom_admin_notice() {
    echo '&lt;div class="notice notice-info is-dismissible"&gt;';
    echo '&lt;p&gt;Welcome! Please complete your site setup.&lt;/p&gt;';
    echo '&lt;/div&gt;';
}
add_action('admin_notices', 'custom_admin_notice');

// Success notice
function success_admin_notice() {
    if (isset($_GET['settings-updated']) &amp;&amp; $_GET['settings-updated']) {
        echo '&lt;div class="notice notice-success is-dismissible"&gt;';
        echo '&lt;p&gt;&lt;strong&gt;Settings saved successfully!&lt;/strong&gt;&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
add_action('admin_notices', 'success_admin_notice');

// Error notice
function error_admin_notice() {
    if (!function_exists('required_plugin_function')) {
        echo '&lt;div class="notice notice-error"&gt;';
        echo '&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; Required plugin is not active. ';
        echo '&lt;a href="' . admin_url('plugins.php') . '"&gt;Activate now&lt;/a&gt;&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
add_action('admin_notices', 'error_admin_notice');

// Dismissible notice with user meta
function dismissible_admin_notice() {
    $user_id = get_current_user_id();

    // Check if user has dismissed this notice
    if (get_user_meta($user_id, 'dismissed_welcome_notice', true)) {
        return;
    }

    echo '&lt;div class="notice notice-warning is-dismissible" data-notice="welcome"&gt;';
    echo '&lt;p&gt;Important: Please review your &lt;a href="' . admin_url('options-general.php') . '"&gt;site settings&lt;/a&gt;.&lt;/p&gt;';
    echo '&lt;/div&gt;';
}
add_action('admin_notices', 'dismissible_admin_notice');

// Handle notice dismissal via AJAX
function dismiss_admin_notice() {
    $user_id = get_current_user_id();
    update_user_meta($user_id, 'dismissed_welcome_notice', true);
    wp_die();
}
add_action('wp_ajax_dismiss_notice', 'dismiss_admin_notice');

// Show notice only to admins
function admin_only_notice() {
    if (current_user_can('manage_options')) {
        echo '&lt;div class="notice notice-info"&gt;';
        echo '&lt;p&gt;Admin only: Server backup scheduled for tonight.&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
}
add_action('admin_notices', 'admin_only_notice');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '5 min',
    category: 'Admin Customization',
    tags: ['admin', 'notices', 'notifications', 'alerts', 'user-interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Display WordPress Admin Notices - Complete Tutorial',
      metaDescription: 'Learn how to create custom admin notices in WordPress for alerts, warnings, and information. Includes dismissible notices and best practices.',
      keywords: ['wordpress admin notices', 'admin_notices hook', 'dismissible notices', 'wordpress alerts', 'admin notifications'],
      canonical: 'https://shahmir.dev/snippets/add-admin-notice',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Display Admin Notices',
        description: 'Show custom notification messages in the WordPress admin area for important updates, warnings, or information.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "What's the difference between dismissible and non-dismissible notices?",
        answer: "Dismissible notices have an X button that users can click to hide them. Use dismissible for informational messages and non-dismissible for critical errors that require action."
      },
      {
        question: "How do I make a notice stay dismissed permanently?",
        answer: "Store the dismissed state in user meta using update_user_meta(). Check this meta value before displaying the notice. The example code shows how to implement this with AJAX."
      },
      {
        question: "Can I show notices only on specific admin pages?",
        answer: "Yes, use get_current_screen() to check which admin page is currently displayed. For example: if (get_current_screen()-&gt;id === 'dashboard') { /* show notice */ }"
      },
      {
        question: "What's the difference between admin_notices and all_admin_notices hooks?",
        answer: "admin_notices runs on most admin pages, while all_admin_notices runs on every admin page including those without UI. Use admin_notices for most cases."
      },
      {
        question: "How do I add custom styling to admin notices?",
        answer: "You can add custom CSS classes to your notice div and style them with custom CSS. Use admin_head hook to add your styles, or enqueue a custom admin stylesheet."
      }
    ]
  },
  {
    id: 81,
    slug: 'custom-post-columns',
    title: 'Add Custom Admin Columns',
    excerpt: 'Add custom columns to post, page, and custom post type listings in the WordPress admin for better content management.',
    content: `&lt;h2&gt;Why Add Custom Admin Columns?&lt;/h2&gt;
&lt;p&gt;Custom admin columns help you see important information at a glance in post listings. Display custom fields, taxonomies, featured images, word counts, or any meta data without opening each post.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Define new columns with the manage_posts_columns filter&lt;/li&gt;
  &lt;li&gt;Populate column data with manage_posts_custom_column action&lt;/li&gt;
  &lt;li&gt;Optionally make columns sortable&lt;/li&gt;
  &lt;li&gt;Test the columns appear correctly&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Column Content Ideas&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Featured image thumbnails&lt;/li&gt;
  &lt;li&gt;Custom field values&lt;/li&gt;
  &lt;li&gt;Word count or character count&lt;/li&gt;
  &lt;li&gt;Post status or visibility&lt;/li&gt;
  &lt;li&gt;Custom taxonomy terms&lt;/li&gt;
  &lt;li&gt;Last modified date&lt;/li&gt;
  &lt;li&gt;View count or analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep column content concise and scannable&lt;/li&gt;
  &lt;li&gt;Use appropriate column widths with CSS&lt;/li&gt;
  &lt;li&gt;Make data-heavy columns sortable for easier management&lt;/li&gt;
  &lt;li&gt;Consider mobile responsiveness&lt;/li&gt;
  &lt;li&gt;Add helpful tooltips for complex data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Advanced Features&lt;/h2&gt;
&lt;p&gt;You can make columns sortable by implementing the manage_edit-{post_type}_sortable_columns filter and modifying the WP_Query with pre_get_posts to handle the sorting logic.&lt;/p&gt;`,
    code: `// Add custom columns for posts
function add_custom_post_columns($columns) {
    // Remove date column
    unset($columns['date']);

    // Add custom columns
    $columns['featured_image'] = 'Featured Image';
    $columns['word_count'] = 'Word Count';
    $columns['last_modified'] = 'Last Modified';

    // Re-add date at the end
    $columns['date'] = 'Published';

    return $columns;
}
add_filter('manage_posts_columns', 'add_custom_post_columns');

// Populate custom column data
function populate_custom_post_columns($column, $post_id) {
    switch ($column) {
        case 'featured_image':
            if (has_post_thumbnail($post_id)) {
                echo get_the_post_thumbnail($post_id, array(50, 50));
            } else {
                echo '—';
            }
            break;

        case 'word_count':
            $content = get_post_field('post_content', $post_id);
            $word_count = str_word_count(strip_tags($content));
            echo number_format($word_count) . ' words';
            break;

        case 'last_modified':
            $modified = get_post_modified_time('F j, Y', false, $post_id);
            echo $modified;
            break;
    }
}
add_action('manage_posts_custom_column', 'populate_custom_post_columns', 10, 2);

// Make columns sortable
function make_columns_sortable($columns) {
    $columns['word_count'] = 'word_count';
    $columns['last_modified'] = 'modified';
    return $columns;
}
add_filter('manage_edit-post_sortable_columns', 'make_columns_sortable');

// Handle custom column sorting
function custom_column_orderby($query) {
    if (!is_admin() || !$query-&gt;is_main_query()) {
        return;
    }

    $orderby = $query-&gt;get('orderby');

    if ('word_count' === $orderby) {
        $query-&gt;set('meta_key', 'word_count');
        $query-&gt;set('orderby', 'meta_value_num');
    }
}
add_action('pre_get_posts', 'custom_column_orderby');

// Add custom columns for custom post types
function add_product_columns($columns) {
    $columns['product_price'] = 'Price';
    $columns['product_stock'] = 'Stock';
    return $columns;
}
add_filter('manage_product_posts_columns', 'add_product_columns');

// Style custom columns
function style_custom_columns() {
    echo '&lt;style&gt;
        .column-featured_image { width: 60px; }
        .column-word_count { width: 100px; }
        .column-last_modified { width: 150px; }
    &lt;/style&gt;';
}
add_action('admin_head', 'style_custom_columns');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '6 min',
    category: 'Admin Customization',
    tags: ['admin', 'columns', 'post-listing', 'custom-fields', 'interface'],
    difficulty: 'intermediate',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Add Custom WordPress Admin Columns - Complete Guide',
      metaDescription: 'Learn how to add custom columns to WordPress admin post listings. Display thumbnails, custom fields, word counts, and more.',
      keywords: ['wordpress admin columns', 'manage_posts_columns', 'custom post columns', 'sortable columns', 'admin interface'],
      canonical: 'https://shahmir.dev/snippets/custom-post-columns',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Custom Admin Columns',
        description: 'Add custom columns to post, page, and custom post type listings in the WordPress admin for better content management.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Intermediate'
      }
    },
    faqs: [
      {
        question: "How do I add columns to a specific custom post type?",
        answer: "Replace 'posts' with your post type slug in the filter name. For example, use 'manage_product_posts_columns' for a post type called 'product'. The action follows the same pattern: 'manage_product_posts_custom_column'."
      },
      {
        question: "Can I reorder existing default columns?",
        answer: "Yes, when you add your custom columns array, you control the order. Unset and re-add default columns in the position you want. The example code shows how to move the date column."
      },
      {
        question: "How do I make a column sortable by custom field values?",
        answer: "Add the column to the sortable_columns filter, then use pre_get_posts to set meta_key and orderby parameters. For numeric values, use 'meta_value_num' instead of 'meta_value'."
      },
      {
        question: "What's the best way to display thumbnails in columns?",
        answer: "Use get_the_post_thumbnail() with a small size array like array(50, 50). This ensures consistent thumbnail sizes and good performance. Add CSS to control column width."
      },
      {
        question: "Can I add columns to the media library?",
        answer: "Yes! Use 'manage_media_columns' filter and 'manage_media_custom_column' action. This is useful for displaying image dimensions, file sizes, or custom attachment metadata."
      }
    ]
  },
  {
    id: 82,
    slug: 'hide-update-notices',
    title: 'Hide Update Notifications',
    excerpt: 'Remove WordPress core, plugin, and theme update notifications from the admin for specific user roles.',
    content: `&lt;h2&gt;Why Hide Update Notifications?&lt;/h2&gt;
&lt;p&gt;Update notifications can be distracting for non-admin users who don't handle site maintenance. Hiding them creates a cleaner admin interface for editors, authors, and other contributors while keeping admins informed.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add the code to functions.php&lt;/li&gt;
  &lt;li&gt;Choose which updates to hide (core, plugins, themes)&lt;/li&gt;
  &lt;li&gt;Set appropriate user role conditions&lt;/li&gt;
  &lt;li&gt;Test with different user accounts&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Types of Update Notices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Core Updates:&lt;/strong&gt; WordPress version updates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plugin Updates:&lt;/strong&gt; Available plugin updates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Theme Updates:&lt;/strong&gt; Available theme updates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update Nags:&lt;/strong&gt; Persistent update reminders&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Only hide for non-admin users, never for site administrators&lt;/li&gt;
  &lt;li&gt;Keep admins informed about all available updates&lt;/li&gt;
  &lt;li&gt;Document which roles see update notifications&lt;/li&gt;
  &lt;li&gt;Consider security implications of delayed updates&lt;/li&gt;
  &lt;li&gt;Implement a regular update schedule&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Security Considerations&lt;/h2&gt;
&lt;p&gt;Hiding update notifications doesn't prevent updates—it just hides the notices. Ensure someone with admin access regularly checks for and applies important security updates. Never completely disable updates on production sites.&lt;/p&gt;`,
    code: `// Hide update notices for non-admins
function hide_update_notices() {
    if (!current_user_can('update_core')) {
        remove_action('admin_notices', 'update_nag', 3);
    }
}
add_action('admin_head', 'hide_update_notices', 1);

// Remove update nag for non-admins
function remove_core_updates() {
    if (!current_user_can('update_core')) {
        remove_action('load-update-core.php', 'wp_update_plugins');
        add_filter('pre_site_transient_update_core', '__return_null');
    }
}
add_action('admin_init', 'remove_core_updates');

// Hide plugin update notifications
function hide_plugin_updates() {
    if (!current_user_can('update_plugins')) {
        remove_action('load-update-core.php', 'wp_update_plugins');
        add_filter('pre_site_transient_update_plugins', '__return_null');
    }
}
add_action('admin_init', 'hide_plugin_updates');

// Hide theme update notifications
function hide_theme_updates() {
    if (!current_user_can('update_themes')) {
        remove_action('load-update-core.php', 'wp_update_themes');
        add_filter('pre_site_transient_update_themes', '__return_null');
    }
}
add_action('admin_init', 'hide_theme_updates');

// Remove update menu badge counts
function remove_update_menu_counts() {
    if (!current_user_can('update_core')) {
        global $menu, $submenu;

        // Remove counts from Dashboard menu
        if (isset($menu[2][0])) {
            $menu[2][0] = 'Dashboard';
        }

        // Remove counts from Updates menu
        remove_submenu_page('index.php', 'update-core.php');
    }
}
add_action('admin_menu', 'remove_update_menu_counts');

// Hide admin footer version for non-admins
function hide_admin_version() {
    if (!current_user_can('update_core')) {
        remove_filter('update_footer', 'core_update_footer');
    }
}
add_action('admin_menu', 'hide_admin_version');

// Completely hide updates page for non-admins
function hide_updates_page() {
    if (!current_user_can('update_core')) {
        remove_submenu_page('index.php', 'update-core.php');
    }
}
add_action('admin_menu', 'hide_updates_page');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '4 min',
    category: 'Admin Customization',
    tags: ['admin', 'updates', 'notifications', 'user-roles', 'interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Hide WordPress Update Notifications - Clean Admin Interface',
      metaDescription: 'Learn how to hide WordPress update notifications from non-admin users while keeping admins informed about available updates.',
      keywords: ['hide wordpress updates', 'remove update notices', 'admin notifications', 'update_nag', 'wordpress admin'],
      canonical: 'https://shahmir.dev/snippets/hide-update-notices',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Hide Update Notifications',
        description: 'Remove WordPress core, plugin, and theme update notifications from the admin for specific user roles.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "Is it safe to hide update notifications?",
        answer: "It's safe as long as administrators still see updates and apply them regularly. Never hide updates from admins, and ensure someone is responsible for monitoring and applying security updates promptly."
      },
      {
        question: "Will hiding notifications prevent automatic updates?",
        answer: "No, hiding notifications only affects the admin interface. WordPress automatic background updates (for security releases) will still run unless explicitly disabled."
      },
      {
        question: "Can I hide updates for specific plugins only?",
        answer: "Yes, but it requires more advanced code. You can filter the update_plugins transient and remove specific plugins from the update list before it's displayed."
      },
      {
        question: "What's the difference between hiding notices and disabling updates?",
        answer: "Hiding notices just removes the visual indicators in the admin. Disabling updates prevents WordPress from checking for or applying updates at all, which is not recommended for security reasons."
      },
      {
        question: "How do I show updates to editors but not authors?",
        answer: "Use current_user_can() with different capabilities. For example, check for 'edit_others_posts' (editors) vs 'edit_posts' (authors) to control who sees update notifications."
      }
    ]
  },
  {
    id: 83,
    slug: 'change-admin-color-scheme',
    title: 'Set Default Admin Color Scheme',
    excerpt: 'Automatically set a default color scheme for the WordPress admin interface for all users or specific roles.',
    content: `&lt;h2&gt;Why Set a Default Admin Color Scheme?&lt;/h2&gt;
&lt;p&gt;WordPress offers several admin color schemes, but users start with the default blue. Setting a custom default creates brand consistency, improves readability, or matches your site's design from day one.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Choose from available WordPress color schemes&lt;/li&gt;
  &lt;li&gt;Add the code to functions.php&lt;/li&gt;
  &lt;li&gt;Optionally lock the scheme to prevent user changes&lt;/li&gt;
  &lt;li&gt;Test with different user roles&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Available Color Schemes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;fresh:&lt;/strong&gt; Default blue scheme&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;light:&lt;/strong&gt; Light gray scheme&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;modern:&lt;/strong&gt; Purple and white&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;blue:&lt;/strong&gt; Blue and white&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;midnight:&lt;/strong&gt; Dark blue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sunrise:&lt;/strong&gt; Orange and yellow&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ectoplasm:&lt;/strong&gt; Green and purple&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ocean:&lt;/strong&gt; Teal and gray&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;coffee:&lt;/strong&gt; Brown tones&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Choose schemes that provide good contrast for readability&lt;/li&gt;
  &lt;li&gt;Consider accessibility for users with vision impairments&lt;/li&gt;
  &lt;li&gt;Allow users to change schemes unless required for branding&lt;/li&gt;
  &lt;li&gt;Test the scheme with all admin pages you use&lt;/li&gt;
  &lt;li&gt;Dark schemes may reduce eye strain for some users&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Custom Color Schemes&lt;/h2&gt;
&lt;p&gt;You can also create completely custom admin color schemes using the wp_admin_css_color() function to register new color combinations with your own CSS files.&lt;/p&gt;`,
    code: `// Set default admin color scheme for all users
function set_default_admin_color($user_id) {
    $args = array(
        'ID' =&gt; $user_id,
        'admin_color' =&gt; 'midnight'
    );
    wp_update_user($args);
}
add_action('user_register', 'set_default_admin_color');

// Set color scheme for existing users on first login
function set_existing_user_color() {
    $user_id = get_current_user_id();

    if (!get_user_meta($user_id, 'admin_color_set', true)) {
        update_user_meta($user_id, 'admin_color', 'midnight');
        update_user_meta($user_id, 'admin_color_set', true);
    }
}
add_action('admin_init', 'set_existing_user_color');

// Remove color scheme picker to lock scheme
function remove_color_scheme_picker() {
    remove_action('admin_color_scheme_picker', 'admin_color_scheme_picker');
}
add_action('admin_init', 'remove_color_scheme_picker');

// Hide color scheme selector from profile page
function hide_color_scheme_selector() {
    if (!current_user_can('manage_options')) {
        echo '&lt;style&gt;
            .user-admin-color-wrap {
                display: none;
            }
        &lt;/style&gt;';
    }
}
add_action('admin_head-profile.php', 'hide_color_scheme_selector');

// Set different schemes for different roles
function role_based_admin_colors($user_id) {
    $user = get_userdata($user_id);

    if (in_array('administrator', $user-&gt;roles)) {
        update_user_meta($user_id, 'admin_color', 'midnight');
    } elseif (in_array('editor', $user-&gt;roles)) {
        update_user_meta($user_id, 'admin_color', 'modern');
    } else {
        update_user_meta($user_id, 'admin_color', 'light');
    }
}
add_action('user_register', 'role_based_admin_colors');
add_action('set_user_role', 'role_based_admin_colors');

// Force specific color scheme (overrides user preference)
function force_admin_color_scheme() {
    global $_wp_admin_css_colors;
    $_wp_admin_css_colors = array('midnight' =&gt; $_wp_admin_css_colors['midnight']);
}
add_action('admin_init', 'force_admin_color_scheme');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '4 min',
    category: 'Admin Customization',
    tags: ['admin', 'color-scheme', 'branding', 'interface', 'accessibility'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Set WordPress Default Admin Color Scheme - Customization Guide',
      metaDescription: 'Learn how to set a default admin color scheme in WordPress for better branding and user experience. Includes role-based options.',
      keywords: ['wordpress admin colors', 'admin color scheme', 'admin_color', 'wordpress branding', 'admin interface'],
      canonical: 'https://shahmir.dev/snippets/change-admin-color-scheme',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Set Default Admin Color Scheme',
        description: 'Automatically set a default color scheme for the WordPress admin interface for all users or specific roles.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "Which admin color scheme is best for accessibility?",
        answer: "The 'light' and 'modern' schemes generally provide the best contrast. However, individual needs vary—some users prefer dark schemes. Consider allowing users to choose rather than forcing a single option."
      },
      {
        question: "Will changing the color scheme affect plugin interfaces?",
        answer: "Well-coded plugins should adapt to all WordPress color schemes. However, some poorly designed plugins may have hard-coded colors that don't work well with all schemes."
      },
      {
        question: "Can I create a completely custom color scheme?",
        answer: "Yes, use wp_admin_css_color() to register a custom scheme with your own CSS file. This requires creating a stylesheet that defines all the admin interface colors."
      },
      {
        question: "How do I let users choose but set a default for new users?",
        answer: "Use the user_register hook to set the default only for new users, and don't remove the color scheme picker. This way new users start with your choice but can change it in their profile."
      },
      {
        question: "Does the color scheme affect the front-end of the site?",
        answer: "No, admin color schemes only affect the WordPress admin dashboard. They have no impact on how your site appears to visitors on the front-end."
      }
    ]
  },
  {
    id: 84,
    slug: 'custom-help-tabs',
    title: 'Add Custom Help Tabs',
    excerpt: 'Add contextual help tabs to WordPress admin pages to provide guidance and documentation for users.',
    content: `&lt;h2&gt;Why Add Custom Help Tabs?&lt;/h2&gt;
&lt;p&gt;Help tabs appear in the top-right corner of admin pages when you click "Help". Adding custom help content provides contextual guidance for your users, documents custom features, and reduces support requests.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Hook into admin page load&lt;/li&gt;
  &lt;li&gt;Get the current screen object&lt;/li&gt;
  &lt;li&gt;Add help tabs with add_help_tab()&lt;/li&gt;
  &lt;li&gt;Optionally add a help sidebar&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Help Content Ideas&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Feature documentation and usage instructions&lt;/li&gt;
  &lt;li&gt;Troubleshooting tips and FAQs&lt;/li&gt;
  &lt;li&gt;Links to video tutorials or external docs&lt;/li&gt;
  &lt;li&gt;Keyboard shortcuts and quick tips&lt;/li&gt;
  &lt;li&gt;Support contact information&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep help text concise and scannable&lt;/li&gt;
  &lt;li&gt;Use clear headings and bullet points&lt;/li&gt;
  &lt;li&gt;Add help tabs only to relevant admin pages&lt;/li&gt;
  &lt;li&gt;Include practical examples and screenshots when helpful&lt;/li&gt;
  &lt;li&gt;Update help content when features change&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Advanced Usage&lt;/h2&gt;
&lt;p&gt;You can add multiple help tabs per page, each with its own content. The help sidebar can contain quick links to external documentation or support resources that appear on all tabs.&lt;/p&gt;`,
    code: `// Add custom help tab to dashboard
function add_custom_help_tab() {
    $screen = get_current_screen();

    // Only add to dashboard
    if ($screen-&gt;id !== 'dashboard') {
        return;
    }

    // Add help tab
    $screen-&gt;add_help_tab(array(
        'id' =&gt; 'custom_help_tab',
        'title' =&gt; 'Getting Started',
        'content' =&gt; '&lt;h3&gt;Welcome to Your Dashboard&lt;/h3&gt;
            &lt;p&gt;Here are some quick tips to get you started:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;Create Content:&lt;/strong&gt; Use Posts for blog articles and Pages for static content.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Customize Appearance:&lt;/strong&gt; Visit Appearance &amp;gt; Customize to change your site design.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Manage Users:&lt;/strong&gt; Add team members in Users &amp;gt; Add New.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Need more help? Check our &lt;a href="https://docs.example.com" target="_blank"&gt;documentation&lt;/a&gt;.&lt;/p&gt;'
    ));

    // Add another help tab
    $screen-&gt;add_help_tab(array(
        'id' =&gt; 'troubleshooting_tab',
        'title' =&gt; 'Troubleshooting',
        'content' =&gt; '&lt;h3&gt;Common Issues&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;Can\'t upload images?&lt;/strong&gt; Check file size limits and permissions.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Page not updating?&lt;/strong&gt; Clear browser cache and try again.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Plugin conflicts?&lt;/strong&gt; Deactivate plugins one by one to identify the issue.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Still stuck? &lt;a href="mailto:support@example.com"&gt;Contact Support&lt;/a&gt;&lt;/p&gt;'
    ));

    // Set help sidebar
    $screen-&gt;set_help_sidebar(
        '&lt;h4&gt;Resources&lt;/h4&gt;
        &lt;p&gt;&lt;a href="https://docs.example.com" target="_blank"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href="https://support.example.com" target="_blank"&gt;Support Forum&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href="mailto:support@example.com"&gt;Email Support&lt;/a&gt;&lt;/p&gt;'
    );
}
add_action('load-index.php', 'add_custom_help_tab');

// Add help tab to custom post type pages
function add_cpt_help_tab() {
    $screen = get_current_screen();

    if ($screen-&gt;post_type !== 'product') {
        return;
    }

    $screen-&gt;add_help_tab(array(
        'id' =&gt; 'product_help',
        'title' =&gt; 'Product Help',
        'content' =&gt; '&lt;h3&gt;Creating Products&lt;/h3&gt;
            &lt;p&gt;Follow these steps to create a product:&lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Add a descriptive product title&lt;/li&gt;
                &lt;li&gt;Write detailed product description&lt;/li&gt;
                &lt;li&gt;Set price and inventory information&lt;/li&gt;
                &lt;li&gt;Upload high-quality product images&lt;/li&gt;
                &lt;li&gt;Assign categories and tags&lt;/li&gt;
            &lt;/ol&gt;'
    ));
}
add_action('load-post.php', 'add_cpt_help_tab');
add_action('load-post-new.php', 'add_cpt_help_tab');

// Add help tab to plugin settings page
function add_settings_help_tab() {
    $screen = get_current_screen();

    if ($screen-&gt;id !== 'settings_page_my-plugin') {
        return;
    }

    $screen-&gt;add_help_tab(array(
        'id' =&gt; 'settings_help',
        'title' =&gt; 'Settings Overview',
        'content' =&gt; '&lt;h3&gt;Plugin Settings&lt;/h3&gt;
            &lt;p&gt;Configure your plugin settings:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;API Key:&lt;/strong&gt; Enter your API key from the provider dashboard&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Cache Duration:&lt;/strong&gt; Set how long to cache API responses&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Debug Mode:&lt;/strong&gt; Enable for troubleshooting (disable on production)&lt;/li&gt;
            &lt;/ul&gt;'
    ));
}
add_action('load-settings_page_my-plugin', 'add_settings_help_tab');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '5 min',
    category: 'Admin Customization',
    tags: ['admin', 'help', 'documentation', 'user-experience', 'interface'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Add Custom WordPress Help Tabs - Contextual Help Guide',
      metaDescription: 'Learn how to add custom help tabs to WordPress admin pages. Provide contextual guidance and documentation for users.',
      keywords: ['wordpress help tabs', 'add_help_tab', 'contextual help', 'admin documentation', 'user guidance'],
      canonical: 'https://shahmir.dev/snippets/custom-help-tabs',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add Custom Help Tabs',
        description: 'Add contextual help tabs to WordPress admin pages to provide guidance and documentation for users.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "How do I add help tabs to a specific custom admin page?",
        answer: "Use the load-{page_hook} action where {page_hook} is your custom page hook returned by add_menu_page() or add_submenu_page(). Get the screen with get_current_screen() and add your tabs."
      },
      {
        question: "Can I remove default WordPress help tabs?",
        answer: "Yes, use $screen-&gt;remove_help_tab('tab_id') to remove specific tabs. You can get existing tab IDs by inspecting $screen-&gt;get_help_tabs(). This is useful when you want to replace default help with custom content."
      },
      {
        question: "What's the difference between help tabs and help sidebar?",
        answer: "Help tabs contain the main content and appear as clickable tabs. The help sidebar appears on the right side of all tabs and typically contains quick links to external resources or consistent information."
      },
      {
        question: "Can I include HTML and formatting in help content?",
        answer: "Yes, you can use HTML in the content parameter. This includes paragraphs, lists, links, headings, and basic formatting. Avoid complex JavaScript or forms in help tabs."
      },
      {
        question: "How do users access the help tabs?",
        answer: "Users click the 'Help' button in the top-right corner of admin pages (next to 'Screen Options'). The help content slides down from the top. Make sure to inform users about this feature."
      }
    ]
  },
  {
    id: 85,
    slug: 'remove-screen-options',
    title: 'Remove Screen Options Tab',
    excerpt: 'Hide or remove the Screen Options tab from WordPress admin pages to simplify the interface.',
    content: `&lt;h2&gt;Why Remove Screen Options?&lt;/h2&gt;
&lt;p&gt;The Screen Options tab allows users to customize what appears on admin pages. For client sites or simplified interfaces, removing it prevents confusion and maintains a consistent layout across all users.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Identify which pages need Screen Options hidden&lt;/li&gt;
  &lt;li&gt;Add the filter code to functions.php&lt;/li&gt;
  &lt;li&gt;Test across different admin pages&lt;/li&gt;
  &lt;li&gt;Verify desired layout is maintained&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What Screen Options Controls&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Number of items displayed per page&lt;/li&gt;
  &lt;li&gt;Which columns appear in lists&lt;/li&gt;
  &lt;li&gt;Dashboard widget visibility&lt;/li&gt;
  &lt;li&gt;Post editor meta boxes&lt;/li&gt;
  &lt;li&gt;Page layout (1 or 2 columns)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Only remove for non-admin users when appropriate&lt;/li&gt;
  &lt;li&gt;Consider if users benefit from customization options&lt;/li&gt;
  &lt;li&gt;Document the decision to remove Screen Options&lt;/li&gt;
  &lt;li&gt;Set sensible defaults when removing user control&lt;/li&gt;
  &lt;li&gt;Test thoroughly to ensure nothing breaks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;When to Keep Screen Options&lt;/h2&gt;
&lt;p&gt;Screen Options are useful for power users who manage content regularly. Consider keeping them for administrators and editors who benefit from customizing their workflow. Only remove when simplification truly benefits the user.&lt;/p&gt;`,
    code: `// Remove Screen Options tab for non-admins
function remove_screen_options() {
    if (!current_user_can('manage_options')) {
        return false;
    }
    return true;
}
add_filter('screen_options_show_screen', 'remove_screen_options');

// Remove Screen Options from specific pages
function remove_screen_options_selectively($show, $screen) {
    // Remove from dashboard
    if ($screen-&gt;id === 'dashboard') {
        return false;
    }

    // Remove from post listing pages
    if ($screen-&gt;id === 'edit-post' || $screen-&gt;id === 'edit-page') {
        if (!current_user_can('manage_options')) {
            return false;
        }
    }

    return $show;
}
add_filter('screen_options_show_screen', 'remove_screen_options_selectively', 10, 2);

// Remove Screen Options with CSS (alternative method)
function hide_screen_options_css() {
    if (!current_user_can('manage_options')) {
        echo '&lt;style&gt;
            #screen-options-link-wrap,
            #screen-options-wrap {
                display: none !important;
            }
        &lt;/style&gt;';
    }
}
add_action('admin_head', 'hide_screen_options_css');

// Remove Screen Options from custom post types
function remove_cpt_screen_options($show, $screen) {
    // Remove for specific custom post types
    $hide_for_types = array('product', 'portfolio', 'testimonial');

    if (in_array($screen-&gt;post_type, $hide_for_types)) {
        return false;
    }

    return $show;
}
add_filter('screen_options_show_screen', 'remove_cpt_screen_options', 10, 2);

// Remove Screen Options and set default values
function set_default_screen_options() {
    // Set default posts per page
    add_filter('edit_posts_per_page', function() {
        return 25;
    });

    // Set default columns for post listing
    add_filter('manage_posts_columns', function($columns) {
        // Remove author and comments columns by default
        unset($columns['author']);
        unset($columns['comments']);
        return $columns;
    });
}
add_action('admin_init', 'set_default_screen_options');

// Remove Screen Options from plugins page
function remove_plugins_screen_options($show, $screen) {
    if ($screen-&gt;id === 'plugins') {
        if (!current_user_can('install_plugins')) {
            return false;
        }
    }
    return $show;
}
add_filter('screen_options_show_screen', 'remove_plugins_screen_options', 10, 2);

// Remove both Screen Options and Help tabs
function remove_screen_options_and_help() {
    if (!current_user_can('manage_options')) {
        add_filter('screen_options_show_screen', '__return_false');
        add_filter('contextual_help', '__return_empty_string', 999);
    }
}
add_action('admin_head', 'remove_screen_options_and_help');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-20',
    readTime: '4 min',
    category: 'Admin Customization',
    tags: ['admin', 'screen-options', 'interface', 'simplification', 'user-experience'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Remove WordPress Screen Options Tab - Simplify Admin Interface',
      metaDescription: 'Learn how to hide or remove the Screen Options tab from WordPress admin pages for a cleaner, simplified interface.',
      keywords: ['remove screen options', 'hide screen options', 'screen_options_show_screen', 'admin interface', 'wordpress customization'],
      canonical: 'https://shahmir.dev/snippets/remove-screen-options',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Remove Screen Options Tab',
        description: 'Hide or remove the Screen Options tab from WordPress admin pages to simplify the interface.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-20',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "What happens if I remove Screen Options but don't set defaults?",
        answer: "WordPress will use its built-in defaults. Users won't be able to customize the view, but everything will still function normally with standard settings like 20 items per page."
      },
      {
        question: "Can I remove Screen Options from only certain admin pages?",
        answer: "Yes, the screen_options_show_screen filter provides a $screen parameter. Check $screen-&gt;id or $screen-&gt;post_type to conditionally remove Screen Options from specific pages only."
      },
      {
        question: "Is it better to use the filter or CSS to hide Screen Options?",
        answer: "Use the screen_options_show_screen filter as it's the proper WordPress way. CSS hiding is a quick workaround but doesn't actually disable the functionality, just hides it visually."
      },
      {
        question: "Will removing Screen Options affect plugin functionality?",
        answer: "Some plugins add their own options to the Screen Options tab. Removing it won't break functionality but may hide settings users need. Test plugins after implementing this change."
      },
      {
        question: "Can users still customize without Screen Options?",
        answer: "No, Screen Options is the primary interface for per-user admin customization. If you remove it, consider setting reasonable defaults that work for all users rather than forcing a one-size-fits-all approach."
      }
    ]
  },
  {
    id: 86,
    slug: 'custom-search-query',
    title: 'Customize WordPress Search Query for Better Results',
    excerpt: 'Enhance WordPress default search by customizing queries, adding custom post types, meta fields, and improving search accuracy.',
    content: `
      <h2>Why Customize WordPress Search?</h2>
      <p>The default WordPress search is limited - it only searches post titles and content. By customizing the search query, you can search custom post types, taxonomies, meta fields, and even implement fuzzy matching for better user experience.</p>

      <h3>Basic Search Customization</h3>
      <pre><code class="language-php">// Extend search to custom post types
function custom_search_query($query) {
    if ($query->is_search && !is_admin()) {
        $query->set('post_type', array('post', 'page', 'product', 'portfolio'));
    }
    return $query;
}
add_filter('pre_get_posts', 'custom_search_query');</code></pre>

      <h3>Search Custom Fields and Meta Data</h3>
      <pre><code class="language-php">// Search post meta and custom fields
function search_custom_fields($search, $wp_query) {
    global $wpdb;

    if (empty($search) || !$wp_query->is_search()) {
        return $search;
    }

    $search_term = $wp_query->query_vars['s'];

    // Add meta search to query
    $meta_search = $wpdb->prepare("
        OR EXISTS (
            SELECT * FROM {$wpdb->postmeta}
            WHERE post_id = {$wpdb->posts}.ID
            AND meta_value LIKE %s
        )",
        '%' . $wpdb->esc_like($search_term) . '%'
    );

    $search = preg_replace(
        "/\(\s*{$wpdb->posts}.post_title\s+LIKE\s*(\'[^\']+\')\s*\)/",
        "({$wpdb->posts}.post_title LIKE $1) $meta_search",
        $search
    );

    return $search;
}
add_filter('posts_search', 'search_custom_fields', 10, 2);</code></pre>

      <h3>Search Taxonomy Terms</h3>
      <pre><code class="language-php">// Include taxonomy terms in search
function search_taxonomy_terms($search, $wp_query) {
    global $wpdb;

    if (!$wp_query->is_search()) {
        return $search;
    }

    $search_term = $wp_query->query_vars['s'];

    $tax_search = $wpdb->prepare("
        OR {$wpdb->posts}.ID IN (
            SELECT object_id FROM {$wpdb->term_relationships}
            INNER JOIN {$wpdb->term_taxonomy} ON {$wpdb->term_relationships}.term_taxonomy_id = {$wpdb->term_taxonomy}.term_taxonomy_id
            INNER JOIN {$wpdb->terms} ON {$wpdb->term_taxonomy}.term_id = {$wpdb->terms}.term_id
            WHERE {$wpdb->terms}.name LIKE %s
        )",
        '%' . $wpdb->esc_like($search_term) . '%'
    );

    $search = preg_replace(
        "/\)\s*\)\s*$/",
        ") $tax_search )",
        $search
    );

    return $search;
}
add_filter('posts_search', 'search_taxonomy_terms', 10, 2);</code></pre>

      <h3>Advanced Search with Relevance Scoring</h3>
      <pre><code class="language-php">// Search with relevance scoring
function search_by_relevance($orderby, $query) {
    if (!$query->is_search()) {
        return $orderby;
    }

    global $wpdb;
    $search_term = $query->query_vars['s'];

    // Create relevance score
    $orderby = "
        CASE
            WHEN {$wpdb->posts}.post_title LIKE '%{$search_term}%' THEN 1
            WHEN {$wpdb->posts}.post_content LIKE '%{$search_term}%' THEN 2
            ELSE 3
        END ASC,
        {$wpdb->posts}.post_date DESC
    ";

    return $orderby;
}
add_filter('posts_orderby', 'search_by_relevance', 10, 2);</code></pre>

      <h3>Exclude Specific Post Types or Categories</h3>
      <pre><code class="language-php">// Exclude specific content from search
function exclude_from_search($query) {
    if ($query->is_search && !is_admin()) {
        // Exclude specific post types
        $excluded_types = array('attachment');
        $post_types = get_post_types(array('public' => true));
        $post_types = array_diff($post_types, $excluded_types);
        $query->set('post_type', $post_types);

        // Exclude specific categories
        $query->set('category__not_in', array(5, 12, 23));

        // Exclude specific posts
        $query->set('post__not_in', array(100, 200, 300));
    }
    return $query;
}
add_filter('pre_get_posts', 'exclude_from_search');</code></pre>

      <h3>Live AJAX Search Implementation</h3>
      <pre><code class="language-php">// AJAX search handler
function ajax_search_handler() {
    check_ajax_referer('search_nonce', 'nonce');

    $search_query = sanitize_text_field($_POST['query']);

    $args = array(
        's' => $search_query,
        'post_type' => array('post', 'page', 'product'),
        'posts_per_page' => 10,
        'post_status' => 'publish'
    );

    $search = new WP_Query($args);
    $results = array();

    if ($search->have_posts()) {
        while ($search->have_posts()) {
            $search->the_post();
            $results[] = array(
                'title' => get_the_title(),
                'url' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_excerpt(), 20),
                'image' => get_the_post_thumbnail_url(get_the_ID(), 'thumbnail')
            );
        }
        wp_reset_postdata();
    }

    wp_send_json_success($results);
}
add_action('wp_ajax_live_search', 'ajax_search_handler');
add_action('wp_ajax_nopriv_live_search', 'ajax_search_handler');</code></pre>

      <h3>JavaScript for AJAX Search</h3>
      <pre><code class="language-javascript">// Frontend AJAX search
jQuery(document).ready(function($) {
    var searchTimeout;

    $('#search-input').on('keyup', function() {
        clearTimeout(searchTimeout);
        var query = $(this).val();

        if (query.length < 3) {
            $('#search-results').hide();
            return;
        }

        searchTimeout = setTimeout(function() {
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'live_search',
                    query: query,
                    nonce: search_nonce
                },
                success: function(response) {
                    if (response.success) {
                        displayResults(response.data);
                    }
                }
            });
        }, 300);
    });

    function displayResults(results) {
        var html = '';
        results.forEach(function(item) {
            html += '<div class="search-item">';
            html += '<h4><a href="' + item.url + '">' + item.title + '</a></h4>';
            html += '<p>' + item.excerpt + '</p>';
            html += '</div>';
        });
        $('#search-results').html(html).show();
    }
});</code></pre>

      <h3>Search with Highlighted Terms</h3>
      <pre><code class="language-php">// Highlight search terms in results
function highlight_search_terms($text) {
    if (is_search() && !empty(get_search_query())) {
        $pattern = '/(' . get_search_query() . ')/i';
        $replacement = '<mark class="search-highlight">$1</mark>';
        $text = preg_replace($pattern, $replacement, $text);
    }
    return $text;
}
add_filter('the_content', 'highlight_search_terms');
add_filter('the_excerpt', 'highlight_search_terms');
add_filter('the_title', 'highlight_search_terms');</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Add the code to your theme's functions.php file or a custom plugin</li>
        <li>Test search functionality with various queries</li>
        <li>Monitor search performance with Query Monitor plugin</li>
        <li>Implement caching for frequently searched terms</li>
        <li>Consider using Elasticsearch for very large sites</li>
      </ol>

      <h3>Performance Optimization</h3>
      <ul>
        <li><strong>Index Custom Fields:</strong> Add database indexes to frequently searched meta fields</li>
        <li><strong>Cache Results:</strong> Use transients to cache popular search queries</li>
        <li><strong>Limit Results:</strong> Set reasonable posts_per_page limits</li>
        <li><strong>Use AJAX:</strong> Load results asynchronously to improve perceived performance</li>
        <li><strong>Debouncing:</strong> Implement debouncing for live search to reduce server load</li>
      </ul>

      <h3>Best Practices</h3>
      <ul>
        <li>Always sanitize and validate user input</li>
        <li>Use prepared statements for database queries</li>
        <li>Implement search analytics to understand user behavior</li>
        <li>Consider relevance scoring for better results</li>
        <li>Add search suggestions and autocomplete</li>
        <li>Handle special characters and accented letters</li>
      </ul>
    `,
    code: `add_filter('pre_get_posts', 'custom_search_query');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '10 min',
    category: 'WordPress Advanced',
    tags: ['Search', 'WP_Query', 'Advanced'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.0+',
    seo: {
      metaTitle: 'Customize WordPress Search Query - Complete Guide 2025',
      metaDescription: 'Learn how to customize WordPress search to include custom post types, meta fields, taxonomies, and implement AJAX live search with relevance scoring.',
      keywords: ['wordpress custom search', 'wp_query search', 'search custom fields', 'ajax live search', 'wordpress search relevance', 'search optimization'],
      canonical: 'https://shahmir.dev/blog/custom-search-query',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Customize WordPress Search Query for Better Results',
        description: 'Complete guide to extending WordPress search functionality with custom post types, meta fields, taxonomies, and AJAX implementation.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 4.0+'
      }
    },
    faqs: [
      {
        question: "How do I search custom post types in WordPress?",
        answer: "Use the pre_get_posts filter and set the post_type parameter to an array of post types you want to search. For example: $query->set('post_type', array('post', 'page', 'product')). This extends the search beyond the default posts and pages."
      },
      {
        question: "Can I search custom fields and post meta in WordPress?",
        answer: "Yes, by using the posts_search filter, you can modify the SQL query to include meta_value searches. Use wpdb->prepare() to safely add meta queries, and join the postmeta table to search custom field values. The code above shows how to implement this securely."
      },
      {
        question: "How can I implement AJAX live search in WordPress?",
        answer: "Create an AJAX handler using wp_ajax_* hooks, query posts using WP_Query with the search parameter, and return JSON results. On the frontend, use JavaScript to send AJAX requests on keyup events with debouncing to prevent excessive server requests. Return formatted results with titles, excerpts, and permalinks."
      },
      {
        question: "What's the best way to implement search relevance scoring?",
        answer: "Use the posts_orderby filter to modify the SQL ORDER BY clause. Assign scores based on where the search term appears: highest score for title matches, lower for content matches. You can also use MATCH AGAINST for full-text searches on MySQL tables with FULLTEXT indexes for better performance."
      },
      {
        question: "How do I exclude certain content from WordPress search results?",
        answer: "Use pre_get_posts to exclude content: set post__not_in for specific post IDs, category__not_in for categories, or filter out post types. You can also use post_status to only show published content, or combine multiple conditions for complex exclusion rules."
      }
    ]
  },
  {
    id: 87,
    slug: 'add-ajax-functionality',
    title: 'Add AJAX Functionality to WordPress Properly',
    excerpt: 'Learn how to implement AJAX in WordPress the right way using wp_ajax hooks, nonces, and proper enqueuing for dynamic content loading.',
    content: `
      <h2>Understanding WordPress AJAX</h2>
      <p>WordPress has a built-in AJAX API that handles security, nonces, and routing. Using it properly ensures compatibility, security, and maintainability. The WordPress AJAX URL is admin-ajax.php, which routes requests to your PHP handlers.</p>

      <h3>Basic AJAX Setup</h3>
      <pre><code class="language-php">// Enqueue script with AJAX URL
function enqueue_ajax_script() {
    wp_enqueue_script('custom-ajax', get_template_directory_uri() . '/js/ajax.js', array('jquery'), '1.0', true);

    wp_localize_script('custom-ajax', 'ajax_object', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ajax_nonce')
    ));
}
add_action('wp_enqueue_scripts', 'enqueue_ajax_script');</code></pre>

      <h3>PHP Handler for Logged-In Users</h3>
      <pre><code class="language-php">// AJAX handler for authenticated users
function handle_ajax_request() {
    // Security check
    check_ajax_referer('ajax_nonce', 'nonce');

    // Get POST data
    $data = sanitize_text_field($_POST['data']);

    // Process data
    $result = process_your_data($data);

    // Return response
    if ($result) {
        wp_send_json_success(array(
            'message' => 'Success!',
            'data' => $result
        ));
    } else {
        wp_send_json_error(array(
            'message' => 'Something went wrong'
        ));
    }
}
add_action('wp_ajax_custom_action', 'handle_ajax_request');</code></pre>

      <h3>PHP Handler for Non-Logged-In Users</h3>
      <pre><code class="language-php">// AJAX handler for public access
function public_ajax_handler() {
    check_ajax_referer('ajax_nonce', 'nonce');

    $value = isset($_POST['value']) ? intval($_POST['value']) : 0;

    // Query database
    $posts = get_posts(array(
        'numberposts' => $value,
        'post_status' => 'publish'
    ));

    $response = array();
    foreach ($posts as $post) {
        $response[] = array(
            'title' => get_the_title($post->ID),
            'url' => get_permalink($post->ID),
            'excerpt' => wp_trim_words($post->post_content, 20)
        );
    }

    wp_send_json_success($response);
}
add_action('wp_ajax_nopriv_load_posts', 'public_ajax_handler');
add_action('wp_ajax_load_posts', 'public_ajax_handler');</code></pre>

      <h3>JavaScript Implementation</h3>
      <pre><code class="language-javascript">// ajax.js - Basic AJAX request
jQuery(document).ready(function($) {
    $('#ajax-button').on('click', function(e) {
        e.preventDefault();

        var data = {
            action: 'custom_action',
            nonce: ajax_object.nonce,
            data: $('#input-field').val()
        };

        $.ajax({
            url: ajax_object.ajax_url,
            type: 'POST',
            data: data,
            beforeSend: function() {
                $('#ajax-button').prop('disabled', true).text('Loading...');
            },
            success: function(response) {
                if (response.success) {
                    $('#result').html(response.data.message);
                } else {
                    alert('Error: ' + response.data.message);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Request failed. Please try again.');
            },
            complete: function() {
                $('#ajax-button').prop('disabled', false).text('Submit');
            }
        });
    });
});</code></pre>

      <h3>Load More Posts with AJAX</h3>
      <pre><code class="language-php">// Load more posts handler
function load_more_posts() {
    check_ajax_referer('load_more_nonce', 'nonce');

    $paged = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $posts_per_page = isset($_POST['posts_per_page']) ? intval($_POST['posts_per_page']) : 6;

    $args = array(
        'post_type' => 'post',
        'post_status' => 'publish',
        'posts_per_page' => $posts_per_page,
        'paged' => $paged
    );

    $query = new WP_Query($args);

    if ($query->have_posts()) {
        ob_start();

        while ($query->have_posts()) {
            $query->the_post();
            get_template_part('template-parts/content', 'post');
        }

        $html = ob_get_clean();
        wp_reset_postdata();

        wp_send_json_success(array(
            'html' => $html,
            'max_pages' => $query->max_num_pages,
            'current_page' => $paged
        ));
    } else {
        wp_send_json_error(array('message' => 'No more posts'));
    }
}
add_action('wp_ajax_load_more_posts', 'load_more_posts');
add_action('wp_ajax_nopriv_load_more_posts', 'load_more_posts');</code></pre>

      <h3>Load More JavaScript</h3>
      <pre><code class="language-javascript">// Load more posts implementation
jQuery(document).ready(function($) {
    var page = 1;
    var loading = false;

    $('#load-more').on('click', function() {
        if (loading) return;

        loading = true;
        page++;

        $.ajax({
            url: ajax_object.ajax_url,
            type: 'POST',
            data: {
                action: 'load_more_posts',
                nonce: ajax_object.load_more_nonce,
                page: page,
                posts_per_page: 6
            },
            beforeSend: function() {
                $('#load-more').text('Loading...').prop('disabled', true);
            },
            success: function(response) {
                if (response.success) {
                    $('#posts-container').append(response.data.html);

                    if (page >= response.data.max_pages) {
                        $('#load-more').hide();
                    }
                } else {
                    $('#load-more').hide();
                }
            },
            error: function() {
                alert('Failed to load posts');
                page--;
            },
            complete: function() {
                $('#load-more').text('Load More').prop('disabled', false);
                loading = false;
            }
        });
    });
});</code></pre>

      <h3>AJAX Form Submission</h3>
      <pre><code class="language-php">// Handle form submission
function ajax_form_handler() {
    check_ajax_referer('form_nonce', 'nonce');

    // Sanitize inputs
    $name = sanitize_text_field($_POST['name']);
    $email = sanitize_email($_POST['email']);
    $message = sanitize_textarea_field($_POST['message']);

    // Validate
    if (empty($name) || empty($email) || !is_email($email)) {
        wp_send_json_error(array(
            'message' => 'Please fill all required fields correctly.'
        ));
    }

    // Process form (e.g., send email, save to database)
    $sent = wp_mail(
        get_option('admin_email'),
        'New Contact Form Submission',
        "Name: $name\nEmail: $email\nMessage: $message"
    );

    if ($sent) {
        wp_send_json_success(array(
            'message' => 'Thank you! Your message has been sent.'
        ));
    } else {
        wp_send_json_error(array(
            'message' => 'Failed to send message. Please try again.'
        ));
    }
}
add_action('wp_ajax_submit_contact_form', 'ajax_form_handler');
add_action('wp_ajax_nopriv_submit_contact_form', 'ajax_form_handler');</code></pre>

      <h3>AJAX File Upload</h3>
      <pre><code class="language-php">// Handle file upload via AJAX
function ajax_file_upload() {
    check_ajax_referer('upload_nonce', 'nonce');

    if (!function_exists('wp_handle_upload')) {
        require_once(ABSPATH . 'wp-admin/includes/file.php');
    }

    $uploadedfile = $_FILES['file'];
    $upload_overrides = array('test_form' => false);

    $movefile = wp_handle_upload($uploadedfile, $upload_overrides);

    if ($movefile && !isset($movefile['error'])) {
        wp_send_json_success(array(
            'url' => $movefile['url'],
            'file' => $movefile['file']
        ));
    } else {
        wp_send_json_error(array(
            'message' => $movefile['error']
        ));
    }
}
add_action('wp_ajax_upload_file', 'ajax_file_upload');</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Enqueue your JavaScript file with wp_enqueue_script()</li>
        <li>Use wp_localize_script() to pass AJAX URL and nonce</li>
        <li>Create PHP handlers with wp_ajax_* hooks</li>
        <li>Always verify nonces with check_ajax_referer()</li>
        <li>Sanitize all input data</li>
        <li>Use wp_send_json_success() or wp_send_json_error()</li>
        <li>Test thoroughly with browser dev tools</li>
      </ol>

      <h3>Security Best Practices</h3>
      <ul>
        <li><strong>Always Use Nonces:</strong> Generate with wp_create_nonce() and verify with check_ajax_referer()</li>
        <li><strong>Sanitize Input:</strong> Use sanitize_text_field(), sanitize_email(), etc.</li>
        <li><strong>Validate Data:</strong> Check data types, ranges, and formats</li>
        <li><strong>Check Permissions:</strong> Use current_user_can() for privileged operations</li>
        <li><strong>Escape Output:</strong> Use esc_html(), esc_url(), etc. for output</li>
      </ul>

      <h3>Performance Tips</h3>
      <ul>
        <li>Implement request throttling to prevent spam</li>
        <li>Use caching for frequently requested data</li>
        <li>Return only necessary data (avoid sending entire post objects)</li>
        <li>Implement pagination for large datasets</li>
        <li>Use HTTP caching headers when appropriate</li>
      </ul>
    `,
    code: `add_action('wp_ajax_custom_action', 'handle_ajax_request');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '12 min',
    category: 'WordPress Advanced',
    tags: ['AJAX', 'JavaScript', 'Advanced'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 3.0+',
    seo: {
      metaTitle: 'WordPress AJAX Tutorial - Complete Implementation Guide 2025',
      metaDescription: 'Master WordPress AJAX with proper implementation, security, nonces, and real-world examples including load more posts, form submissions, and file uploads.',
      keywords: ['wordpress ajax', 'admin-ajax.php', 'wp_ajax', 'ajax wordpress tutorial', 'wordpress ajax security', 'load more posts ajax'],
      canonical: 'https://shahmir.dev/blog/add-ajax-functionality',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Add AJAX Functionality to WordPress Properly',
        description: 'Complete guide to implementing AJAX in WordPress with security best practices, nonces, and real-world examples.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 3.0+'
      }
    },
    faqs: [
      {
        question: "What's the difference between wp_ajax and wp_ajax_nopriv hooks?",
        answer: "wp_ajax_ hooks handle AJAX requests from logged-in users only, while wp_ajax_nopriv_ hooks handle requests from non-logged-in users. For public functionality (like contact forms), use both hooks to handle all users. For admin-only features, use only wp_ajax_."
      },
      {
        question: "How do I secure WordPress AJAX requests?",
        answer: "Use nonces (number used once) created with wp_create_nonce() and verify them with check_ajax_referer(). Always sanitize input with sanitize_text_field() or similar functions, validate data types and ranges, check user capabilities with current_user_can(), and escape output properly."
      },
      {
        question: "Why should I use wp_localize_script instead of hardcoding the AJAX URL?",
        answer: "wp_localize_script() passes PHP variables to JavaScript safely and handles escaping automatically. It also ensures your script works in different WordPress environments (subdirectory installations, multisite) and follows WordPress coding standards. It's the recommended method for passing data from PHP to JavaScript."
      },
      {
        question: "What's the best way to handle AJAX errors in WordPress?",
        answer: "Use wp_send_json_error() in PHP to return structured error responses. In JavaScript, implement error callbacks to handle network failures, display user-friendly messages, log errors to console for debugging, and provide retry options. Always have a complete callback to reset UI states."
      },
      {
        question: "How can I debug WordPress AJAX requests?",
        answer: "Use browser DevTools Network tab to inspect requests/responses, check the Console for JavaScript errors, add error_log() statements in PHP handlers, use plugins like Query Monitor, verify nonces are valid, and check that action names match between JavaScript and PHP. Return detailed error messages during development (remove in production)."
      }
    ]
  },
  {
    id: 88,
    slug: 'custom-api-endpoint',
    title: 'Create Custom REST API Endpoints in WordPress',
    excerpt: 'Learn how to create custom REST API endpoints in WordPress for exposing data, accepting submissions, and building headless applications.',
    content: `
      <h2>WordPress REST API Overview</h2>
      <p>The WordPress REST API allows you to interact with your WordPress site remotely by sending and receiving JSON data. Creating custom endpoints extends this functionality for your specific needs, enabling headless WordPress, mobile apps, and third-party integrations.</p>

      <h3>Basic Custom Endpoint</h3>
      <pre><code class="language-php">// Register custom API endpoint
function register_custom_endpoint() {
    register_rest_route('custom/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_custom_posts',
        'permission_callback' => '__return_true'
    ));
}
add_action('rest_api_init', 'register_custom_endpoint');

// Endpoint callback
function get_custom_posts($request) {
    $args = array(
        'post_type' => 'post',
        'posts_per_page' => 10,
        'post_status' => 'publish'
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        $data[] = array(
            'id' => $post->ID,
            'title' => $post->post_title,
            'content' => $post->post_content,
            'excerpt' => $post->post_excerpt,
            'date' => $post->post_date,
            'author' => get_the_author_meta('display_name', $post->post_author),
            'featured_image' => get_the_post_thumbnail_url($post->ID, 'full')
        );
    }

    return new WP_REST_Response($data, 200);
}</code></pre>

      <h3>Endpoint with Parameters</h3>
      <pre><code class="language-php">// Endpoint with URL parameters
function register_parameterized_endpoint() {
    register_rest_route('custom/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_post_by_id',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            )
        ),
        'permission_callback' => '__return_true'
    ));
}
add_action('rest_api_init', 'register_parameterized_endpoint');

function get_post_by_id($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post)) {
        return new WP_Error('no_post', 'Post not found', array('status' => 404));
    }

    $data = array(
        'id' => $post->ID,
        'title' => $post->post_title,
        'content' => apply_filters('the_content', $post->post_content),
        'author' => get_the_author_meta('display_name', $post->post_author),
        'date' => $post->post_date,
        'categories' => wp_get_post_categories($post->ID, array('fields' => 'names')),
        'tags' => wp_get_post_tags($post->ID, array('fields' => 'names'))
    );

    return rest_ensure_response($data);
}</code></pre>

      <h3>POST Endpoint for Data Submission</h3>
      <pre><code class="language-php">// Accept POST data
function register_submission_endpoint() {
    register_rest_route('custom/v1', '/submit', array(
        'methods' => 'POST',
        'callback' => 'handle_submission',
        'permission_callback' => 'check_submission_permission',
        'args' => array(
            'title' => array(
                'required' => true,
                'type' => 'string',
                'sanitize_callback' => 'sanitize_text_field',
                'validate_callback' => function($value) {
                    return !empty($value) && strlen($value) <= 200;
                }
            ),
            'content' => array(
                'required' => true,
                'type' => 'string',
                'sanitize_callback' => 'sanitize_textarea_field'
            ),
            'email' => array(
                'required' => true,
                'type' => 'string',
                'sanitize_callback' => 'sanitize_email',
                'validate_callback' => function($value) {
                    return is_email($value);
                }
            )
        )
    ));
}
add_action('rest_api_init', 'register_submission_endpoint');

function handle_submission($request) {
    $title = $request->get_param('title');
    $content = $request->get_param('content');
    $email = $request->get_param('email');

    // Create post
    $post_id = wp_insert_post(array(
        'post_title' => $title,
        'post_content' => $content,
        'post_status' => 'draft',
        'post_type' => 'post',
        'meta_input' => array(
            'submitter_email' => $email
        )
    ));

    if (is_wp_error($post_id)) {
        return new WP_Error('submission_failed', 'Failed to create submission', array('status' => 500));
    }

    return rest_ensure_response(array(
        'success' => true,
        'post_id' => $post_id,
        'message' => 'Submission received successfully'
    ));
}

function check_submission_permission($request) {
    // Check nonce or API key
    $api_key = $request->get_header('X-API-Key');
    return $api_key === get_option('custom_api_key');
}</code></pre>

      <h3>Authentication with API Keys</h3>
      <pre><code class="language-php">// API Key authentication
function register_authenticated_endpoint() {
    register_rest_route('custom/v1', '/secure-data', array(
        'methods' => 'GET',
        'callback' => 'get_secure_data',
        'permission_callback' => 'verify_api_key'
    ));
}
add_action('rest_api_init', 'register_authenticated_endpoint');

function verify_api_key($request) {
    $api_key = $request->get_header('X-API-Key');

    if (empty($api_key)) {
        return new WP_Error('no_api_key', 'API key is required', array('status' => 401));
    }

    // Verify against stored key
    $valid_key = get_option('custom_api_key');

    if ($api_key !== $valid_key) {
        return new WP_Error('invalid_api_key', 'Invalid API key', array('status' => 403));
    }

    return true;
}

function get_secure_data($request) {
    // Return sensitive data only to authenticated requests
    return rest_ensure_response(array(
        'data' => 'This is secure data',
        'timestamp' => current_time('mysql')
    ));
}</code></pre>

      <h3>Rate Limiting</h3>
      <pre><code class="language-php">// Implement rate limiting
function rate_limit_check($request) {
    $ip = $_SERVER['REMOTE_ADDR'];
    $transient_key = 'api_rate_limit_' . md5($ip);
    $requests = get_transient($transient_key);

    $max_requests = 100; // per hour

    if ($requests === false) {
        set_transient($transient_key, 1, HOUR_IN_SECONDS);
        return true;
    }

    if ($requests >= $max_requests) {
        return new WP_Error(
            'rate_limit_exceeded',
            'Rate limit exceeded. Please try again later.',
            array('status' => 429)
        );
    }

    set_transient($transient_key, $requests + 1, HOUR_IN_SECONDS);
    return true;
}

// Apply rate limiting to endpoint
function register_rate_limited_endpoint() {
    register_rest_route('custom/v1', '/limited', array(
        'methods' => 'GET',
        'callback' => 'limited_endpoint_callback',
        'permission_callback' => 'rate_limit_check'
    ));
}
add_action('rest_api_init', 'register_rate_limited_endpoint');</code></pre>

      <h3>Pagination Support</h3>
      <pre><code class="language-php">// Endpoint with pagination
function get_paginated_posts($request) {
    $page = $request->get_param('page') ?: 1;
    $per_page = $request->get_param('per_page') ?: 10;
    $per_page = min($per_page, 100); // Max 100 items

    $args = array(
        'post_type' => 'post',
        'posts_per_page' => $per_page,
        'paged' => $page,
        'post_status' => 'publish'
    );

    $query = new WP_Query($args);
    $posts = array();

    foreach ($query->posts as $post) {
        $posts[] = array(
            'id' => $post->ID,
            'title' => $post->post_title,
            'excerpt' => wp_trim_words($post->post_content, 20)
        );
    }

    $response = rest_ensure_response($posts);

    // Add pagination headers
    $response->header('X-WP-Total', $query->found_posts);
    $response->header('X-WP-TotalPages', $query->max_num_pages);

    return $response;
}

function register_paginated_endpoint() {
    register_rest_route('custom/v1', '/paginated-posts', array(
        'methods' => 'GET',
        'callback' => 'get_paginated_posts',
        'args' => array(
            'page' => array(
                'default' => 1,
                'validate_callback' => function($param) {
                    return is_numeric($param) && $param > 0;
                }
            ),
            'per_page' => array(
                'default' => 10,
                'validate_callback' => function($param) {
                    return is_numeric($param) && $param > 0 && $param <= 100;
                }
            )
        ),
        'permission_callback' => '__return_true'
    ));
}
add_action('rest_api_init', 'register_paginated_endpoint');</code></pre>

      <h3>Consuming Your API with JavaScript</h3>
      <pre><code class="language-javascript">// Fetch data from custom endpoint
fetch('https://yoursite.com/wp-json/custom/v1/posts')
    .then(response => response.json())
    .then(data => {
        console.log(data);
        displayPosts(data);
    })
    .catch(error => console.error('Error:', error));

// POST data to endpoint
async function submitData() {
    const response = await fetch('https://yoursite.com/wp-json/custom/v1/submit', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-API-Key': 'your-api-key-here'
        },
        body: JSON.stringify({
            title: 'My Title',
            content: 'My Content',
            email: 'user@example.com'
        })
    });

    const result = await response.json();
    console.log(result);
}

// Fetch with pagination
async function getPaginatedPosts(page = 1, perPage = 10) {
    const response = await fetch(
        \`https://yoursite.com/wp-json/custom/v1/paginated-posts?page=\${page}&per_page=\${perPage}\`
    );

    const data = await response.json();
    const totalPosts = response.headers.get('X-WP-Total');
    const totalPages = response.headers.get('X-WP-TotalPages');

    return { data, totalPosts, totalPages };
}</code></pre>

      <h3>Testing Your API</h3>
      <pre><code class="language-bash"># Test with cURL
curl https://yoursite.com/wp-json/custom/v1/posts

# POST request with cURL
curl -X POST https://yoursite.com/wp-json/custom/v1/submit \
  -H "Content-Type: application/json" \
  -H "X-API-Key: your-key" \
  -d '{"title":"Test","content":"Test content","email":"test@example.com"}'

# Test with API key
curl https://yoursite.com/wp-json/custom/v1/secure-data \
  -H "X-API-Key: your-api-key"</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Plan your API structure and endpoints</li>
        <li>Register routes with register_rest_route()</li>
        <li>Define callbacks to handle requests</li>
        <li>Implement permission callbacks for security</li>
        <li>Add validation and sanitization</li>
        <li>Test endpoints thoroughly</li>
        <li>Document your API for consumers</li>
        <li>Monitor usage and performance</li>
      </ol>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Use Namespaces:</strong> Version your API (e.g., 'myapi/v1')</li>
        <li><strong>Validate Input:</strong> Always validate and sanitize parameters</li>
        <li><strong>Authentication:</strong> Protect sensitive endpoints</li>
        <li><strong>Error Handling:</strong> Return proper HTTP status codes</li>
        <li><strong>Documentation:</strong> Document parameters, responses, and examples</li>
        <li><strong>Caching:</strong> Implement caching for heavy queries</li>
        <li><strong>Rate Limiting:</strong> Prevent abuse with rate limits</li>
      </ul>

      <h3>Security Considerations</h3>
      <ul>
        <li>Never expose sensitive data without authentication</li>
        <li>Use nonces for cookie-based authentication</li>
        <li>Implement API keys for programmatic access</li>
        <li>Add CORS headers if needed for cross-domain requests</li>
        <li>Log API access for security monitoring</li>
        <li>Consider OAuth2 for complex applications</li>
      </ul>
    `,
    code: `register_rest_route('custom/v1', '/posts', array('methods' => 'GET', 'callback' => 'get_custom_posts'));`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '15 min',
    category: 'WordPress Advanced',
    tags: ['REST API', 'API', 'Development'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 4.7+',
    seo: {
      metaTitle: 'Create Custom WordPress REST API Endpoints - Complete Guide 2025',
      metaDescription: 'Learn how to create custom REST API endpoints in WordPress with authentication, rate limiting, pagination, and security best practices.',
      keywords: ['wordpress rest api', 'custom api endpoint', 'register_rest_route', 'wordpress api', 'headless wordpress', 'wp rest api tutorial'],
      canonical: 'https://shahmir.dev/blog/custom-api-endpoint',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Create Custom REST API Endpoints in WordPress',
        description: 'Comprehensive guide to creating custom WordPress REST API endpoints with authentication, validation, and security.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 4.7+'
      }
    },
    faqs: [
      {
        question: "How do I create a custom REST API endpoint in WordPress?",
        answer: "Use register_rest_route() in a function hooked to 'rest_api_init'. Specify the namespace (e.g., 'myapi/v1'), route pattern, HTTP methods, callback function, and permission callback. The callback function receives a WP_REST_Request object and should return WP_REST_Response or use rest_ensure_response()."
      },
      {
        question: "What's the difference between permission_callback and authentication?",
        answer: "permission_callback determines if a request is allowed to proceed (authorization), while authentication identifies who is making the request. You can use permission_callback to check user capabilities, verify API keys, or implement custom access control. Returning __return_true makes the endpoint public."
      },
      {
        question: "How do I secure my custom WordPress API endpoints?",
        answer: "Implement proper permission callbacks, validate and sanitize all input, use API keys or OAuth for authentication, implement rate limiting, return appropriate HTTP status codes, never expose sensitive data without authentication, add CORS headers carefully, and log API access for monitoring."
      },
      {
        question: "Can I use WordPress authentication for my custom API endpoints?",
        answer: "Yes, WordPress REST API supports cookie authentication (for same-origin requests), application passwords (WordPress 5.6+), and OAuth via plugins. For custom authentication, check headers in your permission_callback and validate against stored credentials or API keys."
      },
      {
        question: "How do I add pagination to my WordPress API endpoint?",
        answer: "Accept 'page' and 'per_page' parameters, use WP_Query with 'paged' and 'posts_per_page' arguments, and add X-WP-Total and X-WP-TotalPages headers to the response using $response->header(). Limit max per_page to prevent abuse (typically 100). Return pagination metadata in the response or headers."
      }
    ]
  },
  {
    id: 89,
    slug: 'custom-cron-job',
    title: 'Schedule Custom WordPress Cron Jobs',
    excerpt: 'Learn how to create and manage custom WordPress cron jobs for automated tasks like backups, email sending, and data synchronization.',
    content: `
      <h2>Understanding WordPress Cron</h2>
      <p>WordPress Cron (WP-Cron) is a scheduled task system that runs when someone visits your site. Unlike server cron, WP-Cron executes on page load, making it reliable for most WordPress sites without requiring server access.</p>

      <h3>Basic Cron Job Setup</h3>
      <pre><code class="language-php">// Schedule a recurring cron job
function schedule_custom_cron() {
    if (!wp_next_scheduled('my_custom_cron_event')) {
        wp_schedule_event(time(), 'hourly', 'my_custom_cron_event');
    }
}
add_action('wp', 'schedule_custom_cron');

// Define what the cron job does
function execute_custom_cron() {
    // Your code here
    error_log('Custom cron job executed at ' . current_time('mysql'));

    // Example: Clean up old data
    global $wpdb;
    $wpdb->query("DELETE FROM {$wpdb->postmeta} WHERE meta_key = '_transient_timeout_%' AND meta_value < UNIX_TIMESTAMP()");
}
add_action('my_custom_cron_event', 'execute_custom_cron');</code></pre>

      <h3>Custom Cron Schedule Intervals</h3>
      <pre><code class="language-php">// Add custom cron intervals
function add_custom_cron_intervals($schedules) {
    // Every 5 minutes
    $schedules['every_five_minutes'] = array(
        'interval' => 300,
        'display' => __('Every 5 Minutes')
    );

    // Every 15 minutes
    $schedules['every_fifteen_minutes'] = array(
        'interval' => 900,
        'display' => __('Every 15 Minutes')
    );

    // Twice daily
    $schedules['twice_daily'] = array(
        'interval' => 43200, // 12 hours
        'display' => __('Twice Daily')
    );

    // Weekly
    $schedules['weekly'] = array(
        'interval' => 604800,
        'display' => __('Once Weekly')
    );

    // Monthly
    $schedules['monthly'] = array(
        'interval' => 2635200, // 30.5 days
        'display' => __('Once Monthly')
    );

    return $schedules;
}
add_filter('cron_schedules', 'add_custom_cron_intervals');</code></pre>

      <h3>Schedule at Specific Time</h3>
      <pre><code class="language-php">// Schedule daily task at 3 AM
function schedule_daily_task() {
    if (!wp_next_scheduled('daily_cleanup_task')) {
        // Get next 3 AM timestamp
        $next_3am = strtotime('tomorrow 3:00 AM');

        wp_schedule_event($next_3am, 'daily', 'daily_cleanup_task');
    }
}
add_action('wp', 'schedule_daily_task');

function run_daily_cleanup() {
    // Clean up expired transients
    delete_expired_transients();

    // Remove old post revisions
    global $wpdb;
    $wpdb->query("DELETE FROM {$wpdb->posts} WHERE post_type = 'revision' AND post_modified < DATE_SUB(NOW(), INTERVAL 30 DAY)");

    // Optimize database tables
    $tables = $wpdb->get_results('SHOW TABLES', ARRAY_N);
    foreach ($tables as $table) {
        $wpdb->query("OPTIMIZE TABLE {$table[0]}");
    }

    error_log('Daily cleanup completed at ' . current_time('mysql'));
}
add_action('daily_cleanup_task', 'run_daily_cleanup');</code></pre>

      <h3>One-Time Scheduled Event</h3>
      <pre><code class="language-php">// Schedule a one-time event
function schedule_one_time_event() {
    // Schedule 2 hours from now
    $timestamp = time() + (2 * HOUR_IN_SECONDS);

    if (!wp_next_scheduled('one_time_notification', array(123))) {
        wp_schedule_single_event($timestamp, 'one_time_notification', array(123));
    }
}

// Execute one-time event
function send_one_time_notification($user_id) {
    $user = get_user_by('id', $user_id);

    if ($user) {
        wp_mail(
            $user->user_email,
            'Scheduled Notification',
            'This is a scheduled message sent 2 hours after registration.'
        );
    }
}
add_action('one_time_notification', 'send_one_time_notification');</code></pre>

      <h3>Email Digest Cron Job</h3>
      <pre><code class="language-php">// Send weekly email digest
function schedule_weekly_digest() {
    if (!wp_next_scheduled('send_weekly_digest')) {
        // Schedule for every Monday at 8 AM
        $next_monday = strtotime('next Monday 8:00 AM');
        wp_schedule_event($next_monday, 'weekly', 'send_weekly_digest');
    }
}
add_action('wp', 'schedule_weekly_digest');

function send_weekly_email_digest() {
    // Get posts from last week
    $args = array(
        'post_type' => 'post',
        'posts_per_page' => 10,
        'date_query' => array(
            array(
                'after' => '1 week ago'
            )
        )
    );

    $recent_posts = get_posts($args);

    if (empty($recent_posts)) {
        return;
    }

    // Build email content
    $message = '<h2>Weekly Digest</h2>';
    $message .= '<p>Here are the posts from last week:</p><ul>';

    foreach ($recent_posts as $post) {
        $message .= sprintf(
            '<li><a href="%s">%s</a> - %s</li>',
            get_permalink($post->ID),
            $post->post_title,
            get_the_date('', $post->ID)
        );
    }

    $message .= '</ul>';

    // Send to all subscribers
    $subscribers = get_users(array(
        'meta_key' => 'newsletter_subscriber',
        'meta_value' => '1'
    ));

    $headers = array('Content-Type: text/html; charset=UTF-8');

    foreach ($subscribers as $subscriber) {
        wp_mail(
            $subscriber->user_email,
            'Your Weekly Digest',
            $message,
            $headers
        );
    }

    error_log('Weekly digest sent to ' . count($subscribers) . ' subscribers');
}
add_action('send_weekly_digest', 'send_weekly_email_digest');</code></pre>

      <h3>Database Backup Cron</h3>
      <pre><code class="language-php">// Daily database backup
function schedule_database_backup() {
    if (!wp_next_scheduled('daily_database_backup')) {
        $timestamp = strtotime('tomorrow 2:00 AM');
        wp_schedule_event($timestamp, 'daily', 'daily_database_backup');
    }
}
add_action('wp', 'schedule_database_backup');

function perform_database_backup() {
    global $wpdb;

    $backup_dir = WP_CONTENT_DIR . '/backups/';

    // Create directory if not exists
    if (!file_exists($backup_dir)) {
        mkdir($backup_dir, 0755, true);
    }

    // Get all tables
    $tables = $wpdb->get_results('SHOW TABLES', ARRAY_N);
    $backup_file = $backup_dir . 'backup-' . date('Y-m-d-H-i-s') . '.sql';

    $handle = fopen($backup_file, 'w+');

    foreach ($tables as $table) {
        $table_name = $table[0];

        // Get table structure
        $create_table = $wpdb->get_row("SHOW CREATE TABLE $table_name", ARRAY_N);
        fwrite($handle, "\n\n" . $create_table[1] . ";\n\n");

        // Get table data
        $rows = $wpdb->get_results("SELECT * FROM $table_name", ARRAY_A);

        foreach ($rows as $row) {
            $values = array_map(function($value) use ($wpdb) {
                return $wpdb->prepare('%s', $value);
            }, array_values($row));

            $insert = "INSERT INTO $table_name VALUES(" . implode(',', $values) . ");\n";
            fwrite($handle, $insert);
        }
    }

    fclose($handle);

    // Delete backups older than 7 days
    $files = glob($backup_dir . '*.sql');
    foreach ($files as $file) {
        if (filemtime($file) < strtotime('-7 days')) {
            unlink($file);
        }
    }

    error_log('Database backup completed: ' . $backup_file);
}
add_action('daily_database_backup', 'perform_database_backup');</code></pre>

      <h3>Unscheduling Cron Jobs</h3>
      <pre><code class="language-php">// Remove scheduled event
function remove_custom_cron() {
    $timestamp = wp_next_scheduled('my_custom_cron_event');
    if ($timestamp) {
        wp_unschedule_event($timestamp, 'my_custom_cron_event');
    }

    // Or clear all instances
    wp_clear_scheduled_hook('my_custom_cron_event');
}

// Clear on plugin deactivation
register_deactivation_hook(__FILE__, 'remove_custom_cron');</code></pre>

      <h3>Debug and Monitor Cron</h3>
      <pre><code class="language-php">// List all scheduled cron jobs
function list_scheduled_crons() {
    $crons = _get_cron_array();

    echo '<pre>';
    foreach ($crons as $timestamp => $cron) {
        foreach ($cron as $hook => $events) {
            echo 'Hook: ' . $hook . "\n";
            echo 'Next run: ' . date('Y-m-d H:i:s', $timestamp) . "\n";
            echo 'Schedule: ' . (isset($events[key($events)]['schedule']) ? $events[key($events)]['schedule'] : 'once') . "\n\n";
        }
    }
    echo '</pre>';
}

// Check if cron is working
function test_wp_cron() {
    $doing_cron = get_transient('doing_cron');

    if ($doing_cron) {
        echo 'WP-Cron is currently running';
    } else {
        echo 'WP-Cron is idle';
    }

    // Test spawn cron
    $result = spawn_cron();
    echo $result ? ' - Spawn successful' : ' - Spawn failed';
}</code></pre>

      <h3>Using Real Server Cron (Alternative)</h3>
      <pre><code class="language-php">// Disable WP-Cron in wp-config.php
define('DISABLE_WP_CRON', true);

// Add to server crontab (Linux)
// */15 * * * * wget -q -O - https://yoursite.com/wp-cron.php?doing_wp_cron >/dev/null 2>&1

// Or use curl
// */15 * * * * curl https://yoursite.com/wp-cron.php?doing_wp_cron >/dev/null 2>&1</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Define custom cron schedules with cron_schedules filter</li>
        <li>Schedule event with wp_schedule_event() or wp_schedule_single_event()</li>
        <li>Create callback function for the scheduled task</li>
        <li>Hook callback to your custom event with add_action()</li>
        <li>Test thoroughly in development environment</li>
        <li>Monitor execution with error logs</li>
        <li>Unschedule events on plugin deactivation</li>
      </ol>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Check Before Scheduling:</strong> Use wp_next_scheduled() to avoid duplicates</li>
        <li><strong>Efficient Queries:</strong> Optimize database queries for cron tasks</li>
        <li><strong>Error Handling:</strong> Log errors and failures for monitoring</li>
        <li><strong>Resource Management:</strong> Keep tasks lightweight to avoid timeouts</li>
        <li><strong>Cleanup:</strong> Always unschedule on deactivation</li>
        <li><strong>Testing:</strong> Test cron jobs thoroughly before production</li>
      </ul>

      <h3>Common Use Cases</h3>
      <ul>
        <li>Automated database backups and optimization</li>
        <li>Sending scheduled email newsletters</li>
        <li>Cleaning up expired transients and cache</li>
        <li>Synchronizing data with external APIs</li>
        <li>Generating reports and analytics</li>
        <li>Publishing scheduled content</li>
        <li>Checking for updates and maintenance</li>
      </ul>
    `,
    code: `wp_schedule_event(time(), 'hourly', 'my_custom_cron_event');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '12 min',
    category: 'WordPress Advanced',
    tags: ['Cron', 'Automation', 'WP-Cron'],
    difficulty: 'Advanced',
    compatibility: 'WordPress 2.1+',
    seo: {
      metaTitle: 'WordPress Cron Jobs - Complete Scheduling Guide 2025',
      metaDescription: 'Master WordPress cron jobs with custom schedules, automated tasks, email sending, database backups, and WP-Cron optimization tips.',
      keywords: ['wordpress cron', 'wp_cron', 'schedule wordpress task', 'wordpress automation', 'wp_schedule_event', 'custom cron interval'],
      canonical: 'https://shahmir.dev/blog/custom-cron-job',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Schedule Custom WordPress Cron Jobs',
        description: 'Comprehensive guide to creating and managing WordPress cron jobs for automated tasks, backups, and scheduled operations.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Advanced',
        dependencies: 'WordPress 2.1+'
      }
    },
    faqs: [
      {
        question: "What's the difference between WP-Cron and server cron?",
        answer: "WP-Cron runs when someone visits your WordPress site, making it dependent on site traffic. Server cron runs at exact times regardless of traffic, making it more reliable but requiring server access. For high-traffic sites, WP-Cron works fine. For low-traffic sites or time-critical tasks, use server cron with DISABLE_WP_CRON."
      },
      {
        question: "Why isn't my WordPress cron job running?",
        answer: "Common reasons: No site visitors (WP-Cron requires traffic), caching plugins preventing wp-cron.php execution, server timeout on long tasks, duplicate scheduling conflicts, or WP-Cron is disabled. Check with wp_next_scheduled() if event is scheduled, monitor error logs, and test with WP-Cron plugins like WP Crontrol."
      },
      {
        question: "How do I create a custom cron schedule in WordPress?",
        answer: "Use the cron_schedules filter to add custom intervals. Return an array with 'interval' (seconds) and 'display' (name) keys. For example: $schedules['every_5_minutes'] = array('interval' => 300, 'display' => 'Every 5 Minutes'). Then use this schedule name in wp_schedule_event()."
      },
      {
        question: "Should I disable WP-Cron and use server cron instead?",
        answer: "Use server cron if you need exact execution times, have low site traffic, run resource-intensive tasks, or require guaranteed execution. Keep WP-Cron if you don't have server access, have high traffic (10+ visitors per minute), or prefer simplicity. For most sites, WP-Cron works perfectly fine."
      },
      {
        question: "How do I debug WordPress cron jobs that aren't working?",
        answer: "Install WP Crontrol plugin to view all scheduled events, check error logs for execution errors, use wp_next_scheduled() to verify scheduling, test callback function independently, ensure no fatal PHP errors in callback, check server timeout limits, and verify no caching preventing wp-cron.php access. Add error_log() statements for debugging."
      }
    ]
  },
  {
    id: 90,
    slug: 'custom-shortcodes',
    title: 'Create Custom Shortcodes in WordPress',
    excerpt: 'Build powerful custom shortcodes with attributes, content wrapping, and dynamic functionality for flexible content management.',
    content: `
      <h2>Understanding WordPress Shortcodes</h2>
      <p>Shortcodes are special tags that WordPress replaces with dynamic content. They allow users to add complex functionality to posts and pages without writing code. Custom shortcodes extend WordPress with reusable content blocks and interactive features.</p>

      <h3>Basic Shortcode Creation</h3>
      <pre><code class="language-php">// Simple shortcode without parameters
function hello_world_shortcode() {
    return '<p>Hello World! This is a custom shortcode.</p>';
}
add_shortcode('hello', 'hello_world_shortcode');

// Usage: [hello]</code></pre>

      <h3>Shortcode with Attributes</h3>
      <pre><code class="language-php">// Shortcode with parameters
function button_shortcode($atts) {
    $atts = shortcode_atts(array(
        'url' => '#',
        'text' => 'Click Here',
        'color' => 'blue',
        'size' => 'medium',
        'target' => '_self'
    ), $atts, 'button');

    $classes = 'custom-button btn-' . esc_attr($atts['color']) . ' btn-' . esc_attr($atts['size']);

    return sprintf(
        '<a href="%s" class="%s" target="%s">%s</a>',
        esc_url($atts['url']),
        $classes,
        esc_attr($atts['target']),
        esc_html($atts['text'])
    );
}
add_shortcode('button', 'button_shortcode');

// Usage: [button url="https://example.com" text="Learn More" color="green" target="_blank"]</code></pre>

      <h3>Enclosing Shortcode (With Content)</h3>
      <pre><code class="language-php">// Shortcode that wraps content
function highlight_shortcode($atts, $content = null) {
    $atts = shortcode_atts(array(
        'color' => 'yellow',
        'text_color' => 'black'
    ), $atts, 'highlight');

    $style = sprintf(
        'background-color: %s; color: %s; padding: 10px; border-radius: 5px;',
        esc_attr($atts['color']),
        esc_attr($atts['text_color'])
    );

    return sprintf(
        '<span class="highlight" style="%s">%s</span>',
        $style,
        do_shortcode($content) // Allow nested shortcodes
    );
}
add_shortcode('highlight', 'highlight_shortcode');

// Usage: [highlight color="yellow"]This text is highlighted[/highlight]</code></pre>

      <h3>Display Recent Posts Shortcode</h3>
      <pre><code class="language-php">// Recent posts shortcode
function recent_posts_shortcode($atts) {
    $atts = shortcode_atts(array(
        'posts' => 5,
        'category' => '',
        'show_excerpt' => 'yes',
        'show_date' => 'yes',
        'show_thumbnail' => 'yes'
    ), $atts, 'recent_posts');

    $args = array(
        'posts_per_page' => intval($atts['posts']),
        'post_status' => 'publish',
        'ignore_sticky_posts' => 1
    );

    if (!empty($atts['category'])) {
        $args['category_name'] = sanitize_text_field($atts['category']);
    }

    $query = new WP_Query($args);

    if (!$query->have_posts()) {
        return '<p>No posts found.</p>';
    }

    ob_start();
    ?>
    <div class="recent-posts-shortcode">
        <?php while ($query->have_posts()) : $query->the_post(); ?>
            <div class="recent-post-item">
                <?php if ($atts['show_thumbnail'] === 'yes' && has_post_thumbnail()) : ?>
                    <div class="post-thumbnail">
                        <a href="<?php the_permalink(); ?>">
                            <?php the_post_thumbnail('thumbnail'); ?>
                        </a>
                    </div>
                <?php endif; ?>

                <div class="post-content">
                    <h3><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h3>

                    <?php if ($atts['show_date'] === 'yes') : ?>
                        <span class="post-date"><?php echo get_the_date(); ?></span>
                    <?php endif; ?>

                    <?php if ($atts['show_excerpt'] === 'yes') : ?>
                        <div class="post-excerpt">
                            <?php echo wp_trim_words(get_the_excerpt(), 20); ?>
                        </div>
                    <?php endif; ?>

                    <a href="<?php the_permalink(); ?>" class="read-more">Read More</a>
                </div>
            </div>
        <?php endwhile; ?>
    </div>
    <?php
    wp_reset_postdata();

    return ob_get_clean();
}
add_shortcode('recent_posts', 'recent_posts_shortcode');

// Usage: [recent_posts posts="5" category="news" show_excerpt="yes"]</code></pre>

      <h3>Contact Form Shortcode</h3>
      <pre><code class="language-php">// Simple contact form shortcode
function contact_form_shortcode($atts) {
    $atts = shortcode_atts(array(
        'email' => get_option('admin_email'),
        'subject' => 'Contact Form Submission'
    ), $atts, 'contact_form');

    // Handle form submission
    if (isset($_POST['contact_submit'])) {
        $name = sanitize_text_field($_POST['contact_name']);
        $email = sanitize_email($_POST['contact_email']);
        $message = sanitize_textarea_field($_POST['contact_message']);

        if (empty($name) || empty($email) || !is_email($email) || empty($message)) {
            $error = 'Please fill all fields correctly.';
        } else {
            $headers = array('Content-Type: text/html; charset=UTF-8', 'Reply-To: ' . $email);
            $body = "<p><strong>Name:</strong> $name</p>";
            $body .= "<p><strong>Email:</strong> $email</p>";
            $body .= "<p><strong>Message:</strong></p><p>$message</p>";

            if (wp_mail($atts['email'], $atts['subject'], $body, $headers)) {
                return '<div class="contact-success">Thank you! Your message has been sent.</div>';
            } else {
                $error = 'Failed to send message. Please try again.';
            }
        }
    }

    ob_start();
    ?>
    <form method="post" class="contact-form-shortcode">
        <?php if (isset($error)) : ?>
            <div class="contact-error"><?php echo esc_html($error); ?></div>
        <?php endif; ?>

        <p>
            <label for="contact_name">Name:</label>
            <input type="text" name="contact_name" id="contact_name" required>
        </p>

        <p>
            <label for="contact_email">Email:</label>
            <input type="email" name="contact_email" id="contact_email" required>
        </p>

        <p>
            <label for="contact_message">Message:</label>
            <textarea name="contact_message" id="contact_message" rows="5" required></textarea>
        </p>

        <p>
            <button type="submit" name="contact_submit">Send Message</button>
        </p>
    </form>
    <?php
    return ob_get_clean();
}
add_shortcode('contact_form', 'contact_form_shortcode');

// Usage: [contact_form email="info@example.com" subject="New Contact"]</code></pre>

      <h3>Pricing Table Shortcode</h3>
      <pre><code class="language-php">// Pricing table shortcode
function pricing_table_shortcode($atts, $content = null) {
    $atts = shortcode_atts(array(
        'columns' => 3
    ), $atts, 'pricing_table');

    return sprintf(
        '<div class="pricing-table columns-%d">%s</div>',
        intval($atts['columns']),
        do_shortcode($content)
    );
}
add_shortcode('pricing_table', 'pricing_table_shortcode');

// Individual pricing column
function pricing_column_shortcode($atts, $content = null) {
    $atts = shortcode_atts(array(
        'title' => 'Plan',
        'price' => '$0',
        'period' => 'month',
        'featured' => 'no',
        'button_text' => 'Choose Plan',
        'button_url' => '#'
    ), $atts, 'pricing_column');

    $featured_class = $atts['featured'] === 'yes' ? ' featured' : '';

    ob_start();
    ?>
    <div class="pricing-column<?php echo $featured_class; ?>">
        <h3 class="plan-title"><?php echo esc_html($atts['title']); ?></h3>
        <div class="plan-price">
            <span class="price"><?php echo esc_html($atts['price']); ?></span>
            <span class="period">per <?php echo esc_html($atts['period']); ?></span>
        </div>
        <div class="plan-features">
            <?php echo do_shortcode($content); ?>
        </div>
        <a href="<?php echo esc_url($atts['button_url']); ?>" class="plan-button">
            <?php echo esc_html($atts['button_text']); ?>
        </a>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('pricing_column', 'pricing_column_shortcode');

// Usage:
// [pricing_table columns="3"]
//   [pricing_column title="Basic" price="$9" period="month"]
//     <ul><li>Feature 1</li><li>Feature 2</li></ul>
//   [/pricing_column]
//   [pricing_column title="Pro" price="$19" period="month" featured="yes"]
//     <ul><li>All Basic</li><li>Feature 3</li></ul>
//   [/pricing_column]
// [/pricing_table]</code></pre>

      <h3>Conditional Content Shortcode</h3>
      <pre><code class="language-php">// Show content based on user role
function user_role_shortcode($atts, $content = null) {
    $atts = shortcode_atts(array(
        'roles' => 'subscriber' // Comma-separated roles
    ), $atts, 'user_role');

    if (!is_user_logged_in()) {
        return '';
    }

    $user = wp_get_current_user();
    $allowed_roles = array_map('trim', explode(',', $atts['roles']));

    foreach ($allowed_roles as $role) {
        if (in_array($role, $user->roles)) {
            return do_shortcode($content);
        }
    }

    return '';
}
add_shortcode('user_role', 'user_role_shortcode');

// Usage: [user_role roles="administrator,editor"]This content is for admins and editors only[/user_role]

// Show content to logged-in users
function logged_in_shortcode($atts, $content = null) {
    return is_user_logged_in() ? do_shortcode($content) : '';
}
add_shortcode('logged_in', 'logged_in_shortcode');

// Show content to guests
function guest_shortcode($atts, $content = null) {
    return !is_user_logged_in() ? do_shortcode($content) : '';
}
add_shortcode('guest', 'guest_shortcode');</code></pre>

      <h3>Current Year/Date Shortcode</h3>
      <pre><code class="language-php">// Display current year (for copyright)
function year_shortcode() {
    return date('Y');
}
add_shortcode('year', 'year_shortcode');

// Display current date with format
function current_date_shortcode($atts) {
    $atts = shortcode_atts(array(
        'format' => 'F j, Y' // Default: January 1, 2025
    ), $atts, 'current_date');

    return date($atts['format']);
}
add_shortcode('current_date', 'current_date_shortcode');

// Usage: Copyright © [year] or Today is [current_date format="l, F j, Y"]</code></pre>

      <h3>Enqueue Shortcode Assets</h3>
      <pre><code class="language-php">// Enqueue styles and scripts for shortcodes
function enqueue_shortcode_assets() {
    global $post;

    // Check if shortcode is present
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'pricing_table')) {
        wp_enqueue_style('pricing-table', get_template_directory_uri() . '/css/pricing-table.css');
        wp_enqueue_script('pricing-table', get_template_directory_uri() . '/js/pricing-table.js', array('jquery'), '1.0', true);
    }
}
add_action('wp_enqueue_scripts', 'enqueue_shortcode_assets');</code></pre>

      <h3>Implementation Steps</h3>
      <ol>
        <li>Create a function that returns content (not echo)</li>
        <li>Use shortcode_atts() to define default attributes</li>
        <li>Sanitize and validate all input</li>
        <li>Escape output for security</li>
        <li>Register with add_shortcode()</li>
        <li>Test in posts, pages, and widgets</li>
        <li>Document usage for users</li>
      </ol>

      <h3>Best Practices</h3>
      <ul>
        <li><strong>Return, Don't Echo:</strong> Always return content, never echo</li>
        <li><strong>Use shortcode_atts():</strong> Define defaults and sanitize attributes</li>
        <li><strong>Escape Output:</strong> Use esc_html(), esc_url(), esc_attr()</li>
        <li><strong>Allow Nesting:</strong> Use do_shortcode() for content parameters</li>
        <li><strong>Unique Names:</strong> Prefix shortcode names to avoid conflicts</li>
        <li><strong>Conditional Assets:</strong> Only load CSS/JS when shortcode is used</li>
        <li><strong>Documentation:</strong> Provide clear usage examples</li>
      </ul>
    `,
    code: `add_shortcode('button', 'button_shortcode');`,
    author: {
      name: 'Shahmir Khan',
      avatar: '/images/avatar.jpg',
      bio: 'WordPress Developer & Code Snippet Specialist'
    },
    date: '2025-01-18',
    readTime: '10 min',
    category: 'WordPress Advanced',
    tags: ['Shortcodes', 'Content', 'Development'],
    difficulty: 'Intermediate',
    compatibility: 'WordPress 2.5+',
    seo: {
      metaTitle: 'Create Custom WordPress Shortcodes - Complete Guide 2025',
      metaDescription: 'Learn how to create custom WordPress shortcodes with attributes, nested content, and dynamic functionality. Includes practical examples and best practices.',
      keywords: ['wordpress shortcodes', 'custom shortcodes', 'add_shortcode', 'shortcode_atts', 'wordpress shortcode tutorial', 'create shortcode'],
      canonical: 'https://shahmir.dev/blog/custom-shortcodes',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Create Custom Shortcodes in WordPress',
        description: 'Comprehensive guide to building custom WordPress shortcodes with attributes, content wrapping, and real-world examples.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khan'
        },
        datePublished: '2025-01-18',
        dateModified: '2025-01-18',
        proficiencyLevel: 'Intermediate',
        dependencies: 'WordPress 2.5+'
      }
    },
    faqs: [
      {
        question: "What's the difference between a self-closing and enclosing shortcode?",
        answer: "Self-closing shortcodes like [button] don't wrap content and don't use the $content parameter. Enclosing shortcodes like [highlight]text[/highlight] wrap content and receive it as the $content parameter in the callback function. Use enclosing shortcodes when you need to apply formatting or functionality to user-provided content."
      },
      {
        question: "Why should I use shortcode_atts() instead of accessing $atts directly?",
        answer: "shortcode_atts() provides default values for missing attributes, filters attributes through WordPress hooks allowing modification, ensures consistent behavior, and helps prevent undefined index errors. It's the WordPress way to handle shortcode attributes and makes your code more maintainable and extensible."
      },
      {
        question: "How do I allow nested shortcodes inside my custom shortcode?",
        answer: "Use do_shortcode($content) on the content parameter before returning it. This processes any shortcodes within your shortcode's content. For example: return '<div>' . do_shortcode($content) . '</div>'. Without do_shortcode(), nested shortcodes would appear as plain text instead of being processed."
      },
      {
        question: "What's the proper way to enqueue CSS/JS only when my shortcode is used?",
        answer: "Check if the shortcode exists using has_shortcode($post->post_content, 'your_shortcode') in wp_enqueue_scripts hook. This prevents loading assets on every page. Alternatively, enqueue assets directly in your shortcode callback using wp_enqueue_style() and wp_enqueue_script() - WordPress will handle them correctly even in content."
      },
      {
        question: "Why should shortcode functions return content instead of echo?",
        answer: "Shortcodes must return content because WordPress replaces the shortcode tag with the returned value in the content flow. If you echo instead of return, the content appears at the top of the page (before headers) and the shortcode position remains empty. Always use return, never echo, in shortcode callbacks."
      }
    ]
  },
  {
    id: 91,
    slug: 'database-optimization',
    title: 'Optimize WordPress Database',
    excerpt: 'Clean up and optimize your WordPress database for better performance by removing unnecessary data and optimizing tables.',
    content: `&lt;h2&gt;Why Optimize the WordPress Database?&lt;/h2&gt;
&lt;p&gt;Over time, WordPress databases accumulate post revisions, spam comments, transients, and other data that slows down queries. Regular optimization improves site speed and reduces server load.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Backup your database before making any changes&lt;/li&gt;
  &lt;li&gt;Add optimization code to functions.php or use via cron&lt;/li&gt;
  &lt;li&gt;Review what's being deleted before running&lt;/li&gt;
  &lt;li&gt;Monitor database size and query performance&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What Gets Cleaned&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Post revisions (old versions of posts/pages)&lt;/li&gt;
  &lt;li&gt;Auto-draft posts&lt;/li&gt;
  &lt;li&gt;Trashed posts and comments&lt;/li&gt;
  &lt;li&gt;Spam and deleted comments&lt;/li&gt;
  &lt;li&gt;Expired transients&lt;/li&gt;
  &lt;li&gt;Orphaned post meta&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Always backup before optimization&lt;/li&gt;
  &lt;li&gt;Schedule optimizations during low-traffic periods&lt;/li&gt;
  &lt;li&gt;Limit post revisions to prevent future bloat&lt;/li&gt;
  &lt;li&gt;Use indices on large custom tables&lt;/li&gt;
  &lt;li&gt;Monitor database size regularly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Safety Considerations&lt;/h2&gt;
&lt;p&gt;Never run database optimization on a live site without testing first. Some operations are irreversible. Consider using plugins like WP-Optimize or Advanced Database Cleaner for safer automated optimization.&lt;/p&gt;`,
    code: `// Clean post revisions
function clean_post_revisions() {
    global $wpdb;

    // Delete all post revisions
    $wpdb->query("DELETE FROM $wpdb->posts WHERE post_type = 'revision'");

    // Clean up orphaned post meta
    $wpdb->query("DELETE pm FROM $wpdb->postmeta pm LEFT JOIN $wpdb->posts wp ON wp.ID = pm.post_id WHERE wp.ID IS NULL");
}

// Clean auto-drafts
function clean_auto_drafts() {
    global $wpdb;
    $wpdb->query("DELETE FROM $wpdb->posts WHERE post_status = 'auto-draft'");
}

// Clean trashed posts
function clean_trashed_posts() {
    global $wpdb;
    $wpdb->query("DELETE FROM $wpdb->posts WHERE post_status = 'trash'");
}

// Clean spam and trashed comments
function clean_spam_comments() {
    global $wpdb;
    $wpdb->query("DELETE FROM $wpdb->comments WHERE comment_approved = 'spam' OR comment_approved = 'trash'");

    // Clean orphaned comment meta
    $wpdb->query("DELETE FROM $wpdb->commentmeta WHERE comment_id NOT IN (SELECT comment_id FROM $wpdb->comments)");
}

// Clean expired transients
function clean_expired_transients() {
    global $wpdb;

    $time = time();
    $wpdb->query("DELETE FROM $wpdb->options WHERE option_name LIKE '_transient_timeout_%' AND option_value < $time");
    $wpdb->query("DELETE FROM $wpdb->options WHERE option_name LIKE '_transient_%' AND option_name NOT LIKE '_transient_timeout_%' AND option_name NOT IN (SELECT REPLACE(option_name, '_timeout', '') FROM $wpdb->options WHERE option_name LIKE '_transient_timeout_%')");
}

// Optimize database tables
function optimize_database_tables() {
    global $wpdb;

    // Get all tables
    $tables = $wpdb->get_results("SHOW TABLES", ARRAY_N);

    foreach ($tables as $table) {
        $wpdb->query("OPTIMIZE TABLE {$table[0]}");
    }
}

// Complete database optimization function
function complete_database_optimization() {
    // Run all cleanup functions
    clean_post_revisions();
    clean_auto_drafts();
    clean_trashed_posts();
    clean_spam_comments();
    clean_expired_transients();
    optimize_database_tables();

    // Log the optimization
    error_log('WordPress Database Optimized: ' . date('Y-m-d H:i:s'));
}

// Schedule weekly optimization
function schedule_database_optimization() {
    if (!wp_next_scheduled('weekly_database_optimization')) {
        wp_schedule_event(time(), 'weekly', 'weekly_database_optimization');
    }
}
add_action('wp', 'schedule_database_optimization');
add_action('weekly_database_optimization', 'complete_database_optimization');

// Limit post revisions (add to wp-config.php instead)
// define('WP_POST_REVISIONS', 3);

// Manually trigger optimization (use with caution)
// complete_database_optimization();`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '7 min',
    category: 'WordPress Advanced',
    tags: ['database', 'performance', 'optimization', 'maintenance', 'cleanup'],
    difficulty: 'advanced',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Optimize WordPress Database - Complete Cleanup Guide',
      metaDescription: 'Learn how to optimize your WordPress database by cleaning post revisions, transients, and spam. Improve site performance with database optimization.',
      keywords: ['wordpress database optimization', 'clean wordpress database', 'database cleanup', 'optimize wp tables', 'remove revisions'],
      canonical: 'https://shahmir.dev/snippets/database-optimization',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Optimize WordPress Database',
        description: 'Clean up and optimize your WordPress database for better performance by removing unnecessary data and optimizing tables.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Advanced'
      }
    },
    faqs: [
      {
        question: "How often should I optimize my WordPress database?",
        answer: "For most sites, monthly optimization is sufficient. High-traffic sites with frequent content updates may benefit from weekly optimization. The code example includes automated weekly scheduling."
      },
      {
        question: "Will database optimization delete important data?",
        answer: "The optimization removes only unnecessary data like post revisions, auto-drafts, spam comments, and expired transients. However, always backup before optimization in case you need to recover something."
      },
      {
        question: "Can database optimization break my site?",
        answer: "If done correctly, no. However, poorly written optimization queries or running without backups can cause issues. Always test on staging first and keep recent backups."
      },
      {
        question: "Should I use a plugin or custom code for database optimization?",
        answer: "Plugins like WP-Optimize are safer for beginners as they include safety checks and backup options. Custom code gives more control but requires careful testing. Choose based on your technical comfort level."
      },
      {
        question: "How much space can database optimization save?",
        answer: "Savings vary greatly depending on site age and activity. Sites with years of revisions can reduce database size by 30-50%. New sites may only save a few megabytes. Check your database size before and after to measure impact."
      }
    ]
  },
  {
    id: 92,
    slug: 'multisite-network-setup',
    title: 'Enable WordPress Multisite',
    excerpt: 'Set up a WordPress Multisite network to manage multiple sites from a single installation with shared themes and plugins.',
    content: `&lt;h2&gt;Why Use WordPress Multisite?&lt;/h2&gt;
&lt;p&gt;Multisite allows you to run multiple WordPress websites from one installation, sharing themes, plugins, and users. Perfect for managing company divisions, franchises, or educational institutions.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Backup your WordPress installation completely&lt;/li&gt;
  &lt;li&gt;Deactivate all plugins&lt;/li&gt;
  &lt;li&gt;Add multisite constants to wp-config.php&lt;/li&gt;
  &lt;li&gt;Run the network setup from WordPress admin&lt;/li&gt;
  &lt;li&gt;Update .htaccess and wp-config.php with provided code&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Multisite Types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subdomain:&lt;/strong&gt; site1.example.com, site2.example.com&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subdirectory:&lt;/strong&gt; example.com/site1, example.com/site2&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Domain Mapping:&lt;/strong&gt; Custom domains for each site&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Plan your network structure before enabling multisite&lt;/li&gt;
  &lt;li&gt;Use subdomain setup for better flexibility&lt;/li&gt;
  &lt;li&gt;Test multisite on staging before production&lt;/li&gt;
  &lt;li&gt;Configure wildcard DNS for subdomain networks&lt;/li&gt;
  &lt;li&gt;Consider dedicated hosting for large networks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;WordPress must be installed in the root directory (not a subdirectory). You need access to wp-config.php and .htaccess files. For subdomain setup, wildcard DNS must be configured (*.example.com points to your server).&lt;/p&gt;`,
    code: `/* Step 1: Add to wp-config.php (above "That's all, stop editing!") */

// Enable Multisite
define('WP_ALLOW_MULTISITE', true);

/* Step 2: After running Network Setup, add these to wp-config.php */

define('MULTISITE', true);
define('SUBDOMAIN_INSTALL', true); // Set to false for subdirectory install
define('DOMAIN_CURRENT_SITE', 'example.com');
define('PATH_CURRENT_SITE', '/');
define('SITE_ID_CURRENT_SITE', 1);
define('BLOG_ID_CURRENT_SITE', 1);

/* Step 3: Update .htaccess (for subdirectory installs) */

// RewriteEngine On
// RewriteBase /
// RewriteRule ^index\.php$ - [L]
//
// # add a trailing slash to /wp-admin
// RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]
//
// RewriteCond %{REQUEST_FILENAME} -f [OR]
// RewriteCond %{REQUEST_FILENAME} -d
// RewriteRule ^ - [L]
// RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]
// RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]
// RewriteRule . index.php [L]

/* Useful Multisite Functions */

// Get current site ID
function get_current_site_id() {
    return get_current_blog_id();
}

// Switch between sites programmatically
function do_something_on_another_site($site_id) {
    switch_to_blog($site_id);

    // Do your operations here
    $posts = get_posts();

    // Always restore to current site
    restore_current_blog();
}

// Network-wide plugin activation
function my_plugin_network_activate() {
    global $wpdb;

    $blog_ids = $wpdb->get_col("SELECT blog_id FROM $wpdb->blogs");

    foreach ($blog_ids as $blog_id) {
        switch_to_blog($blog_id);
        // Perform activation tasks
        restore_current_blog();
    }
}

// Check if current site is the main site
if (is_main_site()) {
    // Code for main site only
}

// Get all sites in network
function get_all_network_sites() {
    return get_sites(array(
        'number' => 1000,
        'orderby' => 'registered',
        'order' => 'DESC'
    ));
}

// Create new site programmatically
function create_new_subsite($domain, $path, $title, $user_id) {
    $site_id = wpmu_create_blog(
        $domain,
        $path,
        $title,
        $user_id,
        array('public' => 1)
    );

    return $site_id;
}`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '8 min',
    category: 'WordPress Advanced',
    tags: ['multisite', 'network', 'configuration', 'advanced', 'setup'],
    difficulty: 'advanced',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Enable WordPress Multisite - Complete Network Setup Guide',
      metaDescription: 'Learn how to enable and configure WordPress Multisite to manage multiple sites from one installation. Step-by-step setup instructions included.',
      keywords: ['wordpress multisite', 'wp network setup', 'multisite configuration', 'subdomain multisite', 'wordpress network'],
      canonical: 'https://shahmir.dev/snippets/multisite-network-setup',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Enable WordPress Multisite',
        description: 'Set up a WordPress Multisite network to manage multiple sites from a single installation with shared themes and plugins.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Advanced'
      }
    },
    faqs: [
      {
        question: "Can I convert an existing WordPress site to Multisite?",
        answer: "Yes, but it requires careful planning. Backup everything first, as the process is irreversible without restoring from backup. Your current site becomes the main site in the network. Test on staging first."
      },
      {
        question: "Should I use subdomain or subdirectory multisite?",
        answer: "Subdomain (site1.example.com) offers more flexibility and better isolation between sites. Subdirectory (example.com/site1) is simpler to set up but can cause plugin conflicts. Most networks use subdomains."
      },
      {
        question: "Can each site in the network have its own theme and plugins?",
        answer: "Themes and plugins are installed network-wide, but network admins can activate them per-site. Individual site admins can only activate what's been enabled for their site by the network admin."
      },
      {
        question: "What are the hosting requirements for WordPress Multisite?",
        answer: "You need more resources than single-site WordPress. Look for hosts with multisite support, wildcard SSL for subdomain networks, and sufficient PHP memory (256MB+). Some shared hosts don't allow multisite."
      },
      {
        question: "Can I use different domains for different sites in the network?",
        answer: "Yes, using domain mapping. Install a domain mapping plugin and configure custom domains for each site. You'll need to point each domain's DNS to your server and may need a wildcard SSL certificate."
      }
    ]
  },
  {
    id: 93,
    slug: 'custom-post-status',
    title: 'Register Custom Post Statuses',
    excerpt: 'Create custom post statuses beyond draft and published to build editorial workflows and content approval processes.',
    content: `&lt;h2&gt;Why Use Custom Post Statuses?&lt;/h2&gt;
&lt;p&gt;Custom post statuses enable editorial workflows by adding states like "Pending Review," "Approved," or "Scheduled." Great for content teams with approval processes or publications with multiple stages.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Register your custom status with register_post_status()&lt;/li&gt;
  &lt;li&gt;Add the status to the post editor dropdown&lt;/li&gt;
  &lt;li&gt;Display the status in admin columns&lt;/li&gt;
  &lt;li&gt;Set up notifications for status changes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Common Custom Statuses&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pending Review:&lt;/strong&gt; Awaiting editor approval&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Approved:&lt;/strong&gt; Approved but not published&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In Progress:&lt;/strong&gt; Currently being written&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scheduled:&lt;/strong&gt; Custom scheduling status&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Archived:&lt;/strong&gt; Published but archived&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep status names short and descriptive&lt;/li&gt;
  &lt;li&gt;Document your workflow for team members&lt;/li&gt;
  &lt;li&gt;Set appropriate capabilities for each status&lt;/li&gt;
  &lt;li&gt;Add email notifications for status changes&lt;/li&gt;
  &lt;li&gt;Show status counts in admin menu&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Workflow Integration&lt;/h2&gt;
&lt;p&gt;Custom post statuses integrate with user roles and capabilities. Use them to create approval workflows where authors submit, editors review, and publishers schedule content. Combine with custom notifications for complete editorial control.&lt;/p&gt;`,
    code: `// Register custom post status
function register_custom_post_statuses() {
    // Pending Review status
    register_post_status('pending_review', array(
        'label' => 'Pending Review',
        'public' => false,
        'exclude_from_search' => true,
        'show_in_admin_all_list' => true,
        'show_in_admin_status_list' => true,
        'label_count' => _n_noop(
            'Pending Review &lt;span class="count"&gt;(%s)&lt;/span&gt;',
            'Pending Review &lt;span class="count"&gt;(%s)&lt;/span&gt;'
        )
    ));

    // Approved status
    register_post_status('approved', array(
        'label' => 'Approved',
        'public' => false,
        'exclude_from_search' => true,
        'show_in_admin_all_list' => true,
        'show_in_admin_status_list' => true,
        'label_count' => _n_noop(
            'Approved &lt;span class="count"&gt;(%s)&lt;/span&gt;',
            'Approved &lt;span class="count"&gt;(%s)&lt;/span&gt;'
        )
    ));

    // In Progress status
    register_post_status('in_progress', array(
        'label' => 'In Progress',
        'public' => false,
        'exclude_from_search' => true,
        'show_in_admin_all_list' => true,
        'show_in_admin_status_list' => true,
        'label_count' => _n_noop(
            'In Progress &lt;span class="count"&gt;(%s)&lt;/span&gt;',
            'In Progress &lt;span class="count"&gt;(%s)&lt;/span&gt;'
        )
    ));
}
add_action('init', 'register_custom_post_statuses');

// Add custom statuses to post editor dropdown
function add_custom_statuses_to_dropdown() {
    global $post;

    if (!$post) return;

    $status = $post->post_status;
    $statuses = array(
        'pending_review' => 'Pending Review',
        'approved' => 'Approved',
        'in_progress' => 'In Progress'
    );

    echo '&lt;script&gt;
    jQuery(document).ready(function($) {
        ';

    foreach ($statuses as $value => $label) {
        echo '$("#post-status-select").append("&lt;option value=\'' . $value . '\' " + ';
        echo '("' . $status . '" === "' . $value . '" ? "selected" : "") + ';
        echo '"&gt;' . $label . '&lt;/option&gt;");';
    }

    echo '
    });
    &lt;/script&gt;';
}
add_action('admin_footer-post.php', 'add_custom_statuses_to_dropdown');
add_action('admin_footer-post-new.php', 'add_custom_statuses_to_dropdown');

// Display custom status in post listing
function display_custom_status_in_list($statuses) {
    global $post;

    $status_labels = array(
        'pending_review' => 'Pending Review',
        'approved' => 'Approved',
        'in_progress' => 'In Progress'
    );

    if (isset($status_labels[$post->post_status])) {
        return $status_labels[$post->post_status];
    }

    return $statuses;
}
add_filter('display_post_states', 'display_custom_status_in_list');

// Send notification when post status changes
function notify_on_status_change($new_status, $old_status, $post) {
    // Only send for custom statuses
    $custom_statuses = array('pending_review', 'approved', 'in_progress');

    if (!in_array($new_status, $custom_statuses)) {
        return;
    }

    // Get editors to notify
    $editors = get_users(array('role' => 'editor'));

    foreach ($editors as $editor) {
        $subject = 'Post Status Changed: ' . $post->post_title;
        $message = sprintf(
            'Post "%s" status changed from %s to %s.\n\nEdit post: %s',
            $post->post_title,
            $old_status,
            $new_status,
            admin_url('post.php?post=' . $post->ID . '&action=edit')
        );

        wp_mail($editor->user_email, $subject, $message);
    }
}
add_action('transition_post_status', 'notify_on_status_change', 10, 3);

// Add status count to admin menu
function add_status_count_to_menu() {
    global $menu, $wpdb;

    $count = $wpdb->get_var(
        "SELECT COUNT(*) FROM $wpdb->posts WHERE post_status = 'pending_review' AND post_type = 'post'"
    );

    if ($count > 0) {
        foreach ($menu as $key => $value) {
            if ($menu[$key][2] == 'edit.php') {
                $menu[$key][0] .= ' &lt;span class="update-plugins count-' . $count . '"&gt;&lt;span class="update-count"&gt;' . $count . '&lt;/span&gt;&lt;/span&gt;';
                break;
            }
        }
    }
}
add_action('admin_menu', 'add_status_count_to_menu');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '6 min',
    category: 'WordPress Advanced',
    tags: ['post-status', 'workflow', 'development', 'editorial', 'custom'],
    difficulty: 'advanced',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Register Custom Post Statuses in WordPress - Editorial Workflow',
      metaDescription: 'Learn how to create custom post statuses in WordPress for editorial workflows and content approval processes. Complete code examples included.',
      keywords: ['wordpress custom post status', 'register_post_status', 'editorial workflow', 'content approval', 'post workflow'],
      canonical: 'https://shahmir.dev/snippets/custom-post-status',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Register Custom Post Statuses',
        description: 'Create custom post statuses beyond draft and published to build editorial workflows and content approval processes.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Advanced'
      }
    },
    faqs: [
      {
        question: "How do custom post statuses differ from post categories?",
        answer: "Post statuses define the publication state of content (draft, published, etc.) while categories organize content by topic. Statuses affect visibility and are part of editorial workflow, not content organization."
      },
      {
        question: "Can I restrict who can use certain custom statuses?",
        answer: "Yes, by checking user capabilities in your code. For example, only allow editors to mark posts as 'approved'. Combine with user role checks like current_user_can('edit_others_posts') to enforce restrictions."
      },
      {
        question: "Will custom statuses appear in WordPress REST API?",
        answer: "Custom statuses with 'show_in_rest' => true will appear in the REST API. Set this when registering the status if you need Block Editor or Gutenberg support."
      },
      {
        question: "Can I have different custom statuses for different post types?",
        answer: "Yes, check the post type in your status registration or admin hooks. Use get_post_type() to conditionally show statuses only for specific post types like 'post', 'page', or custom types."
      },
      {
        question: "How do I query posts with custom statuses?",
        answer: "Use WP_Query with the 'post_status' parameter: new WP_Query(array('post_status' => 'pending_review')). Multiple statuses: array('post_status' => array('approved', 'pending_review'))."
      }
    ]
  },
  {
    id: 94,
    slug: 'white-label-wordpress',
    title: 'White Label WordPress Admin',
    excerpt: 'Rebrand the WordPress admin area by replacing WordPress branding with your own for client sites and custom installations.',
    content: `&lt;h2&gt;Why White Label WordPress?&lt;/h2&gt;
&lt;p&gt;White labeling removes WordPress branding from the admin area, replacing it with your agency or client's brand. Creates a professional, custom experience and reinforces your brand identity.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Change the login logo and URL&lt;/li&gt;
  &lt;li&gt;Customize admin footer text&lt;/li&gt;
  &lt;li&gt;Replace dashboard widgets&lt;/li&gt;
  &lt;li&gt;Modify the admin bar&lt;/li&gt;
  &lt;li&gt;Customize email templates&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Elements to White Label&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Login page logo and styling&lt;/li&gt;
  &lt;li&gt;Admin footer credits&lt;/li&gt;
  &lt;li&gt;Dashboard welcome panel&lt;/li&gt;
  &lt;li&gt;Admin bar WordPress logo&lt;/li&gt;
  &lt;li&gt;Email from name and address&lt;/li&gt;
  &lt;li&gt;Admin color scheme&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Maintain WordPress credits somewhere (license requirement)&lt;/li&gt;
  &lt;li&gt;Keep branding consistent across all elements&lt;/li&gt;
  &lt;li&gt;Test with different user roles&lt;/li&gt;
  &lt;li&gt;Provide custom documentation with your branding&lt;/li&gt;
  &lt;li&gt;Consider using a white label plugin for easier management&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Legal Considerations&lt;/h2&gt;
&lt;p&gt;WordPress is GPL licensed. You can modify and rebrand it, but cannot remove copyright notices from code or claim WordPress as your own product. Keep license files intact and acknowledge WordPress somewhere in your documentation.&lt;/p&gt;`,
    code: `// Change login logo
function custom_login_logo() {
    echo '&lt;style type="text/css"&gt;
        #login h1 a {
            background-image: url(' . get_stylesheet_directory_uri() . '/images/custom-logo.png);
            background-size: contain;
            width: 320px;
            height: 80px;
        }
        body.login {
            background: #f0f0f0;
        }
        .login form {
            border: 1px solid #ddd;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
    &lt;/style&gt;';
}
add_action('login_enqueue_scripts', 'custom_login_logo');

// Change login logo URL and title
function custom_login_url() {
    return home_url();
}
add_filter('login_headerurl', 'custom_login_url');

function custom_login_title() {
    return get_bloginfo('name');
}
add_filter('login_headertext', 'custom_login_title');

// Customize admin footer
function custom_admin_footer() {
    echo 'Powered by &lt;a href="https://youragency.com"&gt;Your Agency&lt;/a&gt; | Built with WordPress';
}
add_filter('admin_footer_text', 'custom_admin_footer');

// Change admin footer version
function remove_footer_version() {
    return 'Version 1.0';
}
add_filter('update_footer', 'remove_footer_version', 11);

// Remove WordPress logo from admin bar
function remove_wp_logo($wp_admin_bar) {
    $wp_admin_bar->remove_node('wp-logo');
}
add_action('admin_bar_menu', 'remove_wp_logo', 999);

// Add custom admin bar menu
function add_custom_admin_bar_logo($wp_admin_bar) {
    $args = array(
        'id' => 'custom_logo',
        'title' => '&lt;span class="ab-icon"&gt;&lt;img src="' . get_stylesheet_directory_uri() . '/images/admin-icon.png" style="height: 20px; margin-top: 6px;"&gt;&lt;/span&gt;',
        'href' => 'https://youragency.com',
        'meta' => array(
            'target' => '_blank',
            'title' => 'Your Agency'
        )
    );
    $wp_admin_bar->add_node($args);
}
add_action('admin_bar_menu', 'add_custom_admin_bar_logo', 1);

// Remove default dashboard widgets
function remove_dashboard_widgets() {
    remove_meta_box('dashboard_primary', 'dashboard', 'side');
    remove_meta_box('dashboard_quick_press', 'dashboard', 'side');
    remove_meta_box('dashboard_activity', 'dashboard', 'normal');
}
add_action('wp_dashboard_setup', 'remove_dashboard_widgets');

// Add custom dashboard widget
function add_custom_dashboard_widget() {
    wp_add_dashboard_widget(
        'custom_dashboard_widget',
        'Welcome to Your Site',
        'custom_dashboard_content'
    );
}
add_action('wp_dashboard_setup', 'add_custom_dashboard_widget');

function custom_dashboard_content() {
    echo '&lt;div style="text-align: center;"&gt;';
    echo '&lt;img src="' . get_stylesheet_directory_uri() . '/images/dashboard-logo.png" style="max-width: 200px; margin: 20px 0;"&gt;';
    echo '&lt;h3&gt;Welcome to Your Website Dashboard&lt;/h3&gt;';
    echo '&lt;p&gt;Need help? &lt;a href="https://youragency.com/support"&gt;Contact Support&lt;/a&gt;&lt;/p&gt;';
    echo '&lt;/div&gt;';
}

// Change email from name and address
function custom_email_from_name($name) {
    return 'Your Company Name';
}
add_filter('wp_mail_from_name', 'custom_email_from_name');

function custom_email_from_address($email) {
    return 'noreply@yourdomain.com';
}
add_filter('wp_mail_from', 'custom_email_from_address');

// Remove WordPress version from various places
remove_action('wp_head', 'wp_generator');
add_filter('the_generator', '__return_empty_string');

// Custom admin CSS
function custom_admin_css() {
    echo '&lt;style&gt;
        #wpadminbar .ab-icon:before {
            content: "" !important;
        }
        #wp-admin-bar-wp-logo {
            display: none;
        }
    &lt;/style&gt;';
}
add_action('admin_head', 'custom_admin_css');
add_action('wp_head', 'custom_admin_css');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '6 min',
    category: 'WordPress Advanced',
    tags: ['branding', 'admin', 'client-sites', 'white-label', 'customization'],
    difficulty: 'intermediate',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'White Label WordPress Admin - Complete Rebranding Guide',
      metaDescription: 'Learn how to white label WordPress by replacing default branding with your own. Perfect for agencies and custom client installations.',
      keywords: ['white label wordpress', 'rebrand wordpress', 'custom wordpress admin', 'wordpress branding', 'agency wordpress'],
      canonical: 'https://shahmir.dev/snippets/white-label-wordpress',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'White Label WordPress Admin',
        description: 'Rebrand the WordPress admin area by replacing WordPress branding with your own for client sites and custom installations.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Intermediate'
      }
    },
    faqs: [
      {
        question: "Is it legal to remove WordPress branding?",
        answer: "Yes, WordPress is GPL licensed which allows modification and rebranding. However, you must keep license files in the code and cannot claim WordPress itself as your product. Acknowledging WordPress somewhere is good practice."
      },
      {
        question: "Will white labeling affect WordPress updates?",
        answer: "No, white labeling only changes the appearance and branding. WordPress core updates, plugin updates, and all functionality continue to work normally."
      },
      {
        question: "Should I use a plugin or custom code for white labeling?",
        answer: "Plugins like White Label CMS or Ultimate Branding are easier for non-developers and offer more options. Custom code gives you complete control and doesn't add plugin overhead. Choose based on your needs and technical skill."
      },
      {
        question: "Can I white label the WordPress REST API responses?",
        answer: "Yes, you can filter REST API responses to remove or change WordPress identifiers. Use rest_prepare_{post_type} filters to modify output. However, this may break clients that expect standard WordPress responses."
      },
      {
        question: "How do I white label WordPress emails?",
        answer: "Change the from name and email using wp_mail_from and wp_mail_from_name filters. For complete email customization, consider email template plugins or custom email functions with your branding."
      }
    ]
  },
  {
    id: 95,
    slug: 'custom-email-sender',
    title: 'Change WordPress Email From Address',
    excerpt: 'Customize the sender name and email address for all WordPress system emails to match your brand.',
    content: `&lt;h2&gt;Why Change Email From Address?&lt;/h2&gt;
&lt;p&gt;By default, WordPress sends emails from "wordpress@yourdomain.com" which often gets flagged as spam. Changing to a professional address like "noreply@yourdomain.com" with your company name improves deliverability and brand recognition.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Set up a valid email address on your domain&lt;/li&gt;
  &lt;li&gt;Add the filter code to functions.php&lt;/li&gt;
  &lt;li&gt;Test email delivery&lt;/li&gt;
  &lt;li&gt;Check spam folder if emails don't arrive&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Email Types Affected&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;New user registration emails&lt;/li&gt;
  &lt;li&gt;Password reset emails&lt;/li&gt;
  &lt;li&gt;Comment notification emails&lt;/li&gt;
  &lt;li&gt;Admin notification emails&lt;/li&gt;
  &lt;li&gt;Plugin and form emails (most)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use a real, monitored email address&lt;/li&gt;
  &lt;li&gt;Configure SPF and DKIM records for better deliverability&lt;/li&gt;
  &lt;li&gt;Consider using an SMTP plugin for improved reliability&lt;/li&gt;
  &lt;li&gt;Test emails after changing settings&lt;/li&gt;
  &lt;li&gt;Use a professional sender name (not "Admin" or "WordPress")&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Improving Deliverability&lt;/h2&gt;
&lt;p&gt;For better email delivery, use an SMTP service like SendGrid, Mailgun, or Amazon SES instead of PHP mail(). Configure SPF, DKIM, and DMARC records. Use a transactional email service for important messages.&lt;/p&gt;`,
    code: `// Change email from address
function custom_email_from_address($email) {
    return 'noreply@yourdomain.com'; // Replace with your email
}
add_filter('wp_mail_from', 'custom_email_from_address');

// Change email from name
function custom_email_from_name($name) {
    return 'Your Company Name'; // Replace with your name
}
add_filter('wp_mail_from_name', 'custom_email_from_name');

// Alternative: Use site name as from name
function site_name_email_from($name) {
    return get_bloginfo('name');
}
add_filter('wp_mail_from_name', 'site_name_email_from');

// Different sender for different email types
function conditional_email_from($email) {
    // Get the current email being sent
    $backtrace = debug_backtrace();

    // Check if it's a password reset email
    if (isset($backtrace[4]['function']) && $backtrace[4]['function'] == 'retrieve_password') {
        return 'support@yourdomain.com';
    }

    // Check if it's a new user email
    if (isset($backtrace[4]['function']) && $backtrace[4]['function'] == 'wp_new_user_notification') {
        return 'welcome@yourdomain.com';
    }

    // Default
    return 'noreply@yourdomain.com';
}
add_filter('wp_mail_from', 'conditional_email_from');

// Customize email content type (HTML emails)
function set_html_email_content_type() {
    return 'text/html';
}
add_filter('wp_mail_content_type', 'set_html_email_content_type');

// Reset content type after sending (important!)
function reset_email_content_type() {
    remove_filter('wp_mail_content_type', 'set_html_email_content_type');
}
add_action('wp_mail_succeeded', 'reset_email_content_type');
add_action('wp_mail_failed', 'reset_email_content_type');

// Custom email headers for better deliverability
function custom_email_headers($headers) {
    $headers[] = 'Reply-To: support@yourdomain.com';
    $headers[] = 'X-Mailer: WordPress/' . get_bloginfo('version');
    return $headers;
}
add_filter('wp_mail_headers', 'custom_email_headers');

// Test email function (call manually)
function test_custom_email() {
    $to = 'your-email@example.com';
    $subject = 'Test Email from WordPress';
    $message = 'This is a test email to verify custom email settings.';

    $sent = wp_mail($to, $subject, $message);

    if ($sent) {
        echo 'Email sent successfully!';
    } else {
        echo 'Email failed to send.';
    }
}
// Uncomment to test: add_action('init', 'test_custom_email');

// Log email sending for debugging
function log_email_sending($result) {
    error_log('Email sent: ' . ($result ? 'Success' : 'Failed'));
    return $result;
}
add_filter('wp_mail', 'log_email_sending');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '4 min',
    category: 'WordPress Advanced',
    tags: ['email', 'smtp', 'configuration', 'deliverability', 'branding'],
    difficulty: 'beginner',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Change WordPress Email From Address - Complete Guide',
      metaDescription: 'Learn how to customize WordPress email sender name and address for better deliverability and professional branding.',
      keywords: ['wordpress email from', 'wp_mail_from', 'change email sender', 'wordpress smtp', 'email deliverability'],
      canonical: 'https://shahmir.dev/snippets/custom-email-sender',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Change WordPress Email From Address',
        description: 'Customize the sender name and email address for all WordPress system emails to match your brand.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Beginner'
      }
    },
    faqs: [
      {
        question: "Why are my WordPress emails going to spam?",
        answer: "Common reasons include: using a fake from address, missing SPF/DKIM records, shared hosting with poor reputation, or using PHP mail() instead of SMTP. Configure proper DNS records and consider using an SMTP service."
      },
      {
        question: "Should I use a real email address or noreply@?",
        answer: "Use a real, monitored address for important transactional emails (password resets, purchases). For notifications users shouldn't reply to, noreply@ is acceptable but may hurt deliverability slightly. best practice: use a real address that forwards to your support team."
      },
      {
        question: "Do I need an SMTP plugin to change the from address?",
        answer: "No, the filters above work without plugins. However, SMTP plugins improve reliability significantly. They use authenticated SMTP servers instead of PHP mail(), which often gets blocked or flagged as spam."
      },
      {
        question: "Will this affect plugin emails like WooCommerce or Contact Form 7?",
        answer: "Most plugins respect the wp_mail_from filter, so yes. However, some plugins have their own email settings that override these filters. Check each plugin's email configuration."
      },
      {
        question: "How do I test if my email settings are working?",
        answer: "Use the test_custom_email() function provided in the code, or send a test password reset email to yourself. Check your spam folder if emails don't arrive in 5-10 minutes."
      }
    ]
  },
  {
    id: 96,
    slug: 'add-maintenance-mode',
    title: 'Enable Maintenance Mode',
    excerpt: 'Display a custom maintenance page to visitors while you update your site, with options for admin bypass.',
    content: `&lt;h2&gt;Why Use Maintenance Mode?&lt;/h2&gt;
&lt;p&gt;Maintenance mode shows a temporary "coming soon" or "under maintenance" page to visitors while you perform updates, redesigns, or troubleshooting. Admins can still access the site normally.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create a maintenance page template&lt;/li&gt;
  &lt;li&gt;Add the maintenance mode code to functions.php&lt;/li&gt;
  &lt;li&gt;Test that admins can bypass maintenance mode&lt;/li&gt;
  &lt;li&gt;Disable when work is complete&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Maintenance Page Elements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Clear message about the situation&lt;/li&gt;
  &lt;li&gt;Estimated return time (if known)&lt;/li&gt;
  &lt;li&gt;Company logo and branding&lt;/li&gt;
  &lt;li&gt;Contact information for urgent matters&lt;/li&gt;
  &lt;li&gt;Social media links&lt;/li&gt;
  &lt;li&gt;Countdown timer (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Return 503 status code (Service Temporarily Unavailable)&lt;/li&gt;
  &lt;li&gt;Include Retry-After header for search engines&lt;/li&gt;
  &lt;li&gt;Allow admins to bypass maintenance mode&lt;/li&gt;
  &lt;li&gt;Keep the page simple and fast-loading&lt;/li&gt;
  &lt;li&gt;Test before activating on live site&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;SEO Considerations&lt;/h2&gt;
&lt;p&gt;The 503 status code tells search engines this is temporary. Don't use maintenance mode for extended periods (weeks) as it may affect rankings. For longer outages, consider showing limited content or use a staging site for major work.&lt;/p&gt;`,
    code: `// Enable maintenance mode
function enable_maintenance_mode() {
    // Allow admins to bypass
    if (current_user_can('manage_options') || is_admin()) {
        return;
    }

    // Allow access to login page
    if (stristr($_SERVER['REQUEST_URI'], 'wp-login.php')) {
        return;
    }

    // Set proper HTTP status
    header('HTTP/1.1 503 Service Temporarily Unavailable');
    header('Status: 503 Service Temporarily Unavailable');
    header('Retry-After: 3600'); // 1 hour

    // Display maintenance page
    wp_die(get_maintenance_page(), 'Maintenance Mode', array('response' => 503));
}
add_action('get_header', 'enable_maintenance_mode');

// Custom maintenance page HTML
function get_maintenance_page() {
    $html = '
    &lt;!DOCTYPE html&gt;
    &lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
        &lt;title&gt;Site Under Maintenance&lt;/title&gt;
        &lt;style&gt;
            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }
            .container {
                text-align: center;
                padding: 40px;
                max-width: 600px;
            }
            h1 {
                font-size: 48px;
                margin-bottom: 20px;
            }
            p {
                font-size: 18px;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .icon {
                font-size: 80px;
                margin-bottom: 20px;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class="container"&gt;
            &lt;div class="icon"&gt;🔧&lt;/div&gt;
            &lt;h1&gt;Under Maintenance&lt;/h1&gt;
            &lt;p&gt;We\'re currently performing scheduled maintenance to improve your experience.&lt;/p&gt;
            &lt;p&gt;We\'ll be back shortly. Thank you for your patience!&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    ';

    return $html;
}

// Alternative: Load maintenance page from template file
function load_maintenance_template() {
    if (current_user_can('manage_options') || is_admin()) {
        return;
    }

    if (stristr($_SERVER['REQUEST_URI'], 'wp-login.php')) {
        return;
    }

    $template_file = get_stylesheet_directory() . '/maintenance.php';

    if (file_exists($template_file)) {
        header('HTTP/1.1 503 Service Temporarily Unavailable');
        include($template_file);
        exit();
    }
}
// add_action('get_header', 'load_maintenance_template');

// Maintenance mode with countdown timer
function maintenance_with_countdown() {
    $end_time = strtotime('2024-12-31 00:00:00'); // Set your end time
    $current_time = time();

    if ($current_time >= $end_time || current_user_can('manage_options') || is_admin()) {
        return;
    }

    $html = '
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Coming Soon&lt;/title&gt;
        &lt;style&gt;
            body {
                font-family: Arial, sans-serif;
                text-align: center;
                padding: 50px;
                background: #2c3e50;
                color: white;
            }
            #countdown {
                font-size: 48px;
                margin: 30px 0;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Coming Soon!&lt;/h1&gt;
        &lt;div id="countdown"&gt;&lt;/div&gt;
        &lt;script&gt;
            var endTime = ' . $end_time . ' * 1000;
            var countdown = setInterval(function() {
                var now = new Date().getTime();
                var distance = endTime - now;

                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                document.getElementById("countdown").innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s";

                if (distance < 0) {
                    clearInterval(countdown);
                    location.reload();
                }
            }, 1000);
        &lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    ';

    header('HTTP/1.1 503 Service Temporarily Unavailable');
    die($html);
}
// add_action('get_header', 'maintenance_with_countdown');

// Easy toggle via option
function toggle_maintenance_mode() {
    // Set to '1' to enable, '0' to disable
    update_option('site_maintenance_mode', '0');
}

function check_maintenance_option() {
    if (get_option('site_maintenance_mode') == '1') {
        enable_maintenance_mode();
    }
}
add_action('get_header', 'check_maintenance_option');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '5 min',
    category: 'WordPress Advanced',
    tags: ['maintenance', 'coming-soon', 'development', 'downtime', 'updates'],
    difficulty: 'intermediate',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Enable WordPress Maintenance Mode - Custom Coming Soon Page',
      metaDescription: 'Learn how to enable maintenance mode in WordPress with a custom page, admin bypass, and proper HTTP status codes for SEO.',
      keywords: ['wordpress maintenance mode', 'coming soon page', 'under maintenance', 'wp maintenance', 'site downtime'],
      canonical: 'https://shahmir.dev/snippets/add-maintenance-mode',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Enable Maintenance Mode',
        description: 'Display a custom maintenance page to visitors while you update your site, with options for admin bypass.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Intermediate'
      }
    },
    faqs: [
      {
        question: "What's the difference between 503 and 404 status codes?",
        answer: "503 (Service Temporarily Unavailable) tells search engines this is temporary and to check back later. 404 (Not Found) indicates the page is gone permanently, which can hurt SEO. Always use 503 for maintenance mode."
      },
      {
        question: "How do I access wp-admin during maintenance mode?",
        answer: "The code examples include checks to bypass maintenance for logged-in admins and wp-login.php access. Navigate directly to /wp-admin and log in as usual."
      },
      {
        question: "Can I whitelist specific IP addresses?",
        answer: "Yes, add an IP check before displaying maintenance: if (in_array($_SERVER['REMOTE_ADDR'], array('your-ip', 'another-ip'))) { return; }. This allows testing from specific locations."
      },
      {
        question: "Will maintenance mode affect my SEO?",
        answer: "Short-term maintenance (hours to a few days) with proper 503 status won't harm SEO. Extended maintenance (weeks) may cause issues. Google understands temporary maintenance when properly configured."
      },
      {
        question: "Should I use a plugin or custom code for maintenance mode?",
        answer: `Plugins like WP Maintenance Mode offer more features (email collection, social feeds, etc.). Custom code is lighter and gives you full control. For simple maintenance, custom code is sufficient. For marketing/"coming soon" pages, plugins offer more.`
      }
    ]
  },
  {
    id: 97,
    slug: 'custom-upload-mime-types',
    title: 'Allow Custom File Upload Types',
    excerpt: 'Enable uploading of additional file types beyond WordPress defaults like SVG, WebP, JSON, or custom document formats.',
    content: `&lt;h2&gt;Why Allow Custom MIME Types?&lt;/h2&gt;
&lt;p&gt;WordPress restricts file uploads to common formats for security. However, you may need to upload SVG files, WebP images, font files, or other specialized formats that are blocked by default.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Identify the MIME type of the file format you need&lt;/li&gt;
  &lt;li&gt;Add the upload_mimes filter to functions.php&lt;/li&gt;
  &lt;li&gt;Test file uploads in the media library&lt;/li&gt;
  &lt;li&gt;Consider security implications of each file type&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Common File Types to Enable&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SVG:&lt;/strong&gt; Scalable vector graphics (image/svg+xml)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WebP:&lt;/strong&gt; Modern image format (image/webp)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JSON:&lt;/strong&gt; Data files (application/json)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WEBM:&lt;/strong&gt; Video format (video/webm)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fonts:&lt;/strong&gt; WOFF, WOFF2, TTF files&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Only enable file types you actually need&lt;/li&gt;
  &lt;li&gt;Be cautious with executable file types&lt;/li&gt;
  &lt;li&gt;Sanitize SVG files to prevent XSS attacks&lt;/li&gt;
  &lt;li&gt;Consider user role restrictions for sensitive formats&lt;/li&gt;
  &lt;li&gt;Document which file types are allowed and why&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Security Warnings&lt;/h2&gt;
&lt;p&gt;SVG files can contain JavaScript and pose XSS risks. Only allow SVG uploads for trusted users (admins). Never enable .php, .exe, .sh or other executable file types. Use plugins like Safe SVG for additional security when allowing SVG uploads.&lt;/p&gt;`,
    code: `// Enable common custom file types
function enable_custom_mime_types($mimes) {
    // Images
    $mimes['svg'] = 'image/svg+xml';
    $mimes['svgz'] = 'image/svg+xml';
    $mimes['webp'] = 'image/webp';
    $mimes['ico'] = 'image/x-icon';

    // Video
    $mimes['webm'] = 'video/webm';

    // Audio
    $mimes['ogg'] = 'audio/ogg';
    $mimes['flac'] = 'audio/flac';

    // Documents
    $mimes['json'] = 'application/json';
    $mimes['jsonld'] = 'application/ld+json';
    $mimes['epub'] = 'application/epub+zip';

    // Fonts
    $mimes['woff'] = 'font/woff';
    $mimes['woff2'] = 'font/woff2';
    $mimes['ttf'] = 'font/ttf';
    $mimes['otf'] = 'font/otf';
    $mimes['eot'] = 'application/vnd.ms-fontobject';

    // Archives
    $mimes['rar'] = 'application/x-rar-compressed';
    $mimes['7z'] = 'application/x-7z-compressed';

    return $mimes;
}
add_filter('upload_mimes', 'enable_custom_mime_types');

// Enable SVG support with security check
function enable_svg_upload($mimes) {
    $mimes['svg'] = 'image/svg+xml';
    return $mimes;
}
add_filter('upload_mimes', 'enable_svg_upload');

// Fix SVG thumbnail display
function fix_svg_display($response, $attachment, $meta) {
    if ($response['mime'] == 'image/svg+xml' && empty($response['sizes'])) {
        $svg_path = get_attached_file($attachment->ID);

        if (file_exists($svg_path)) {
            $dimensions = @getimagesize($svg_path);
            if ($dimensions) {
                $response['sizes'] = array(
                    'full' => array(
                        'url' => $response['url'],
                        'width' => $dimensions[0],
                        'height' => $dimensions[1],
                        'orientation' => $dimensions[0] > $dimensions[1] ? 'landscape' : 'portrait'
                    )
                );
            }
        }
    }

    return $response;
}
add_filter('wp_prepare_attachment_for_js', 'fix_svg_display', 10, 3);

// Sanitize SVG files on upload (basic sanitization)
function sanitize_svg_upload($file) {
    if ($file['type'] === 'image/svg+xml') {
        $svg_content = file_get_contents($file['tmp_name']);

        // Remove potentially dangerous tags
        $dangerous_tags = array('script', 'iframe', 'object', 'embed', 'link');

        foreach ($dangerous_tags as $tag) {
            $svg_content = preg_replace('/<' . $tag . '[^>]*>.*?<\/' . $tag . '>/is', '', $svg_content);
            $svg_content = preg_replace('/<' . $tag . '[^>]*\/>/is', '', $svg_content);
        }

        // Remove event handlers
        $svg_content = preg_replace('/\s*on\w+\s*=\s*["\'][^"\']*["\']/i', '', $svg_content);

        // Write sanitized content back
        file_put_contents($file['tmp_name'], $svg_content);
    }

    return $file;
}
add_filter('wp_handle_upload_prefilter', 'sanitize_svg_upload');

// Restrict custom MIME types to admins only
function restrict_custom_mimes_to_admin($mimes) {
    // Only allow SVG for administrators
    if (current_user_can('manage_options')) {
        $mimes['svg'] = 'image/svg+xml';
        $mimes['json'] = 'application/json';
    }

    return $mimes;
}
add_filter('upload_mimes', 'restrict_custom_mimes_to_admin');

// Check actual file type (more secure)
function validate_file_type($file) {
    $filetype = wp_check_filetype_and_ext(
        $file['tmp_name'],
        $file['name']
    );

    // Log mismatches for security monitoring
    if ($filetype['ext'] != $filetype['type']) {
        error_log('File type mismatch: ' . $file['name']);
    }

    return $file;
}
add_filter('wp_handle_upload_prefilter', 'validate_file_type');

// Increase upload size limit for specific file types
function increase_upload_size_for_videos($size) {
    // 256 MB for video files
    return 256 * 1024 * 1024;
}
add_filter('upload_size_limit', 'increase_upload_size_for_videos');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '6 min',
    category: 'WordPress Advanced',
    tags: ['media', 'uploads', 'mime-types', 'security', 'files'],
    difficulty: 'intermediate',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Allow Custom File Upload Types in WordPress - MIME Types Guide',
      metaDescription: 'Learn how to enable SVG, WebP, JSON, and other custom file types in WordPress uploads safely with proper security measures.',
      keywords: ['wordpress mime types', 'enable svg upload', 'upload_mimes filter', 'custom file types', 'wordpress media'],
      canonical: 'https://shahmir.dev/snippets/custom-upload-mime-types',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Allow Custom File Upload Types',
        description: 'Enable uploading of additional file types beyond WordPress defaults like SVG, WebP, JSON, or custom document formats.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Intermediate'
      }
    },
    faqs: [
      {
        question: "Is it safe to enable SVG uploads in WordPress?",
        answer: "SVG files can contain JavaScript, posing XSS risks. Only enable for trusted users (admins). Use the sanitization code provided or plugins like Safe SVG that strip dangerous code while preserving the image."
      },
      {
        question: "Why can't I upload WebP images by default?",
        answer: "WordPress added WebP support in version 5.8+, but older installations may not have it enabled. The code above explicitly enables WebP support for all WordPress versions."
      },
      {
        question: "Will enabling custom MIME types affect site security?",
        answer: "It depends on what you enable. Image formats (SVG, WebP) need sanitization. Never enable executable files (.php, .exe, .sh). Only add formats you need and restrict to trusted users when appropriate."
      },
      {
        question: "How do I find the MIME type for a specific file format?",
        answer: "Upload the file to a test site or use online MIME type databases. On Linux/Mac, use 'file --mime-type filename'. Common formats are listed at iana.org/assignments/media-types."
      },
      {
        question: "Can I restrict custom file types to specific user roles?",
        answer: "Yes! Use current_user_can() checks within the upload_mimes filter. The code example shows how to allow SVG only for administrators. This prevents less trusted users from uploading potentially dangerous files."
      }
    ]
  },
  {
    id: 98,
    slug: 'debug-mode-logging',
    title: 'Enable Debug Mode and Logging',
    excerpt: 'Enable WordPress debug mode to troubleshoot errors, log issues, and develop plugins and themes more effectively.',
    content: `&lt;h2&gt;Why Enable Debug Mode?&lt;/h2&gt;
&lt;p&gt;Debug mode reveals PHP errors, notices, and warnings that WordPress normally hides. Essential for development, troubleshooting plugin conflicts, and identifying issues before they affect users.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Access your wp-config.php file via FTP or hosting panel&lt;/li&gt;
  &lt;li&gt;Add debug constants before "That's all, stop editing!"&lt;/li&gt;
  &lt;li&gt;Check debug.log file in wp-content directory&lt;/li&gt;
  &lt;li&gt;Disable debug mode on production sites&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Debug Mode Options&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WP_DEBUG:&lt;/strong&gt; Enable error reporting&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WP_DEBUG_LOG:&lt;/strong&gt; Log errors to debug.log&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WP_DEBUG_DISPLAY:&lt;/strong&gt; Show errors on screen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SCRIPT_DEBUG:&lt;/strong&gt; Use unminified JS/CSS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SAVEQUERIES:&lt;/strong&gt; Log database queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Never enable WP_DEBUG_DISPLAY on production sites&lt;/li&gt;
  &lt;li&gt;Use WP_DEBUG_LOG to save errors without displaying them&lt;/li&gt;
  &lt;li&gt;Regularly check and clear debug.log file&lt;/li&gt;
  &lt;li&gt;Enable debug mode on staging/development environments&lt;/li&gt;
  &lt;li&gt;Use error_log() function for custom debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Security Considerations&lt;/h2&gt;
&lt;p&gt;Displaying errors publicly exposes sensitive information about your site structure, plugins, and potential vulnerabilities. Always disable WP_DEBUG_DISPLAY on live sites. Use WP_DEBUG_LOG instead to log errors privately.&lt;/p&gt;`,
    code: `/* Add these constants to wp-config.php */

// Enable WP_DEBUG mode (shows all PHP errors, notices, warnings)
define('WP_DEBUG', true);

// Enable debug logging to /wp-content/debug.log
define('WP_DEBUG_LOG', true);

// Disable display of errors on the website (important for production!)
define('WP_DEBUG_DISPLAY', false);
@ini_set('display_errors', 0);

// Use development versions of core JS and CSS files
define('SCRIPT_DEBUG', true);

// Save database queries for analysis
define('SAVEQUERIES', true);

/* Production-Safe Debug Mode */
// Only log errors, don't display them
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
define('WP_DEBUG_DISPLAY', false);
@ini_set('display_errors', 0);

/* Custom Error Logging Functions */

// Log custom messages to debug.log
function custom_debug_log($message) {
    if (WP_DEBUG === true) {
        if (is_array($message) || is_object($message)) {
            error_log(print_r($message, true));
        } else {
            error_log($message);
        }
    }
}

// Usage: custom_debug_log('My debug message');
// Usage: custom_debug_log($array_or_object);

// Log with context
function contextual_debug_log($message, $context = '') {
    if (WP_DEBUG === true) {
        $log_message = $context ? "[$context] " : '';
        $log_message .= is_array($message) ? print_r($message, true) : $message;
        error_log($log_message);
    }
}

// Usage: contextual_debug_log($data, 'My Plugin');

// Display database queries (for development only!)
function display_database_queries() {
    if (!defined('SAVEQUERIES') || !SAVEQUERIES) {
        return;
    }

    global $wpdb;
    echo '&lt;pre&gt;';
    echo 'Total Queries: ' . count($wpdb->queries) . "\n";
    echo 'Total Time: ' . array_sum(array_column($wpdb->queries, 1)) . " seconds\n\n";

    foreach ($wpdb->queries as $query) {
        echo $query[0] . ' - ' . $query[1] . "s\n";
    }
    echo '&lt;/pre&gt;';
}
// Add to footer for testing: add_action('wp_footer', 'display_database_queries');

// Log slow queries
function log_slow_queries() {
    global $wpdb;

    if (!defined('SAVEQUERIES') || !SAVEQUERIES) {
        return;
    }

    foreach ($wpdb->queries as $query) {
        // Log queries slower than 0.05 seconds
        if ($query[1] > 0.05) {
            error_log('Slow Query (' . $query[1] . 's): ' . $query[0]);
        }
    }
}
add_action('shutdown', 'log_slow_queries');

// Log memory usage
function log_memory_usage() {
    if (WP_DEBUG) {
        error_log('Memory Usage: ' . round(memory_get_peak_usage() / 1024 / 1024, 2) . ' MB');
    }
}
add_action('shutdown', 'log_memory_usage');

// Conditional debug mode (enable for specific users)
function conditional_debug_mode() {
    $debug_users = array('admin', 'developer'); // Replace with actual usernames
    $current_user = wp_get_current_user();

    if (in_array($current_user->user_login, $debug_users)) {
        define('WP_DEBUG', true);
        define('WP_DEBUG_DISPLAY', true);
        @ini_set('display_errors', 1);
    }
}
// add_action('init', 'conditional_debug_mode');

// Log to custom file
function log_to_custom_file($message, $file = 'custom-log.txt') {
    $log_file = WP_CONTENT_DIR . '/' . $file;
    $timestamp = date('Y-m-d H:i:s');
    $log_message = "[$timestamp] " . $message . "\n";
    file_put_contents($log_file, $log_message, FILE_APPEND);
}

// Monitor plugin and theme errors
function monitor_errors() {
    set_error_handler(function($errno, $errstr, $errfile, $errline) {
        error_log("Error [$errno]: $errstr in $errfile on line $errline");
        return false; // Let WordPress handle it too
    });
}
// add_action('plugins_loaded', 'monitor_errors');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '5 min',
    category: 'WordPress Advanced',
    tags: ['debug', 'development', 'troubleshooting', 'logging', 'errors'],
    difficulty: 'intermediate',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Enable WordPress Debug Mode and Logging - Developer Guide',
      metaDescription: 'Learn how to enable WordPress debug mode safely for development and troubleshooting. Includes custom logging functions and best practices.',
      keywords: ['wordpress debug mode', 'WP_DEBUG', 'debug.log', 'wordpress errors', 'troubleshooting wordpress'],
      canonical: 'https://shahmir.dev/snippets/debug-mode-logging',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Enable Debug Mode and Logging',
        description: 'Enable WordPress debug mode to troubleshoot errors, log issues, and develop plugins and themes more effectively.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Intermediate'
      }
    },
    faqs: [
      {
        question: "Should I enable debug mode on my live production site?",
        answer: "Enable WP_DEBUG and WP_DEBUG_LOG, but NEVER enable WP_DEBUG_DISPLAY on production. Displaying errors publicly exposes sensitive information. Log errors privately to debug.log and review them regularly."
      },
      {
        question: "Where is the debug.log file located?",
        answer: "By default, debug.log is created in the /wp-content/ directory. If it doesn't appear, check file permissions (needs to be writable by web server). You can customize the location with ini_set('error_log', '/path/to/custom.log')."
      },
      {
        question: "What's the difference between WP_DEBUG and SCRIPT_DEBUG?",
        answer: "WP_DEBUG enables PHP error reporting. SCRIPT_DEBUG forces WordPress to use development (unminified) versions of core CSS and JavaScript files, making it easier to debug JavaScript issues."
      },
      {
        question: "How do I view database queries?",
        answer: "Enable SAVEQUERIES in wp-config.php, then access queries via $wpdb->queries array. The code includes a function to display all queries and their execution time. Only use on development sites!"
      },
      {
        question: "Can debug mode slow down my site?",
        answer: "Yes, especially SAVEQUERIES which stores all database queries in memory. WP_DEBUG itself has minimal impact. Only enable what you need and disable everything on production sites after troubleshooting."
      }
    ]
  },
  {
    id: 99,
    slug: 'custom-comment-system',
    title: 'Build Custom Comment System',
    excerpt: 'Create a completely custom comment system with custom fields, validation, and display templates beyond WordPress defaults.',
    content: `&lt;h2&gt;Why Build a Custom Comment System?&lt;/h2&gt;
&lt;p&gt;While WordPress has a built-in comment system, you may need additional fields like ratings, custom validation, special formatting, or integration with external services. A custom system gives you complete control.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add custom fields to the comment form&lt;/li&gt;
  &lt;li&gt;Validate and save custom field data&lt;/li&gt;
  &lt;li&gt;Create custom comment display templates&lt;/li&gt;
  &lt;li&gt;Add AJAX submission (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Custom Comment Features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Rating stars or custom scores&lt;/li&gt;
  &lt;li&gt;Image uploads or file attachments&lt;/li&gt;
  &lt;li&gt;Social media profile links&lt;/li&gt;
  &lt;li&gt;Custom formatting and emoji support&lt;/li&gt;
  &lt;li&gt;Voting/like system for comments&lt;/li&gt;
  &lt;li&gt;Custom moderation workflows&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Sanitize and validate all user input&lt;/li&gt;
  &lt;li&gt;Use WordPress nonces for security&lt;/li&gt;
  &lt;li&gt;Store custom data in comment meta&lt;/li&gt;
  &lt;li&gt;Maintain spam protection (Akismet compatibility)&lt;/li&gt;
  &lt;li&gt;Make forms accessible and mobile-friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Advanced Features&lt;/h2&gt;
&lt;p&gt;Integrate with services like Gravatar for avatars, implement threading levels, add real-time updates via AJAX, or create approval workflows with email notifications. Consider pagination for sites with many comments.&lt;/p&gt;`,
    code: `// Add custom field to comment form (star rating)
function add_rating_field_to_comment_form($fields) {
    $fields['rating'] = '&lt;div class="comment-form-rating"&gt;
        &lt;label for="rating"&gt;Rating&lt;span class="required"&gt;*&lt;/span&gt;&lt;/label&gt;
        &lt;select name="rating" id="rating" required&gt;
            &lt;option value=""&gt;Select Rating&lt;/option&gt;
            &lt;option value="5"&gt;5 Stars&lt;/option&gt;
            &lt;option value="4"&gt;4 Stars&lt;/option&gt;
            &lt;option value="3"&gt;3 Stars&lt;/option&gt;
            &lt;option value="2"&gt;2 Stars&lt;/option&gt;
            &lt;option value="1"&gt;1 Star&lt;/option&gt;
        &lt;/select&gt;
    &lt;/div&gt;';

    return $fields;
}
add_filter('comment_form_default_fields', 'add_rating_field_to_comment_form');

// Validate custom field
function validate_comment_rating($commentdata) {
    if (!isset($_POST['rating']) || empty($_POST['rating'])) {
        wp_die(__('Error: Please select a rating.'));
    }

    $rating = intval($_POST['rating']);
    if ($rating < 1 || $rating > 5) {
        wp_die(__('Error: Invalid rating value.'));
    }

    return $commentdata;
}
add_filter('preprocess_comment', 'validate_comment_rating');

// Save custom field to comment meta
function save_comment_rating($comment_id) {
    if (isset($_POST['rating']) && !empty($_POST['rating'])) {
        $rating = intval($_POST['rating']);
        add_comment_meta($comment_id, 'rating', $rating);
    }
}
add_action('comment_post', 'save_comment_rating');

// Display custom field in comment
function display_comment_rating($comment_text, $comment) {
    $rating = get_comment_meta($comment->comment_ID, 'rating', true);

    if ($rating) {
        $stars = str_repeat('★', $rating) . str_repeat('☆', 5 - $rating);
        $comment_text = '&lt;div class="comment-rating"&gt;' . $stars . '&lt;/div&gt;' . $comment_text;
    }

    return $comment_text;
}
add_filter('comment_text', 'display_comment_rating', 10, 2);

// Custom comment template
function custom_comment_template($comment, $args, $depth) {
    $rating = get_comment_meta($comment->comment_ID, 'rating', true);
    ?>
    &lt;li id="comment-&lt;?php comment_ID(); ?&gt;" &lt;?php comment_class(); ?&gt;&gt;
        &lt;article class="comment-body"&gt;
            &lt;div class="comment-author vcard"&gt;
                &lt;?php echo get_avatar($comment, 60); ?&gt;
                &lt;b class="fn"&gt;&lt;?php echo get_comment_author_link(); ?&gt;&lt;/b&gt;
            &lt;/div&gt;

            &lt;?php if ($rating): ?&gt;
                &lt;div class="comment-rating"&gt;
                    &lt;?php echo str_repeat('★', $rating) . str_repeat('☆', 5 - $rating); ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;

            &lt;div class="comment-meta"&gt;
                &lt;time&gt;&lt;?php echo get_comment_date(); ?&gt; at &lt;?php echo get_comment_time(); ?&gt;&lt;/time&gt;
            &lt;/div&gt;

            &lt;div class="comment-content"&gt;
                &lt;?php comment_text(); ?&gt;
            &lt;/div&gt;

            &lt;div class="reply"&gt;
                &lt;?php comment_reply_link(array_merge($args, array(
                    'depth' => $depth,
                    'max_depth' => $args['max_depth']
                ))); ?&gt;
            &lt;/div&gt;
        &lt;/article&gt;
    &lt;?php
}

// AJAX comment submission
function ajax_comment_submission() {
    // Verify nonce
    check_ajax_referer('ajax_comment_nonce', 'nonce');

    // Get form data
    $comment_post_ID = isset($_POST['comment_post_ID']) ? intval($_POST['comment_post_ID']) : 0;
    $author = isset($_POST['author']) ? sanitize_text_field($_POST['author']) : '';
    $email = isset($_POST['email']) ? sanitize_email($_POST['email']) : '';
    $comment = isset($_POST['comment']) ? sanitize_textarea_field($_POST['comment']) : '';
    $rating = isset($_POST['rating']) ? intval($_POST['rating']) : 0;

    // Validate
    if (!$comment_post_ID || empty($author) || empty($email) || empty($comment)) {
        wp_send_json_error('Please fill in all required fields.');
        return;
    }

    // Insert comment
    $commentdata = array(
        'comment_post_ID' => $comment_post_ID,
        'comment_author' => $author,
        'comment_author_email' => $email,
        'comment_content' => $comment,
        'comment_type' => 'comment',
        'comment_approved' => 0, // Moderate
        'user_id' => get_current_user_id()
    );

    $comment_id = wp_insert_comment($commentdata);

    if ($comment_id) {
        // Save rating
        if ($rating > 0) {
            add_comment_meta($comment_id, 'rating', $rating);
        }

        wp_send_json_success('Comment submitted successfully!');
    } else {
        wp_send_json_error('Failed to submit comment.');
    }
}
add_action('wp_ajax_submit_comment', 'ajax_comment_submission');
add_action('wp_ajax_nopriv_submit_comment', 'ajax_comment_submission');

// Enqueue AJAX script
function enqueue_comment_ajax_script() {
    if (is_single()) {
        wp_enqueue_script('comment-ajax', get_template_directory_uri() . '/js/comment-ajax.js', array('jquery'), '1.0', true);
        wp_localize_script('comment-ajax', 'commentAjax', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ajax_comment_nonce')
        ));
    }
}
add_action('wp_enqueue_scripts', 'enqueue_comment_ajax_script');

// Add voting system to comments
function add_comment_voting() {
    wp_enqueue_script('comment-voting', get_template_directory_uri() . '/js/comment-voting.js', array('jquery'));
}
add_action('wp_enqueue_scripts', 'add_comment_voting');

function vote_comment() {
    check_ajax_referer('vote_comment_nonce', 'nonce');

    $comment_id = isset($_POST['comment_id']) ? intval($_POST['comment_id']) : 0;
    $vote = isset($_POST['vote']) ? sanitize_text_field($_POST['vote']) : '';

    if (!$comment_id || !in_array($vote, array('up', 'down'))) {
        wp_send_json_error();
        return;
    }

    $votes = get_comment_meta($comment_id, 'votes', true);
    if (!is_array($votes)) {
        $votes = array('up' => 0, 'down' => 0);
    }

    $votes[$vote]++;
    update_comment_meta($comment_id, 'votes', $votes);

    wp_send_json_success($votes);
}
add_action('wp_ajax_vote_comment', 'vote_comment');
add_action('wp_ajax_nopriv_vote_comment', 'vote_comment');`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '8 min',
    category: 'WordPress Advanced',
    tags: ['comments', 'development', 'advanced', 'custom-fields', 'ajax'],
    difficulty: 'advanced',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Build Custom WordPress Comment System - Advanced Tutorial',
      metaDescription: 'Learn how to create a custom WordPress comment system with ratings, custom fields, AJAX submission, and advanced features.',
      keywords: ['wordpress custom comments', 'comment system', 'comment meta', 'ajax comments', 'comment ratings'],
      canonical: 'https://shahmir.dev/snippets/custom-comment-system',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Build Custom Comment System',
        description: 'Create a completely custom comment system with custom fields, validation, and display templates beyond WordPress defaults.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Advanced'
      }
    },
    faqs: [
      {
        question: "Should I build a custom comment system or use a third-party service?",
        answer: "Build custom if you need specific features WordPress doesn't offer and want complete control. Use services like Disqus or Facebook Comments for social integration, easier spam management, or if you don't want to maintain comment infrastructure."
      },
      {
        question: "How do I add image uploads to comments?",
        answer: "Add a file input field to the comment form, handle the upload with wp_handle_upload() during comment submission, and store the attachment ID in comment meta. Be sure to validate file types and sizes for security."
      },
      {
        question: "Can custom comment fields work with Akismet spam protection?",
        answer: "Yes, Akismet checks comment_author, comment_author_email, comment_author_url, and comment_content by default. Your custom fields won't affect spam detection unless you specifically send them to Akismet."
      },
      {
        question: "How do I make comments load via AJAX without page refresh?",
        answer: "Enqueue jQuery, create a JavaScript handler for form submission that sends data via AJAX to wp_ajax hooks, process the comment server-side, and return HTML to insert into the DOM. The code example includes basic AJAX setup."
      },
      {
        question: "Should I store custom comment data in comment meta or custom tables?",
        answer: "Use comment meta (add_comment_meta) for most custom fields—it's WordPress standard, works with existing functions, and scales well. Only create custom tables for complex relational data or if you have hundreds of comments per post."
      }
    ]
  },
  {
    id: 100,
    slug: 'custom-walker-class',
    title: 'Create Custom Walker Class for Menus',
    excerpt: 'Build a custom Walker class to completely control WordPress navigation menu output with custom HTML structure and CSS classes.',
    content: `&lt;h2&gt;Why Create a Custom Walker?&lt;/h2&gt;
&lt;p&gt;WordPress Walkers control how menus, taxonomies, and other hierarchical data are output. Creating a custom Walker gives you complete control over menu HTML, allowing you to add custom classes, data attributes, icons, or complex structures.&lt;/p&gt;

&lt;h2&gt;Implementation Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Extend the Walker_Nav_Menu class&lt;/li&gt;
  &lt;li&gt;Override start_lvl(), start_el(), end_el(), end_lvl() methods&lt;/li&gt;
  &lt;li&gt;Register your walker in wp_nav_menu() call&lt;/li&gt;
  &lt;li&gt;Test menu output and nested items&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Add custom CSS frameworks (Bootstrap, Foundation)&lt;/li&gt;
  &lt;li&gt;Include icons or images in menu items&lt;/li&gt;
  &lt;li&gt;Add mega menu markup&lt;/li&gt;
  &lt;li&gt;Custom mobile menu structures&lt;/li&gt;
  &lt;li&gt;Add data attributes for JavaScript&lt;/li&gt;
  &lt;li&gt;Accessibility improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Extend Walker_Nav_Menu, don't modify core files&lt;/li&gt;
  &lt;li&gt;Test with multiple menu levels (2-3 deep)&lt;/li&gt;
  &lt;li&gt;Maintain accessibility (ARIA attributes)&lt;/li&gt;
  &lt;li&gt;Use proper escaping for output&lt;/li&gt;
  &lt;li&gt;Document custom classes for other developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Walker Methods&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;start_lvl():&lt;/strong&gt; Opens submenu wrapper. &lt;strong&gt;end_lvl():&lt;/strong&gt; Closes submenu wrapper. &lt;strong&gt;start_el():&lt;/strong&gt; Outputs individual menu item opening. &lt;strong&gt;end_el():&lt;/strong&gt; Outputs individual menu item closing.&lt;/p&gt;`,
    code: `// Basic custom Walker class
class Custom_Nav_Walker extends Walker_Nav_Menu {

    // Start level (submenu wrapper)
    function start_lvl(&$output, $depth = 0, $args = null) {
        $indent = str_repeat("\t", $depth);
        $classes = array('sub-menu', 'dropdown-menu');
        $class_names = implode(' ', $classes);

        $output .= "\n{$indent}&lt;ul class=\"{$class_names}\"&gt;\n";
    }

    // Start element (menu item)
    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = ($depth) ? str_repeat("\t", $depth) : '';

        // Build classes
        $classes = empty($item->classes) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;

        // Add custom class for items with children
        if (in_array('menu-item-has-children', $classes)) {
            $classes[] = 'has-dropdown';
        }

        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';

        // Build ID
        $id = apply_filters('nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth);
        $id = $id ? ' id="' . esc_attr($id) . '"' : '';

        // Output opening li
        $output .= $indent . '&lt;li' . $id . $class_names . '&gt;';

        // Build attributes
        $atts = array();
        $atts['title'] = !empty($item->attr_title) ? $item->attr_title : '';
        $atts['target'] = !empty($item->target) ? $item->target : '';
        $atts['rel'] = !empty($item->xfn) ? $item->xfn : '';
        $atts['href'] = !empty($item->url) ? $item->url : '';

        // Add custom data attributes
        $atts['data-id'] = $item->ID;

        // Add aria attributes for accessibility
        if (in_array('menu-item-has-children', $classes)) {
            $atts['aria-haspopup'] = 'true';
            $atts['aria-expanded'] = 'false';
        }

        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);

        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }

        // Build menu item content
        $title = apply_filters('the_title', $item->title, $item->ID);
        $title = apply_filters('nav_menu_item_title', $title, $item, $args, $depth);

        // Add icon if specified in menu description
        $icon = !empty($item->description) ? '&lt;i class="' . esc_attr($item->description) . '"&gt;&lt;/i&gt; ' : '';

        $item_output = $args->before;
        $item_output .= '&lt;a' . $attributes . '&gt;';
        $item_output .= $args->link_before . $icon . $title . $args->link_after;
        $item_output .= '&lt;/a&gt;';
        $item_output .= $args->after;

        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
}

// Use the custom walker
wp_nav_menu(array(
    'theme_location' => 'primary',
    'walker' => new Custom_Nav_Walker()
));

// Bootstrap 5 compatible Walker
class Bootstrap_Nav_Walker extends Walker_Nav_Menu {

    function start_lvl(&$output, $depth = 0, $args = null) {
        $indent = str_repeat("\t", $depth);
        $output .= "\n{$indent}&lt;ul class=\"dropdown-menu\"&gt;\n";
    }

    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = ($depth) ? str_repeat("\t", $depth) : '';

        $classes = empty($item->classes) ? array() : (array) $item->classes;
        $classes[] = 'nav-item';

        if (in_array('menu-item-has-children', $classes)) {
            $classes[] = 'dropdown';
        }

        if ($item->current) {
            $classes[] = 'active';
        }

        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = ' class="' . esc_attr($class_names) . '"';

        $output .= $indent . '&lt;li' . $class_names . '&gt;';

        $atts = array();
        $atts['title'] = !empty($item->attr_title) ? $item->attr_title : '';
        $atts['target'] = !empty($item->target) ? $item->target : '';
        $atts['rel'] = !empty($item->xfn) ? $item->xfn : '';
        $atts['href'] = !empty($item->url) ? $item->url : '';
        $atts['class'] = 'nav-link';

        if (in_array('dropdown', $classes)) {
            $atts['class'] .= ' dropdown-toggle';
            $atts['data-bs-toggle'] = 'dropdown';
            $atts['aria-expanded'] = 'false';
        }

        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);

        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }

        $title = apply_filters('the_title', $item->title, $item->ID);

        $item_output = $args->before;
        $item_output .= '&lt;a' . $attributes . '&gt;';
        $item_output .= $args->link_before . $title . $args->link_after;
        $item_output .= '&lt;/a&gt;';
        $item_output .= $args->after;

        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
}

// Usage with Bootstrap Walker
wp_nav_menu(array(
    'theme_location' => 'primary',
    'menu_class' => 'navbar-nav',
    'walker' => new Bootstrap_Nav_Walker()
));`,
    author: 'Shahmir Khaliq',
    date: '2024-01-21',
    readTime: '7 min',
    category: 'WordPress Advanced',
    tags: ['menus', 'walker', 'advanced-development', 'navigation', 'custom'],
    difficulty: 'advanced',
    compatibility: ['WordPress 5.0+'],
    seo: {
      metaTitle: 'Create Custom WordPress Walker Class - Navigation Menu Guide',
      metaDescription: 'Learn how to create custom Walker classes for WordPress navigation menus. Control HTML output, add Bootstrap support, and create mega menus.',
      keywords: ['wordpress walker class', 'custom nav menu', 'Walker_Nav_Menu', 'bootstrap menu wordpress', 'custom menu html'],
      canonical: 'https://shahmir.dev/snippets/custom-walker-class',
      schema: {
        '@context': 'https://schema.org',
        '@type': 'TechArticle',
        headline: 'Create Custom Walker Class for Menus',
        description: 'Build a custom Walker class to completely control WordPress navigation menu output with custom HTML structure and CSS classes.',
        author: {
          '@type': 'Person',
          name: 'Shahmir Khaliq'
        },
        datePublished: '2024-01-21',
        proficiencyLevel: 'Advanced'
      }
    },
    faqs: [
      {
        question: "What's the difference between Walker_Nav_Menu and Walker classes?",
        answer: "Walker is the base class for traversing any hierarchical data. Walker_Nav_Menu extends Walker specifically for navigation menus. Always extend Walker_Nav_Menu (not Walker) for menu customization as it includes menu-specific methods."
      },
      {
        question: "Do I need to override all Walker methods?",
        answer: "No, only override the methods you need to change. If you only want to modify menu item output, override just start_el(). The parent class handles methods you don't override."
      },
      {
        question: "Can I add custom fields to menu items for use in my Walker?",
        answer: "Yes! Use add_menu_item_custom_fields hook to add fields in the menu editor, then access them via $item->your_field_name in your Walker. Store custom data using update_post_meta() with the menu item ID."
      },
      {
        question: "How do I make my custom Walker work with mega menus?",
        answer: "In start_el(), check menu item depth and specific classes to identify mega menu triggers. Output custom wrapper divs and styling. You may need to query child items manually using wp_get_nav_menu_items() for complex layouts."
      },
      {
        question: "Is there a way to avoid creating a Walker class for simple changes?",
        answer: "Yes! For minor changes use filters like nav_menu_css_class, nav_menu_link_attributes, or walker_nav_menu_start_el. Only create custom Walkers when you need significant HTML structure changes that filters can't achieve."
      }
    ]
  }
]
// Helper functions for blog display
export function getAllWPSnippets() {
  return wpCodeSnippets;
}

export function getWPSnippetBySlug(slug) {
  return wpCodeSnippets.find(snippet => snippet.slug === slug);
}

export function getWPSnippetsByCategory(category) {
  return wpCodeSnippets.filter(snippet => snippet.category === category);
}

export function getWPSnippetsByTag(tag) {
  return wpCodeSnippets.filter(snippet => snippet.tags.includes(tag));
}

export function getWPSnippetsByDifficulty(difficulty) {
  return wpCodeSnippets.filter(snippet => snippet.difficulty === difficulty);
}
